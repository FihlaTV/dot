{"version":3,"sources":["../node_modules/grunt-requirejs/node_modules/almond/almond.js","../../phet-core/js/Namespace.js","../../phet-core/js/phetCore.js","../../phet-core/js/phetAllocation.js","dot.js","../../phet-core/js/extend.js","../../phet-core/js/inherit.js","../../phet-core/js/Poolable.js","Util.js","Vector2.js","Bounds2.js","BinPacker.js","Vector4.js","Vector3.js","Bounds3.js","Complex.js","ConvexHull2.js","Dimension2.js","EigenvalueDecomposition.js","LinearFunction.js","LUDecomposition.js","../../phet-core/js/isArray.js","SingularValueDecomposition.js","QRDecomposition.js","Matrix.js","Matrix4.js","Matrix3.js","MatrixOps3.js","Permutation.js","Plane3.js","Quaternion.js","Random.js","Ray2.js","Ray3.js","Rectangle.js","Sphere3.js","../../axon/js/axon.js","../../phet-core/js/cleanArray.js","../../axon/js/Events.js","Transform3.js","Transform4.js","main.js","../../phet-core/js/arrayRemove.js","../../phet-core/js/collect.js","../../phet-core/js/detectPrefix.js","../../phet-core/js/detectPrefixEvent.js","../../phet-core/js/escapeHTML.js","../../phet-core/js/EventTimer.js","../../phet-core/js/loadScript.js","../../phet-core/js/pairs.js","../../phet-core/js/partition.js","../../phet-core/js/platform.js","../../phet-core/js/main.js","../../axon/js/Emitter.js","../../axon/js/Multilink.js","../../axon/js/Property.js","../../axon/js/DerivedProperty.js","../../axon/js/ObservableArray.js","../../axon/js/PropertySet.js","../../axon/js/main.js","config.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","slice","length","nodeIdCompat","jsSuffixRegExp","test","replace","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","req","apply","aps","arguments","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","args","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Namespace","this","window","phet","constructor","register","key","keys","parent","lastKey","phetCore","phetAllocation","alloc","stack","count","stacks","log","report","_","sortBy","each","console","dot","x","y","Vector2","z","Vector3","w","Vector4","Float64Array","Array","extend","source","defineProperty","getOwnPropertyDescriptor","inherit","supertype","subtype","prototypeProperties","staticProperties","F","Poolable","mixin","type","options","proto","maxPoolSize","initialSize","pool","defaultFactory","dirtyFromPool","pop","fillPool","push","constructorDuplicateFactory","createFromPool","freeToPool","generate","z0","z1","EPSILON","Number","MIN_VALUE","TWO_PI","Math","PI","Util","clamp","min","max","moduloBetweenDown","divisor","partial","moduloBetweenUp","rangeInclusive","a","b","result","rangeExclusive","toRadians","degrees","toDegrees","radians","gcd","lineLineIntersection","p1","p2","p3","p4","x12","x34","y12","y34","denom","sphereRayIntersection","radius","ray","epsilon","center","rayDir","direction","pos","position","centerToRay","minus","tmp","centerToRayDistSq","magnitudeSquared","det","base","sqt","sqrt","ta","tb","hitPositionB","pointAtDistance","normalB","normalized","distance","hitPoint","normal","negated","fromOutside","hitPositionA","normalA","solveQuadraticRootsReal","c","abs","discriminant","solveCubicRootsReal","d","q","r","b3","dsqrt","cubeRoot","rsqrt","doubleRoot","qX","acos","rr","cos","pow","linear","a1","a2","b1","b2","a3","roundSymmetric","round","toFixed","decimalPlaces","multiplier","newValue","toFixedNumber","parseFloat","isInteger","lineSegmentIntersection","x1","y1","x2","y2","x3","y3","x4","y4","numA","numB","ua","ub","distToSegmentSquared","point","segmentLength","distanceSquared","t","distToSegment","arePointsCollinear","triangleArea","triangleAreaSigned","log10","val","LN10","boxMullerTransform","mu","sigma","u1","u2","random","sin","isVector2","dimension","magnitude","distanceXY","dx","dy","distanceSquaredXY","v","dotXY","angle","atan2","angleBetween","thisMagnitude","vMagnitude","equals","other","equalsEpsilon","isFinite","copy","vector","set","crossScalar","mag","withMagnitude","setMagnitude","timesScalar","scalar","times","componentTimes","plus","plusXY","plusScalar","minusXY","minusScalar","dividedScalar","perpendicular","rotated","newAngle","blend","ratio","average","toString","toVector3","setXY","setX","setY","scale","multiplyScalar","add","addXY","addScalar","subtract","subtractXY","subtractScalar","multiply","componentMultiply","divideScalar","negate","rotate","setPolar","toStateObject","createPolar","fromStateObject","stateObject","Immutable","mutableOverrideHelper","mutableFunctionName","ZERO","X_UNIT","Y_UNIT","Bounds2","minX","minY","maxX","maxY","scratchVector2","isBounds","getWidth","width","getHeight","height","getX","getY","getMinX","getMinY","getMaxX","getMaxY","getLeft","left","getTop","top","getRight","right","getBottom","bottom","getCenterX","centerX","getCenterY","centerY","getLeftTop","leftTop","getCenterTop","centerTop","getRightTop","rightTop","getLeftCenter","leftCenter","getCenter","getRightCenter","rightCenter","getLeftBottom","leftBottom","getCenterBottom","centerBottom","getRightBottom","rightBottom","isEmpty","hasNonzeroArea","isValid","closestPointTo","location","containsCoordinates","xConstrained","yConstrained","containsPoint","containsBounds","bounds","intersectsBounds","minimumDistanceToPointSquared","closeX","closeY","maximumDistanceToPointSquared","thisFinite","otherFinite","union","intersection","withCoordinates","withPoint","withMinX","withMinY","withMaxX","withMaxY","roundedOut","floor","ceil","roundedIn","transformed","matrix","transform","dilated","dilatedX","dilatedY","dilatedXY","eroded","erodedX","erodedY","erodedXY","withOffsets","shiftedX","shiftedY","shifted","setMinMax","setMinX","setMinY","setMaxX","setMaxY","includeBounds","constrainBounds","addCoordinates","addPoint","roundOut","roundIn","isIdentity","NOTHING","multiplyVector2","dilate","dilateX","dilateY","dilateXY","erode","erodeX","erodeY","erodeXY","offset","shiftX","shiftY","shift","getClosestPoint","rect","POSITIVE_INFINITY","NEGATIVE_INFINITY","EVERYTHING","BinPacker","rootBin","Bin","allocate","bin","findAvailableBin","sizedBin","use","deallocate","unuse","binTree","padding","children","isSplit","isUsed","splitX","splitY","mainBounds","rightBounds","bottomBounds","mainBin","attemptToCollapse","child","isVector4","distanceXYZW","dz","dw","distanceSquaredXYZW","dotXYZW","plusXYZW","minusXYZW","setXYZW","setZ","setW","addXYZW","subtractXYZW","Z_UNIT","W_UNIT","isVector3","distanceXYZ","distanceSquaredXYZ","dotXYZ","cross","plusXYZ","minusXYZ","toVector2","toVector4","setXYZ","addXYZ","subtractXYZ","slerp","start","end","Quaternion","getRotationQuaternion","timesVector3","Bounds3","minZ","maxZ","getDepth","depth","getZ","getMinZ","getMaxZ","getBack","back","getFront","front","getCenterZ","centerZ","withMinZ","withMaxZ","dilatedZ","dilatedXYZ","erodedZ","erodedXYZ","shiftedZ","setMinZ","setMaxZ","withIt","multiplyVector3","dilateZ","dilateXYZ","erodeZ","erodeXYZ","shiftZ","cuboid","Complex","real","imaginary","phase","dividedBy","cMag","conjugate","exponentiated","exp","ONE","I","ccw","ConvexHull2","grahamScan","points","includeCollinear","isRightTurn","Dimension2","setWidth","setHeight","toBounds","EigenvalueDecomposition","A","entries","getColumnDimension","V","Float32Array","issymmetric","tred2","tql2","H","ort","orthes","hqr2","getV","getRealEigenvalues","getImagEigenvalues","getD","X","Matrix","D","k","g","h","hh","l","iter","tst1","eps","m","hypot","dl1","c2","c3","el1","s","s2","low","high","cdiv","xr","xi","yr","yi","cdivr","cdivi","nn","exshift","norm","notlast","ra","sa","vr","vi","LinearFunction","isUndefined","evaluate","inverse","LUDecomposition","LU","getArrayCopy","getRowDimension","piv","Uint32Array","pivsign","LUcolj","kmax","ik","pk","jk","isNonsingular","getL","getU","getPivot","getDoublePivot","vals","solve","nx","Xmat","getArrayRowMatrix","isArray","array","SingularValueDecomposition","Arg","nu","U","cs","sn","work","wantu","wantv","nct","nrt","pp","tiny","kase","ks","sp","spm1","epm1","sk","ek","getSingularValues","getS","norm2","cond","rank","tol","QRDecomposition","QR","Rdiag","nrm","isFullRank","getH","getR","getQ","getMatrix","filler","fast","size","getArray","get","i0","i1","j0","j1","transpose","norm1","normInf","normF","uminus","checkMatrixDimensions","plusEquals","minusEquals","arrayTimes","arrayTimesEquals","arrayRightDivide","arrayRightDivideEquals","arrayLeftDivide","arrayLeftDivideEquals","matrixOrScalar","isMatrix","matrixcolj","timesEquals","solveTranspose","identity","trace","row","col","extractVector2","column","extractVector3","extractVector4","setVectors3","vectors","rowVector2","rowVector3","rowVector4","rowVector","columnVector2","columnVector3","columnVector4","columnVector","fromVectors2","data","fromVectors3","fromVectors4","Matrix4","v00","v01","v02","v03","v10","v11","v12","v13","v20","v21","v22","v23","v30","v31","v32","v33","rowMajor","Types","OTHER","IDENTITY","TRANSLATION_3D","SCALING","AFFINE","translation","translationFromVector","scaling","rotationAxisAngle","axis","C","rotationX","rotationY","rotationZ","gluPerspective","fovYRadians","aspect","zNear","zFar","cotangent","columnMajor","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","getTranslation","getScaleVector","m0003","m1013","m2023","m3033","m0103","m1113","m2123","m3133","m0203","m1213","m2223","m3233","scaleVector","getCSSTransform","cssTransform","transposed","inverted","getDeterminant","timesMatrix","timesVector4","timesTransposeVector4","timesTransposeVector3","timesRelativeVector3","determinant","makeImmutable","Matrix3","argumentsShouldNotExist","createIdentityArray","FastArray","identityFastArray","TRANSLATION_2D","setToIdentity","setToTranslation","setToScale","affine","setToAffine","setToRotationAxisAngle","setToRotationX","setToRotationY","setToRotationZ","rotation2","rotationAround","rotationAroundPoint","fromSVGMatrix","svgMatrix","setToSVGMatrix","rotateAToB","setRotationAToB","isFastIdentity","isAffine","isAligned","isAxisAligned","getRotation","rotation","toMatrix4","toAffineMatrix4","toSVGMatrix","document","createElementNS","createSVGMatrix","getSVGTransform","svgNumber","number","svgTransform","getCSSTransformStyles","transformCSS","-webkit-perspective","-webkit-backface-visibility","-webkit-transform","-moz-transform","-ms-transform","-o-transform","transform-origin","-ms-transform-origin","cssTransformStyles","timesVector2","timesTransposeVector2","timesRelativeVector2","setArray","set00","set01","set02","set10","set11","set12","set20","set21","set22","invert","multiplyMatrix","prependTranslation","c1","u","hvx","hvz","hvxy","hvxz","hvyz","setTo32Bit","setTo64Bit","multiplyTransposeVector2","multiplyRelativeVector2","canvasSetTransform","context","setTransform","canvasAppendTransform","instance","X_REFLECTION","Y_REFLECTION","translationTimesMatrix","printer","print","SQRT_HALF","MatrixOps3","index3","set3","transpose3","m1","m2","m3","m5","m6","m7","det3","mult3","m0","m4","m8","mult3LeftTranspose","mult3RightTranspose","mult3BothTranspose","mult3Vector3","swapNegateColumn","idx0","idx1","tmp0","tmp1","tmp2","setIdentity3","setGivens3","preMult3Givens","baseA","baseB","postMult3Givens","applyJacobi3","mS","mQ","a11","a12","a22","lhs","rhs","useAngle","jacobiIteration3","qrAnnihilate3","diagonalValue","targetValue","diagonalSquared","targetSquared","rsqr","svd3","jacobiIterationCount","resultU","resultSigma","resultV","tmpMag","mag0","mag1","mag2","bigEpsilon","columnVectors","getColumnVector3","columnIndex","mult","multRightTranspose","permuteColumns","permutation","permutedColumnIndex","indices","Permutation","recursiveForEachPermutation","element","nextArray","nextPrefix","permutations","forEachPermutation","integers","arrayOrInt","newPermutation","withIndicesPermuted","that","oldIndices","testMe","Plane3","intersectWithRay","distanceToPlane","XY","XZ","YZ","fromTriangle","isQuaternion","quat","timesQuaternion","toRotationMatrix","flip","xx","xy","xz","xw","yy","yz","yw","zz","zw","fromEulerAngles","yaw","roll","pitch","sinPitch","cosPitch","sinRoll","cosRoll","sinYaw","cosYaw","fromRotationMatrix","ratioA","ratioB","theta","invSinTheta","Random","tandem","seed","staticSeed","chipper","randomSeed","setSeed","addInstance","seedrandom","getSeed","nextBoolean","nextInt","nextDouble","vv","nextGaussian","Ray2","Ray3","plane","Rectangle","Sphere3","intersect","raydir","intersections","resultB","resultA","cleanArray","arr","Events","_eventListeners","_staticEventListeners","disposeEvents","removeInstance","axon","dispose","on","eventName","onStatic","once","events","wrappedCallback","off","offStatic","hasListener","hasStaticListener","removeAllEventListeners","trigger","suffix","listeners","staticListeners","staticCount","hasNoArguments","listener","staticListener","trigger0","trigger1","param1","trigger2","param2","Transform3","matrixTransposed","inverseTransposed","inverseValid","transposeValid","inverseTransposeValid","setMatrix","scratchMatrix","invalidate","prepend","append","prependTransform","appendTransform","applyToCanvasContext","getInverse","getMatrixTransposed","getInverseTransposed","transformPosition2","transformDelta2","transformNormal2","transformX","transformY","transformDeltaX","transformDeltaY","transformBounds2","transformShape","shape","transformRay2","inversePosition2","inverseDelta2","inverseNormal2","inverseX","inverseY","inverseDeltaX","inverseDeltaY","inverseBounds2","bounds2","inverseShape","inverseRay2","Transform4","transformPosition3","transformDelta3","transformNormal3","transformDeltaZ","transformRay","inversePosition3","inverseDelta3","inverseNormal3","inverseDeltaZ","inverseRay","arrayRemove","item","collect","iterate","ob","detectPrefix","toUpperCase","detectPrefixEvent","isEvent","escapeHTML","str","EventTimer","eventModel","eventCallback","timeBeforeNextEvent","getPeriodBeforeNextEvent","step","dt","ConstantEventModel","rate","UniformEventModel","pseudoRandomNumberSource","uniformRandomNumber","PoissonEventModel","loadScript","src","async","cacheBuster","called","script","createElement","onload","onreadystatechange","state","readyState","getElementsByTagName","parentNode","insertBefore","pairs","first","partition","predicate","satisfied","unsatisfied","isIE","version","getInternetExplorerVersion","rv","re","navigator","appName","RegExp","exec","$1","userAgent","platform","firefox","toLowerCase","mobileSafari","match","safari5","safari6","safari7","ie","ie9","ie10","ie11","android","edge","chromium","Emitter","listenersToEmitTo","addListener","defendCallbacks","removeListener","removeAllListeners","defended","defendedListeners","emit","lastEntry","emit1","arg1","emit2","arg2","hasListeners","Multilink","dependencies","lazy","dependencyValues","property","multilink","dependencyListeners","dependency","lazyLink","unlink","Property","isTandem","_value","_initialValue","changedEmitter","disposeProperty","equalsValue","_setAndNotifyObservers","areValuesEqual","initialValue","oldValue","_notifyObservers","notifyObserversStatic","reset","link","observer","unlinkAll","linkAttribute","object","attributeName","handle","unlinkAttribute","valueOf","wrapper","debug","toggleFunction","toggle","bind","onValue","onValueObserver","properties","lazyMultilink","unmultilink","derivedProperty","addProperty","propertyName","configurable","enumerable","equalsFunction","notFunction","conjunctionWithProperty","disjunctionWithProperty","addWithProperty","multiplyWithProperty","DerivedProperty","derivation","valueEquals","firstProperty","secondProperty","and","reduce","or","sum","product","lessThanNumber","lessThanEqualNumber","greaterThanNumber","greaterThanEqualNumber","derivedNot","mapValues","values","ObservableArray","_options","allowDuplicates","_array","_addedListeners","_removedListeners","lengthProperty","initialArray","startedCallbacksForItemAddedEmitter","endedCallbacksForItemAddedEmitter","startedCallbacksForItemRemovedEmitter","endedCallbacksForItemRemovedEmitter","disposeObservableArray","_fireItemRemoved","_fireItemAdded","addItemAddedListener","removeItemAddedListener","addItemRemovedListener","removeItemRemovedListener","addListeners","itemAddedListener","itemRemovedListener","addAll","items","remove","removeAll","list","contains","clear","forEach","mapFunction","filter","combiner","PropertySet","tandemSet","propertySet","getOwnPropertyNames","SUFFIX","addGetterAndSetter","removeProperty","addGetter","toDerivedProperty","propertyNames","getProperties","addDerivedProperty","dependencyNames","propertyKey","setValues","getValues","text","paths","DOT","PHET_CORE","AXON","urlArgs","Date","now"],"mappings":"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8E,GAAAL,KAAAM,KAAA/E,EACAizC,GAAAA,EAAAnuC,EAAA,IAAAqtC,EAAArtC,GAAAkO,WACAhT,EAAAyE,KAAAM,KAAArE,OAAA,IACAuyC,GAAA,KAGA,MAAAA,GAAA,KAOA9F,UAAA,WACA,GAAAgF,GAAA1tC,IACAA,MAAAM,KAAA8sC,QAAA,SAAA/sC,GACAqtC,EAAArtC,EAAAutC,GAAAlF,eAUAtB,SAAA,SAAAyC,GACA,MAAA7pC,MAAA6pC,EAAA+D,IAOA5Q,QAAA,WACA,IAAA,GAAAzhC,GAAA,EAAAA,EAAAyE,KAAAM,KAAArE,OAAAV,IACAyE,KAAAA,KAAAM,KAAA/E,GAAAqyC,GAAA5Q,eC3WA3iC,EAAA,aACA,YACA,gBACA,uBACA,eACA,cACA,uBACA,mBACA,kBACA,SAAA0iC,GACA,YACA,OAAAA,KCXA3iC,EAAAyB,QACAoD,MAAA,OAAA,iBAAA,aAEAwvC,OACAC,IAAA,IACAC,UAAA,qBACAC,KAAA,iBAIAC,QAAAC,KAAAC,QAGA10C,EAAA,SAAA,cAEA4F,OAAAoB,IAAAjH,EAAA,QAAA6F,OAAA88B,KAAA3iC,EAAA,aAAA6F,OAAAQ,SAAArG,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A5DjvaA,ADwaA;ACvaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA,ADiBA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA,ADuBA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA,AD+DA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjnnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACj3BA,ADk3BA;ACjxyBA,ADyyBA;ACxypzBA,ADqzBA;ACpzvtvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrr9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA,ADmEA;ACllNA,ADmNA;AClNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACthhBA,ADihBA;AChhjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACliBA,ADmiBA;AClilgqhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClhlKA,ADmKA;AClKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjhvlzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA,ADsCA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvxBA,ADyBA;ACxtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvpXA,ADqXA;ACprnXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dot.min.js","sourcesContent":["/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"almond\", function(){});\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * @author Jonathan Olson\n * @author Chris Malley (PixelZoom, Inc.)\n */\ndefine( 'PHET_CORE/Namespace',['require'],function( require ) {\n  'use strict';\n\n  /**\n   * @param {string} name\n   * @constructor\n   */\n  function Namespace( name ) {\n\n    this.name = name; // @public (read-only)\n\n    if ( window.phet ) {\n      assert && assert( !window.phet[ name ], 'namespace ' + name + ' already exists' );\n      window.phet[ name ] = this;\n    }\n  }\n\n  Namespace.prototype = {\n\n    constructor: Namespace,\n\n    /**\n     * Registers a key-value pair with the namespace.\n     *\n     * If there are no dots ('.') in the key, it will be assigned to the namespace. For example:\n     * - x.register( 'A', A );\n     * will set x.A = A.\n     *\n     * If the key contains one or more dots ('.'), it's treated somewhat like a path expression. For instance, if the\n     * following is called:\n     * - x.register( 'A.B.C', C );\n     * then the register function will navigate to the object x.A.B and add x.A.B.C = C.\n     *\n     * @param {string} key\n     * @param {*} value\n     * @public\n     */\n    register: function( key, value ) {\n\n      // If the key isn't compound (doesn't contain '.'), we can just look it up on this namespace\n      if ( key.indexOf( '.' ) < 0 ) {\n        assert && assert( !this[ key ], key + ' is already registered for namespace ' + this.name );\n        this[ key ] = value;\n      }\n      // Compound (contains '.' at least once). x.register( 'A.B.C', C ) should set x.A.B.C.\n      else {\n        var keys = key.split( '.' ); // e.g. [ 'A', 'B', 'C' ]\n\n        // Walk into the namespace, verifying that each level exists. e.g. parent => x.A.B\n        var parent = this;\n        for ( var i = 0; i < keys.length - 1; i++ ) { // for all but the last key\n          assert && assert( !!parent[ keys[ i ] ],\n            [ this.name ].concat( keys.slice( 0, i + 1 ) ).join( '.' ) + ' needs to be defined to register ' + key );\n\n          parent = parent[ keys[ i ] ];\n        }\n\n        // Write into the inner namespace, e.g. x.A.B[ 'C' ] = C\n        var lastKey = keys[ keys.length - 1 ];\n        assert && assert( !parent[ lastKey ], key + ' is already registered for namespace ' + this.name );\n        parent[ lastKey ] = value;\n      }\n\n      return value;\n    }\n  };\n\n  return Namespace;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'PHET_CORE/phetCore',['require','PHET_CORE/Namespace'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  // no phetAllocation initialized, since we don't need it with just phet-core, and this file is required before that\n\n  var phetCore = new Namespace( 'phetCore' );\n\n  // Namespace can't require this file, so we register it as a special case.\n  phetCore.register( 'Namespace', Namespace );\n\n  return phetCore;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Object instance allocation tracking, so we can cut down on garbage collection.\n *\n * Sample usage:\n * 1. Run the sim and set up the scenario that you wish to profile\n * 2. In the JS console, type: window.alloc={}\n * 3. Wait until you have taken enough data\n * 4. Type x = window.alloc; delete window.alloc;\n *\n * Now you can inspect the x variable which contains the allocation information.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/phetAllocation',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function phetAllocation( name ) {\n    if ( window.alloc ) {\n      var stack;\n      try { throw new Error(); }\n      catch( e ) { stack = e.stack; }\n\n      if ( !window.alloc[ name ] ) {\n        window.alloc[ name ] = { count: 0, stacks: {} };\n      }\n      var log = window.alloc[ name ];\n\n      log.count++;\n      if ( !log.stacks[ stack ] ) {\n        log.stacks[ stack ] = 1;\n      }\n      else {\n        log.stacks[ stack ] += 1;\n      }\n      log.report = function() {\n        var stacks = Object.keys( log.stacks );\n        stacks = _.sortBy( stacks, function( key ) { return log.stacks[ key ]; } );\n        _.each( stacks, function( stack ) {\n          console.log( log.stacks[ stack ] + ': ' + stack );\n        } );\n      };\n    }\n  }\n\n  phetCore.register( 'phetAllocation', phetAllocation );\n\n  return phetAllocation;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'DOT/dot',['require','PHET_CORE/Namespace','PHET_CORE/phetAllocation'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  // object allocation tracking\n  window.phetAllocation = require( 'PHET_CORE/phetAllocation' );\n\n  var dot = new Namespace( 'dot' );\n\n  dot.register( 'v2', function( x, y ) { return new dot.Vector2( x, y ); } );\n  dot.register( 'v3', function( x, y, z ) { return new dot.Vector3( x, y, z ); } );\n  dot.register( 'v4', function( x, y, z, w ) { return new dot.Vector4( x, y, z, w ); } );\n\n  // TODO: performance: check browser speed to compare how fast this is. We may need to add a 32 option for GL ES.\n  dot.register( 'FastArray', window.Float64Array ? window.Float64Array : window.Array );\n\n  // will be filled in by other modules\n  return dot;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Like Underscore's _.extend, but with hardcoded support for ES5 getters/setters.\n *\n * See https://github.com/documentcloud/underscore/pull/986.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/extend',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function extend( obj ) {\n    _.each( Array.prototype.slice.call( arguments, 1 ), function( source ) {\n      if ( source ) {\n        for ( var prop in source ) {\n          Object.defineProperty( obj, prop, Object.getOwnPropertyDescriptor( source, prop ) );\n        }\n      }\n    } );\n    return obj;\n  }\n\n  phetCore.register( 'extend', extend );\n\n  return extend;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Utility function for setting up prototypal inheritance.\n * Maintains supertype.prototype.constructor while properly copying ES5 getters and setters.\n * Supports adding functions to both the prototype itself and the constructor function.\n *\n * Usage:\n *\n * // Call the supertype constructor somewhere in the subtype's constructor.\n * function A() { scenery.Node.call( this ); };\n *\n * // Add prototype functions and/or 'static' functions\n * return inherit( scenery.Node, A, {\n *   customBehavior: function() { ... },\n *   isAnA: true\n * }, {\n *   someStaticFunction: function() { ...}\n * } );\n *\n * // client calls\n * new A().isAnA; // true\n * new scenery.Node().isAnA; // undefined\n * new A().constructor.name; // 'A'\n * A.someStaticFunction();\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\ndefine( 'PHET_CORE/inherit',['require','PHET_CORE/phetCore','PHET_CORE/extend'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n  var extend = require( 'PHET_CORE/extend' );\n\n  /**\n   * @param supertype           Constructor for the supertype.\n   * @param subtype             Constructor for the subtype. Generally should contain supertype.call( this, ... )\n   * @param prototypeProperties [optional] object containing properties that will be set on the prototype.\n   * @param staticProperties [optional] object containing properties that will be set on the constructor function itself\n   */\n  function inherit( supertype, subtype, prototypeProperties, staticProperties ) {\n    assert && assert( typeof supertype === 'function' );\n\n    function F() {}\n\n    F.prototype = supertype.prototype; // so new F().__proto__ === supertype.prototype\n\n    subtype.prototype = extend( // extend will combine the properties and constructor into the new F copy\n      new F(),                  // so new F().__proto__ === supertype.prototype, and the prototype chain is set up nicely\n      { constructor: subtype }, // overrides the constructor properly\n      prototypeProperties       // [optional] additional properties for the prototype, as an object.\n    );\n\n    //Copy the static properties onto the subtype constructor so they can be accessed 'statically'\n    extend( subtype, staticProperties );\n\n    return subtype; // pass back the subtype so it can be returned immediately as a module export\n  }\n\n  phetCore.register( 'inherit', inherit );\n\n  return inherit;\n} );\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Object pooling mix-in, for cases where creating new objects is expensive, and we'd rather mark some objects as able\n * to be reused (i.e. 'in the pool'). This provides a pool of objects for each type it is invoked on. It allows for\n * getting \"new\" objects that can either be constructed OR pulled in from a pool, and requires that the objects are\n * essentially able to \"re-run\" the constructor.\n *\n * This is usually done by having an initialize() method on the objects with the same call signature as the constructor,\n * and the constructor basically forwards to initialize(). Thus most \"construction\" logic is in the initialize() call.\n * Then when putting the object back in the pool, references should be released, so memory isn't leaked. The initialize()\n * function needs to support being called multiple times, and generally shouldn't create additional objects on calls\n * after the first.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/Poolable',['require','PHET_CORE/phetCore','PHET_CORE/extend'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n  var extend = require( 'PHET_CORE/extend' );\n\n  var Poolable = {\n    /**\n     * Adds the pool and some static methods to the type, and adds the instance method freeToPool() to the type's\n     * prototype.\n     * @public\n     *\n     * Options available:\n     * - maxPoolSize {number} - Maximum number of items that can be allowed in the pool\n     * - initialSize {number} - If non-zero, that many fresh items will be constructed if there is a defaultFactory\n     * - defaultFactory {function() => Type} - Factory function with no parameters that creates an instance of the type.\n     *     Allows Type.dirtyFromPool() and Type.fillPool()\n     * - constructorDuplicateFactory { function( pool ) => function( ... ) => Type}\n     *     Creates a factory function that takes the same parameters as the type's constructors. Allows\n     *     Type.createFromPool( ... )\n     *\n     * @param {function} type - The constructor for the type\n     * @param {Object} [options] -\n     */\n    mixin: function( type, options ) {\n      var proto = type.prototype;\n\n      // defaults\n      options = extend( {\n        maxPoolSize: 50, // since we don't want to blow too much memory\n        initialSize: 0\n      }, options );\n\n      var pool = type.pool = [];\n\n      /*\n       * For example: defaultFactory: function() { return new Vector2(); }\n       */\n      if ( options.defaultFactory ) {\n        // @public\n        type.dirtyFromPool = function() {\n          if ( pool.length ) {\n            // return an instance in an arbitrary (dirty) state\n            return pool.pop();\n          }\n          else {\n            // else return a new default instance\n            return options.defaultFactory();\n          }\n        };\n\n        // @public - fills the object pool up to n instances\n        type.fillPool = function( n ) {\n          // fill up the object pool to the initial size\n          while ( pool.length < n ) {\n            pool.push( options.defaultFactory() );\n          }\n        };\n\n        // fill the pool initially to the initial size\n        type.fillPool( options.initialSize );\n      }\n\n      /*\n       * For example: constructorDuplicateFactory:\n       *                function( pool ) {\n       *                  return function( x, y ) {\n       *                    if ( pool.length ) {\n       *                      return pool.pop().set( x, y );\n       *                    } else {\n       *                      return new Vector2( x, y );\n       *                    }\n       *                  }\n       *                }\n       * It allows arbitrary creation (from the constructor / etc) or mutation (from the pooled instance).\n       */\n      if ( options.constructorDuplicateFactory ) {\n        // @public\n        type.createFromPool = options.constructorDuplicateFactory( pool );\n      }\n\n      /*\n       * @public\n       * Frees the object to the pool (instance.freeToPool())\n       */\n      proto.freeToPool = function() {\n        if ( pool.length < options.maxPoolSize ) {\n          pool.push( this );\n        }\n      };\n    }\n  };\n  phetCore.register( 'Poolable', Poolable );\n\n  return Poolable;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Utility functions for Dot, placed into the dot.X namespace.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Util',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  // require( 'DOT/Vector2' ); // Require.js doesn't like the circular reference\n\n  // constants\n  var EPSILON = Number.MIN_VALUE;\n  var TWO_PI = 2 * Math.PI;\n\n  // \"static\" variables used in boxMullerTransform\n  var generate;\n  var z0;\n  var z1;\n\n  var Util = {\n    /**\n     * Returns the original value if it is inclusively within the [max,min] range. If it's below the range, min is\n     * returned, and if it's above the range, max is returned.\n     * @public\n     *\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    clamp: function( value, min, max ) {\n      if ( value < min ) {\n        return min;\n      }\n      else if ( value > max ) {\n        return max;\n      }\n      else {\n        return value;\n      }\n    },\n\n    /**\n     * Returns a number in the range $n\\in[\\mathrm{min},\\mathrm{max})$ with the same equivalence class as the input\n     * value mod (max-min), i.e. for a value $m$, $m\\equiv n\\ (\\mathrm{mod}\\ \\mathrm{max}-\\mathrm{min})$.\n     * @public\n     *\n     * The 'down' indicates that if the value is equal to min or max, the max is returned.\n     *\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    moduloBetweenDown: function( value, min, max ) {\n      assert && assert( max > min, 'max > min required for moduloBetween' );\n\n      var divisor = max - min;\n\n      // get a partial result of value-min between [0,divisor)\n      var partial = ( value - min ) % divisor;\n      if ( partial < 0 ) {\n        // since if value-min < 0, the remainder will give us a negative number\n        partial += divisor;\n      }\n\n      return partial + min; // add back in the minimum value\n    },\n\n    /**\n     * Returns a number in the range $n\\in(\\mathrm{min},\\mathrm{max}]$ with the same equivalence class as the input\n     * value mod (max-min), i.e. for a value $m$, $m\\equiv n\\ (\\mathrm{mod}\\ \\mathrm{max}-\\mathrm{min})$.\n     * @public\n     *\n     * The 'up' indicates that if the value is equal to min or max, the min is returned.\n     *\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    moduloBetweenUp: function( value, min, max ) {\n      return -Util.moduloBetweenDown( -value, -max, -min );\n    },\n\n    /**\n     * Returns an array of integers from A to B (inclusive), e.g. rangeInclusive( 4, 7 ) maps to [ 4, 5, 6, 7 ].\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @returns {Array.<number>}\n     */\n    rangeInclusive: function( a, b ) {\n      if ( b < a ) {\n        return [];\n      }\n      var result = new Array( b - a + 1 );\n      for ( var i = a; i <= b; i++ ) {\n        result[ i - a ] = i;\n      }\n      return result;\n    },\n\n    /**\n     * Returns an array of integers from A to B (exclusive), e.g. rangeExclusive( 4, 7 ) maps to [ 5, 6 ].\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @returns {Array.<number>}\n     */\n    rangeExclusive: function( a, b ) {\n      return Util.rangeInclusive( a + 1, b - 1 );\n    },\n\n    /**\n     * Converts degrees to radians.\n     * @public\n     *\n     * @param {number} degrees\n     * @returns {number}\n     */\n    toRadians: function( degrees ) {\n      return Math.PI * degrees / 180;\n    },\n\n    /**\n     * Converts radians to degrees.\n     * @public\n     *\n     * @param {number} radians\n     * @returns {number}\n     */\n    toDegrees: function( radians ) {\n      return 180 * radians / Math.PI;\n    },\n\n    /**\n     * Greatest Common Denominator, using https://en.wikipedia.org/wiki/Euclidean_algorithm\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     */\n    gcd: function( a, b ) {\n      return b === 0 ? a : this.gcd( b, a % b );\n    },\n\n    /**\n     * Intersection point between the lines defined by the line segments p1-2 and p3-p4. Currently does not handle\n     * parallel lines.\n     * @public\n     *\n     * @param {Vector2} p1\n     * @param {Vector2} p2\n     * @param {Vector2} p3\n     * @param {Vector2} p4\n     * @returns {Vector2}\n     */\n    lineLineIntersection: function( p1, p2, p3, p4 ) {\n      // Taken from an answer in http://stackoverflow.com/questions/385305/efficient-maths-algorithm-to-calculate-intersections\n      var x12 = p1.x - p2.x;\n      var x34 = p3.x - p4.x;\n      var y12 = p1.y - p2.y;\n      var y34 = p3.y - p4.y;\n\n      var denom = x12 * y34 - y12 * x34;\n\n      var a = p1.x * p2.y - p1.y * p2.x;\n      var b = p3.x * p4.y - p3.y * p4.x;\n\n      return new dot.Vector2(\n        ( a * x34 - x12 * b ) / denom,\n        ( a * y34 - y12 * b ) / denom\n      );\n    },\n\n    /**\n     * Ray-sphere intersection, returning information about the closest intersection. Assumes the sphere is centered\n     * at the origin (for ease of computation), transform the ray to compensate if needed.\n     * @public\n     *\n     * If there is no intersection, null is returned. Otherwise an object will be returned like:\n     * <pre class=\"brush: js\">\n     * {\n     *   distance: {number}, // distance from the ray position to the intersection\n     *   hitPoint: {Vector3}, // location of the intersection\n     *   normal: {Vector3}, // the normal of the sphere's surface at the intersection\n     *   fromOutside: {boolean}, // whether the ray intersected the sphere from outside the sphere first\n     * }\n     * </pre>\n     *\n     * @param {number} radius\n     * @param {Ray3} ray\n     * @param {number} epsilon\n     * @returns {Object}\n     */\n    // assumes a sphere with the specified radius, centered at the origin\n    sphereRayIntersection: function( radius, ray, epsilon ) {\n      epsilon = epsilon === undefined ? 1e-5 : epsilon;\n\n      // center is the origin for now, but leaving in computations so that we can change that in the future. optimize away if needed\n      var center = new dot.Vector3();\n\n      var rayDir = ray.direction;\n      var pos = ray.position;\n      var centerToRay = pos.minus( center );\n\n      // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)\n      var tmp = rayDir.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * ( centerToRayDistSq - radius * radius );\n      if ( det < epsilon ) {\n        // ray misses sphere entirely\n        return null;\n      }\n\n      var base = rayDir.dot( center ) - rayDir.dot( pos );\n      var sqt = Math.sqrt( det ) / 2;\n\n      // the \"first\" entry point distance into the sphere. if we are inside the sphere, it is behind us\n      var ta = base - sqt;\n\n      // the \"second\" entry point distance\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // sphere is behind ray, so don't return an intersection\n        return null;\n      }\n\n      var hitPositionB = ray.pointAtDistance( tb );\n      var normalB = hitPositionB.minus( center ).normalized();\n\n      if ( ta < epsilon ) {\n        // we are inside the sphere\n        // in => out\n        return {\n          distance: tb,\n          hitPoint: hitPositionB,\n          normal: normalB.negated(),\n          fromOutside: false\n        };\n      }\n      else {\n        // two possible hits\n        var hitPositionA = ray.pointAtDistance( ta );\n        var normalA = hitPositionA.minus( center ).normalized();\n\n        // close hit, we have out => in\n        return {\n          distance: ta,\n          hitPoint: hitPositionA,\n          normal: normalA,\n          fromOutside: true\n        };\n      }\n    },\n\n    /**\n     * Returns an array of the real roots of the quadratic equation $ax^2 + bx + c=0$ (there will be between 0 and 2 roots).\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @param {number} c\n     * @returns {Array.<number>}\n     */\n    solveQuadraticRootsReal: function( a, b, c ) {\n      var epsilon = 1E7;\n\n      //We need to test whether a is several orders of magnitude less than b or c. If so, return the result as a solution to the linear (easy) equation\n      if ( a === 0 || Math.abs( b / a ) > epsilon || Math.abs( c / a ) > epsilon ) {\n        return [ -c / b ];\n      }\n\n      var discriminant = b * b - 4 * a * c;\n      if ( discriminant < 0 ) {\n        return [];\n      }\n      var sqrt = Math.sqrt( discriminant );\n      // TODO: how to handle if discriminant is 0? give unique root or double it?\n      // TODO: probably just use Complex for the future\n      return [\n        ( -b - sqrt ) / ( 2 * a ),\n        ( -b + sqrt ) / ( 2 * a )\n      ];\n    },\n\n    /**\n     * Returns an array of the real roots of the quadratic equation $ax^3 + bx^2 + cx + d=0$ (there will be between 0 and 3 roots).\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @param {number} c\n     * @param {number} d\n     * @returns {Array.<number>}\n     */\n    solveCubicRootsReal: function( a, b, c, d ) {\n      // TODO: a Complex type!\n\n      //We need to test whether a is several orders of magnitude less than b, c, d\n      var epsilon = 1E7;\n\n      if ( a === 0 || Math.abs( b / a ) > epsilon || Math.abs( c / a ) > epsilon || Math.abs( d / a ) > epsilon ) {\n        return Util.solveQuadraticRootsReal( b, c, d );\n      }\n      if ( d === 0 || Math.abs( a / d ) > epsilon || Math.abs( b / d ) > epsilon || Math.abs( c / d ) > epsilon ) {\n        return Util.solveQuadraticRootsReal( a, b, c );\n      }\n\n      b /= a;\n      c /= a;\n      d /= a;\n\n      var q = ( 3.0 * c - ( b * b ) ) / 9;\n      var r = ( -(27 * d) + b * (9 * c - 2 * (b * b)) ) / 54;\n      var discriminant = q * q * q + r * r;\n      var b3 = b / 3;\n\n      if ( discriminant > 0 ) {\n        // a single real root\n        var dsqrt = Math.sqrt( discriminant );\n        return [ Util.cubeRoot( r + dsqrt ) + Util.cubeRoot( r - dsqrt ) - b3 ];\n      }\n\n      // three real roots\n      if ( discriminant === 0 ) {\n        // contains a double root\n        var rsqrt = Util.cubeRoot( r );\n        var doubleRoot = b3 - rsqrt;\n        return [ -b3 + 2 * rsqrt, doubleRoot, doubleRoot ];\n      }\n      else {\n        // all unique\n        var qX = -q * q * q;\n        qX = Math.acos( r / Math.sqrt( qX ) );\n        var rr = 2 * Math.sqrt( -q );\n        return [\n          -b3 + rr * Math.cos( qX / 3 ),\n          -b3 + rr * Math.cos( ( qX + 2 * Math.PI ) / 3 ),\n          -b3 + rr * Math.cos( ( qX + 4 * Math.PI ) / 3 )\n        ];\n      }\n    },\n\n    /**\n     * Returns the unique real cube root of x, such that $y^3=x$.\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    cubeRoot: function( x ) {\n      return x >= 0 ? Math.pow( x, 1 / 3 ) : -Math.pow( -x, 1 / 3 );\n    },\n\n    /**\n     * Defines and evaluates a linear mapping. The mapping is defined so that $f(a_1)=b_1$ and $f(a_2)=b_2$, and other\n     * values are interpolated along the linear equation. The returned value is $f(a_3)$.\n     * @public\n     *\n     * @param {number} a1\n     * @param {number} a2\n     * @param {number} b1\n     * @param {number} b2\n     * @param {number} a3\n     * @returns {number}\n     */\n    linear: function( a1, a2, b1, b2, a3 ) {\n      return ( b2 - b1 ) / ( a2 - a1 ) * ( a3 - a1 ) + b1;\n    },\n\n    /**\n     * Rounds using \"Round half away from zero\" algorithm. See dot#35.\n     * @public\n     *\n     * JavaScript's Math.round is not symmetric for positive and negative numbers, it uses IEEE 754 \"Round half up\".\n     * See https://en.wikipedia.org/wiki/Rounding#Round_half_up.\n     * For sims, we want to treat positive and negative values symmetrically, which is IEEE 754 \"Round half away from zero\",\n     * See https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero\n     *\n     * Note that -0 is rounded to 0, since we typically do not want to display -0 in sims.\n     *\n     * @param {number} value                               `\n     * @returns {number}\n     */\n    roundSymmetric: function( value ) {\n      return ( ( value < 0 ) ? -1 : 1 ) * Math.round( Math.abs( value ) );\n    },\n\n    /**\n     * A predictable implementation of toFixed.\n     * @public\n     *\n     * JavaScript's toFixed is notoriously buggy, behavior differs depending on browser,\n     * because the spec doesn't specify whether to round or floor.\n     * Rounding is symmetric for positive and negative values, see Util.roundSymmetric.\n     *\n     * @param {number} value\n     * @param {number} decimalPlaces\n     * @returns {string}\n     */\n    toFixed: function( value, decimalPlaces ) {\n      var multiplier = Math.pow( 10, decimalPlaces );\n      var newValue = Util.roundSymmetric( value * multiplier ) / multiplier;\n      return newValue.toFixed( decimalPlaces );\n    },\n\n    /**\n     * A predictable implementation of toFixed, where the result is returned as a number instead of a string.\n     * @public\n     *\n     * JavaScript's toFixed is notoriously buggy, behavior differs depending on browser,\n     * because the spec doesn't specify whether to round or floor.\n     * Rounding is symmetric for positive and negative values, see Util.roundSymmetric.\n     *\n     * @param {number} value\n     * @param {number} decimalPlaces\n     * @returns {number}\n     */\n    toFixedNumber: function( value, decimalPlaces ) {\n      return parseFloat( Util.toFixed( value, decimalPlaces ) );\n    },\n\n    /**\n     * Returns whether the input is a number that is an integer (no fractional part).\n     * @public\n     *\n     * @param {number} n\n     * @returns {boolean}\n     */\n    isInteger: function( n ) {\n      return ( typeof n === 'number' ) && ( n % 1 === 0 );\n    },\n\n    /**\n     * Computes the intersection of the two line segments $(x_1,y_1)(x_2,y_2)$ and $(x_3,y_3)(x_4,y_4)$. If there is no\n     * intersection, null is returned.\n     * @public\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x4\n     * @param {number} y4\n     * @returns {Vector2|null}\n     */\n    lineSegmentIntersection: function( x1, y1, x2, y2, x3, y3, x4, y4 ) {\n      /*\n       * Algorithm taken from Paul Bourke, 1989:\n       * http://paulbourke.net/geometry/pointlineplane/\n       * http://paulbourke.net/geometry/pointlineplane/pdb.c\n       * Ported from MathUtil.java on 9/20/2013 by @samreid\n       */\n      var numA = ( x4 - x3 ) * ( y1 - y3 ) - ( y4 - y3 ) * ( x1 - x3 );\n      var numB = ( x2 - x1 ) * ( y1 - y3 ) - ( y2 - y1 ) * ( x1 - x3 );\n      var denom = ( y4 - y3 ) * ( x2 - x1 ) - ( x4 - x3 ) * ( y2 - y1 );\n\n      // If denominator is 0, the lines are parallel or coincident\n      if ( denom === 0 ) {\n        return null;\n      }\n      else {\n        var ua = numA / denom;\n        var ub = numB / denom;\n\n        // ua and ub must both be in the range 0 to 1 for the segments to have an intersection pt.\n        if ( !( ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1 ) ) {\n          return null;\n        }\n        else {\n          var x = x1 + ua * ( x2 - x1 );\n          var y = y1 + ua * ( y2 - y1 );\n          return new dot.Vector2( x, y );\n        }\n      }\n    },\n\n    /**\n     * Squared distance from a point to a line segment squared.\n     * See http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n     * @public\n     *\n     * @param {Vector2} point - The point\n     * @param {Vector2} a - Starting point of the line segment\n     * @param {Vector2} b - Ending point of the line segment\n     * @returns {number}\n     */\n    distToSegmentSquared: function( point, a, b ) {\n      var segmentLength = a.distanceSquared( b );\n      if ( segmentLength === 0 ) { return point.distanceSquared( a ); }\n      var t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / segmentLength;\n      return t < 0 ? point.distanceSquared( a ) :\n             t > 1 ? point.distanceSquared( b ) :\n             point.distanceSquared( new dot.Vector2( a.x + t * (b.x - a.x), a.y + t * (b.y - a.y) ) );\n    },\n\n    /**\n     * Squared distance from a point to a line segment squared.\n     * @public\n     *\n     * @param {Vector2} point - The point\n     * @param {Vector2} a - Starting point of the line segment\n     * @param {Vector2} b - Ending point of the line segment\n     * @returns {number}\n     */\n    distToSegment: function( point, a, b ) { return Math.sqrt( this.distToSegmentSquared( point, a, b ) ); },\n\n    /**\n     * Determines whether the three points are approximately collinear.\n     * @public\n     *\n     * @param {Vector2} a\n     * @param {Vector2} b\n     * @param {Vector2} c\n     * @param {number} epsilon\n     * @returns {boolean}\n     */\n    arePointsCollinear: function( a, b, c, epsilon ) {\n      if ( epsilon === undefined ) {\n        epsilon = 0;\n      }\n      return Util.triangleArea( a, b, c ) <= epsilon;\n    },\n\n    /**\n     * The area inside the triangle defined by the three vertices.\n     * @public\n     *\n     * @param {Vector2} a\n     * @param {Vector2} b\n     * @param {Vector2} c\n     * @returns {number}\n     */\n    triangleArea: function( a, b, c ) {\n      return Math.abs( Util.triangleAreaSigned( a, b, c ) );\n    },\n\n    /**\n     * The area inside the triangle defined by the three vertices, but with the sign determined by whether the vertices\n     * provided are clockwise or counter-clockwise.\n     * @public\n     *\n     * @param {Vector2} a\n     * @param {Vector2} b\n     * @param {Vector2} c\n     * @returns {number}\n     */\n    triangleAreaSigned: function( a, b, c ) {\n      // TODO: investigate which way we want the sign (Canvas or WebGL style)\n      return a.x * ( b.y - c.y ) + b.x * ( c.y - a.y ) + c.x * ( a.y - b.y );\n    },\n\n    /**\n     * Log base-10, since it wasn't included in every supported browser.\n     * @public\n     *\n     * @param {number} val\n     * @returns {number}\n     */\n    log10: function( val ) {\n      return Math.log( val ) / Math.LN10;\n    },\n\n    /**\n     * Generates a random Gaussian sample with the given mean and standard deviation.\n     * This method relies on the \"static\" variables generate, z0, and z1 defined above.\n     * Random.js is the primary client of this function, but it is defined here so it can be\n     * used other places more easily if need be.\n     * Code inspired by example here: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform.\n     * @public\n     *\n     * @param {number} mu - The mean of the Gaussian\n     * @param {number} sigma - The standard deviation of the Gaussian\n     * @returns {number}\n     */\n    boxMullerTransform: function( mu, sigma ) {\n      generate = !generate;\n\n      if ( !generate ) {\n        return z1 * sigma + mu;\n      }\n\n      var u1;\n      var u2;\n      do {\n        u1 = Math.random();\n        u2 = Math.random();\n      }\n      while ( u1 <= EPSILON );\n\n      z0 = Math.sqrt( -2.0 * Math.log( u1 ) ) * Math.cos( TWO_PI * u2 );\n      z1 = Math.sqrt( -2.0 * Math.log( u1 ) ) * Math.sin( TWO_PI * u2 );\n      return z0 * sigma + mu;\n    }\n  };\n  dot.register( 'Util', Util );\n\n  // make these available in the main namespace directly (for now)\n  dot.clamp = Util.clamp;\n  dot.moduloBetweenDown = Util.moduloBetweenDown;\n  dot.moduloBetweenUp = Util.moduloBetweenUp;\n  dot.rangeInclusive = Util.rangeInclusive;\n  dot.rangeExclusive = Util.rangeExclusive;\n  dot.toRadians = Util.toRadians;\n  dot.toDegrees = Util.toDegrees;\n  dot.lineLineIntersection = Util.lineLineIntersection;\n  dot.sphereRayIntersection = Util.sphereRayIntersection;\n  dot.solveQuadraticRootsReal = Util.solveQuadraticRootsReal;\n  dot.solveCubicRootsReal = Util.solveCubicRootsReal;\n  dot.cubeRoot = Util.cubeRoot;\n  dot.linear = Util.linear;\n  dot.boxMullerTransform = Util.boxMullerTransform;\n\n  return Util;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic 2-dimensional vector, represented as (x,y).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Vector2',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n  require( 'DOT/Util' );\n  // require( 'DOT/Vector3' ); // commented out since Require.js complains about the circular dependency\n\n  /**\n   * Creates a 2-dimensional vector with the specified X and Y values.\n   * @constructor\n   * @public\n   *\n   * @param {number} [x] - X coordinate, defaults to 0 if not provided\n   * @param {number} [y] - Y coordinate, defaults to 0 if not provided\n   */\n  function Vector2( x, y ) {\n    // @public {number} - The X coordinate of the vector.\n    this.x = x !== undefined ? x : 0;\n\n    // @public {number} - The Y coordinate of the vector.\n    this.y = y !== undefined ? y : 0;\n\n    assert && assert( typeof this.x === 'number', 'x needs to be a number' );\n    assert && assert( typeof this.y === 'number', 'y needs to be a number' );\n\n    phetAllocation && phetAllocation( 'Vector2' );\n  }\n\n  dot.register( 'Vector2', Vector2 );\n\n  inherit( Object, Vector2, {\n    // @public (read-only) - Helps to identify the dimension of the vector\n    isVector2: true,\n    dimension: 2,\n\n    /**\n     * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\\sqrt{x^2+y^2}$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    /**\n     * The squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitudeSquared: function() {\n      return this.x * this.x + this.y * this.y;\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    distance: function( point ) {\n      return Math.sqrt( this.distanceSquared( point ) );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point (x,y).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    distanceXY: function( x, y ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return Math.sqrt( dx * dx + dy * dy );\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    distanceSquared: function( point ) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return dx * dx + dy * dy;\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point (x,y).\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    distanceSquaredXY: function( x, y ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return dx * dx + dy * dy;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector v.\n     * @public\n     *\n     * @param {Vector2} v\n     * @returns {number}\n     */\n    dot: function( v ) {\n      return this.x * v.x + this.y * v.y;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector (x,y).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    dotXY: function( x, y ) {\n      return this.x * x + this.y * y;\n    },\n\n    /**\n     * The angle $\\theta$ of this vector, such that this vector is equal to\n     * $$ u = \\begin{bmatrix} r\\cos\\theta \\\\ r\\sin\\theta \\end{bmatrix} $$\n     * for the magnitude $r \\ge 0$ of the vector, with $\\theta\\in(-\\pi,\\pi]$\n     * @public\n     *\n     * @returns {number}\n     */\n    angle: function() {\n      return Math.atan2( this.y, this.x );\n    },\n\n    /**\n     * The angle between this vector and another vector, in the range $\\theta\\in[0, \\pi]$.\n     * @public\n     *\n     * Equal to $\\theta = \\cos^{-1}( \\hat{u} \\cdot \\hat{v} )$ where $\\hat{u}$ is this vector (normalized) and $\\hat{v}$\n     * is the input vector (normalized).\n     *\n     * @param {Vector2} v\n     * @returns {number}\n     */\n    angleBetween: function( v ) {\n      var thisMagnitude = this.magnitude();\n      var vMagnitude = v.magnitude();\n      return Math.acos( dot.clamp( ( this.x * v.x + this.y * v.y ) / ( thisMagnitude * vMagnitude ), -1, 1 ) );\n    },\n\n    /**\n     * Exact equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector2} other\n     * @returns {boolean} - Whether the two vectors have equal components\n     */\n    equals: function( other ) {\n      return this.x === other.x && this.y === other.y;\n    },\n\n    /**\n     * Approximate equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector2} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two vectors has no component with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      if ( !epsilon ) {\n        epsilon = 0;\n      }\n      return Math.max( Math.abs( this.x - other.x ), Math.abs( this.y - other.y ) ) <= epsilon;\n    },\n\n    /**\n     * Whether all of the components are numbers (not NaN) that are not infinity or -infinity.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.x ) && isFinite( this.y );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and\n     * will not modify this vector.\n     *\n     * @param {Vector2} [vector] - If not provided, creates a new Vector2 with filled in values. Otherwise, fills in the\n     *                             values of the provided vector so that it equals this vector.\n     * @returns {Vector2}\n     */\n    copy: function( vector ) {\n      if ( vector ) {\n        return vector.set( this );\n      }\n      else {\n        return new Vector2( this.x, this.y );\n      }\n    },\n\n    /**\n     * The scalar value of the z-component of the equivalent 3-dimensional cross product:\n     * $$ f( u, v ) = \\left( \\begin{bmatrix} u_x \\\\ u_y \\\\ 0 \\end{bmatrix} \\times \\begin{bmatrix} v_x \\\\ v_y \\\\ 0 \\end{bmatrix} \\right)_z = u_x v_y - u_y v_x $$\n     * @public\n     *\n     * @param {Vector2} v\n     * @returns {number}\n     */\n    crossScalar: function( v ) {\n      return this.x * v.y - this.y * v.x;\n    },\n\n    /**\n     * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an\n     * error is thrown.\n     * @public\n     *\n     * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this\n     * vector.\n     *\n     * @returns {Vector2}\n     */\n    normalized: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return new Vector2( this.x / mag, this.y / mag );\n      }\n    },\n\n    /**\n     * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error\n     * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.\n     * @public\n     *\n     * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} magnitude\n     * @returns {Vector2}\n     */\n    withMagnitude: function( magnitude ) {\n      return this.copy().setMagnitude( magnitude );\n    },\n\n    /**\n     * Copy of this vector, scaled by the desired scalar value.\n     * @public\n     *\n     * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    timesScalar: function( scalar ) {\n      return new Vector2( this.x * scalar, this.y * scalar );\n    },\n\n    /**\n     * Same as timesScalar.\n     * @public\n     *\n     * This is the immutable form of the function multiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    times: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.timesScalar( scalar );\n    },\n\n    /**\n     * Copy of this vector, multiplied component-wise by the passed-in vector v.\n     * @public\n     *\n     * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    componentTimes: function( v ) {\n      return new Vector2( this.x * v.x, this.y * v.y );\n    },\n\n    /**\n     * Addition of this vector and another vector, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function add(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    plus: function( v ) {\n      return new Vector2( this.x + v.x, this.y + v.y );\n    },\n\n    /**\n     * Addition of this vector and another vector (x,y), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addXY(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    plusXY: function( x, y ) {\n      return new Vector2( this.x + x, this.y + y );\n    },\n\n    /**\n     * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    plusScalar: function( scalar ) {\n      return new Vector2( this.x + scalar, this.y + scalar );\n    },\n\n    /**\n     * Subtraction of this vector by another vector v, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtract(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    minus: function( v ) {\n      return new Vector2( this.x - v.x, this.y - v.y );\n    },\n\n    /**\n     * Subtraction of this vector by another vector (x,y), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractXY(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    minusXY: function( x, y ) {\n      return new Vector2( this.x - x, this.y - y );\n    },\n\n    /**\n     * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    minusScalar: function( scalar ) {\n      return new Vector2( this.x - scalar, this.y - scalar );\n    },\n\n    /**\n     * Division of this vector by a scalar (divides every component by the scalar), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    dividedScalar: function( scalar ) {\n      return new Vector2( this.x / scalar, this.y / scalar );\n    },\n\n    /**\n     * Negated copy of this vector (multiplies every component by -1).\n     * @public\n     *\n     * This is the immutable form of the function negate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @returns {Vector2}\n     */\n    negated: function() {\n      return new Vector2( -this.x, -this.y );\n    },\n\n    /**\n     * Rotated by -pi/2 (perpendicular to this vector), returned as a copy.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    perpendicular: function() {\n      return new Vector2( this.y, -this.x );\n    },\n\n    /**\n     * Rotated by an arbitrary angle, in radians. Returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function rotate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} angle - In radians\n     * @returns {Vector2}\n     */\n    rotated: function( angle ) {\n      var newAngle = this.angle() + angle;\n      var mag = this.magnitude();\n      return new Vector2( mag * Math.cos( newAngle ), mag * Math.sin( newAngle ) );\n    },\n\n    /**\n     * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).\n     * @public\n     *\n     * @param {Vector2} vector\n     * @param {number} ratio - Not necessarily constrained in [0, 1]\n     * @returns {Vector2}\n     */\n    blend: function( vector, ratio ) {\n      return new Vector2( this.x + (vector.x - this.x) * ratio, this.y + (vector.y - this.y) * ratio );\n    },\n\n    /**\n     * The average (midpoint) between this vector and another vector.\n     * @public\n     *\n     * @param {Vector2} vector\n     * @returns {Vector2}\n     */\n    average: function( vector ) {\n      return this.blend( vector, 0.5 );\n    },\n\n    /**\n     * Debugging string for the vector.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Vector2(' + this.x + ', ' + this.y + ')';\n    },\n\n    /**\n     * Converts this to a 3-dimensional vector, with the z-component equal to 0.\n     * @public\n     *\n     * @returns {Vector3}\n     */\n    toVector3: function() {\n      return new dot.Vector3( this.x, this.y, 0 );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutables\n     * - all mutation should go through setXY / setX / setY\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets all of the components of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    setXY: function( x, y ) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets the x-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @returns {Vector2}\n     */\n    setX: function( x ) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets the y-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    setY: function( y ) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets this vector to be a copy of another vector.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning\n     * this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    set: function( v ) {\n      return this.setXY( v.x, v.y );\n    },\n\n    /**\n     * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its\n     * magnitude to abs( magnitude ).\n     * @public\n     *\n     * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} magnitude\n     * @returns {Vector2}\n     */\n    setMagnitude: function( magnitude ) {\n      var scale = magnitude / this.magnitude();\n      return this.multiplyScalar( scale );\n    },\n\n    /**\n     * Adds another vector to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    add: function( v ) {\n      return this.setXY( this.x + v.x, this.y + v.y );\n    },\n\n    /**\n     * Adds another vector (x,y) to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusXY(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    addXY: function( x, y ) {\n      return this.setXY( this.x + x, this.y + y );\n    },\n\n    /**\n     * Adds a scalar to this vector (added to every component), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    addScalar: function( scalar ) {\n      return this.setXY( this.x + scalar, this.y + scalar );\n    },\n\n    /**\n     * Subtracts this vector by another vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    subtract: function( v ) {\n      return this.setXY( this.x - v.x, this.y - v.y );\n    },\n\n    /**\n     * Subtracts this vector by another vector (x,y), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusXY(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    subtractXY: function( x, y ) {\n      return this.setXY( this.x - x, this.y - y );\n    },\n\n    /**\n     * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    subtractScalar: function( scalar ) {\n      return this.setXY( this.x - scalar, this.y - scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    multiplyScalar: function( scalar ) {\n      return this.setXY( this.x * scalar, this.y * scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * Same as multiplyScalar.\n     * @public\n     *\n     * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    multiply: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.multiplyScalar( scalar );\n    },\n\n    /**\n     * Multiplies this vector by another vector component-wise, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    componentMultiply: function( v ) {\n      return this.setXY( this.x * v.x, this.y * v.y );\n    },\n\n    /**\n     * Divides this vector by a scalar (divides each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    divideScalar: function( scalar ) {\n      return this.setXY( this.x / scalar, this.y / scalar );\n    },\n\n    /**\n     * Negates this vector (multiplies each component by -1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector2}\n     */\n    negate: function() {\n      return this.setXY( -this.x, -this.y );\n    },\n\n    /**\n     * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector2}\n     */\n    normalize: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return this.divideScalar( mag );\n      }\n    },\n\n    /**\n     * Rotates this vector by the angle (in radians), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function rotated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} angle - In radians\n     * @returns {Vector2}\n     */\n    rotate: function( angle ) {\n      var newAngle = this.angle() + angle;\n      var mag = this.magnitude();\n      return this.setXY( mag * Math.cos( newAngle ), mag * Math.sin( newAngle ) );\n    },\n\n    /**\n     * Sets this vector's value to be the x,y values matching the given magnitude and angle (in radians), changing\n     * this vector, and returning itself.\n     * @public\n     *\n     * @param {number} magnitude\n     * @param {number} angle - In radians\n     * @returns {Vector2}\n     */\n    setPolar: function( magnitude, angle ) {\n      return this.setXY( magnitude * Math.cos( angle ), magnitude * Math.sin( angle ) );\n    },\n\n    /**\n     * Returns a duck-typed object meant for use with tandem/phet-io serialization.\n     *\n     * @returns {Object}\n     */\n    toStateObject: function() {\n      return { x: this.x, y: this.y };\n    }\n  }, { // static functions on Vector2 itself\n    /**\n     * Returns a Vector2 with the specified magnitude $r$ and angle $\\theta$ (in radians), with the formula:\n     * $$ f( r, \\theta ) = \\begin{bmatrix} r\\cos\\theta \\\\ r\\sin\\theta \\end{bmatrix} $$\n     * @public\n     *\n     * @param {number} magnitude\n     * @param {number} angle\n     * @returns {Vector2}\n     */\n    createPolar: function( magnitude, angle ) {\n      return new Vector2().setPolar( magnitude, angle );\n    },\n\n    /**\n     * Constructs a Vector2 from a duck-typed { x: {number}, y: {number} } object, meant for use with\n     * tandem/phet-io deserialization.\n     * @public\n     *\n     * @param {Object} stateObject - Like { x: {number}, y: {number} }\n     * @returns {Vector2}\n     */\n    fromStateObject: function( stateObject ) {\n      return new Vector2( stateObject.x, stateObject.y );\n    }\n  } );\n\n  // Sets up pooling on Vector2\n  Poolable.mixin( Vector2, {\n    defaultFactory: function() { return new Vector2(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y ) {\n        if ( pool.length ) {\n          return pool.pop().setXY( x, y );\n        }\n        else {\n          return new Vector2( x, y );\n        }\n      };\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Immutable Vector form\n   *---------------------------------------------------------------------------*/\n\n  // @private\n  Vector2.Immutable = function ImmutableVector2( x, y ) {\n    Vector2.call( this, x, y );\n  };\n  var Immutable = Vector2.Immutable;\n\n  inherit( Vector2, Immutable );\n\n  // throw errors whenever a mutable method is called on our immutable vector\n  Immutable.mutableOverrideHelper = function( mutableFunctionName ) {\n    Immutable.prototype[ mutableFunctionName ] = function() {\n      throw new Error( 'Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector2' );\n    };\n  };\n\n  // TODO: better way to handle this list?\n  Immutable.mutableOverrideHelper( 'setXY' );\n  Immutable.mutableOverrideHelper( 'setX' );\n  Immutable.mutableOverrideHelper( 'setY' );\n\n  /**\n   * Immutable zero vector: $\\begin{bmatrix} 0\\\\0 \\end{bmatrix}$\n   * @public\n   *\n   * @constant {Vector2} ZERO\n   */\n  Vector2.ZERO = assert ? new Immutable( 0, 0 ) : new Vector2( 0, 0 );\n\n  /**\n   * Immutable vector: $\\begin{bmatrix} 1\\\\0 \\end{bmatrix}$\n   * @public\n   *\n   * @constant {Vector2} X_UNIT\n   */\n  Vector2.X_UNIT = assert ? new Immutable( 1, 0 ) : new Vector2( 1, 0 );\n\n  /**\n   * Immutable vector: $\\begin{bmatrix} 0\\\\1 \\end{bmatrix}$\n   * @public\n   *\n   * @constant {Vector2} Y_UNIT\n   */\n  Vector2.Y_UNIT = assert ? new Immutable( 0, 1 ) : new Vector2( 0, 1 );\n\n  return Vector2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A 2D rectangle-shaped bounded area (bounding box).\n *\n * There are a number of convenience functions to get locations and points on the Bounds. Currently we do not\n * store these with the Bounds2 instance, since we want to lower the memory footprint.\n *\n * minX, minY, maxX, and maxY are actually stored. We don't do x,y,width,height because this can't properly express\n * semi-infinite bounds (like a half-plane), or easily handle what Bounds2.NOTHING and Bounds2.EVERYTHING do with\n * the constructive solid areas.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Bounds2',['require','DOT/dot','DOT/Vector2','PHET_CORE/inherit','PHET_CORE/Poolable'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Vector2 = require( 'DOT/Vector2' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  // Temporary instances to be used in the transform method.\n  var scratchVector2 = new dot.Vector2();\n\n  /**\n   * Creates a 2-dimensional bounds (bounding box).\n   * @constructor\n   * @public\n   *\n   * @param {number} minX - The intial minimum X coordinate of the bounds.\n   * @param {number} minY - The intial minimum Y coordinate of the bounds.\n   * @param {number} maxX - The intial maximum X coordinate of the bounds.\n   * @param {number} maxY - The intial maximum Y coordinate of the bounds.\n   */\n  function Bounds2( minX, minY, maxX, maxY ) {\n    assert && assert( maxY !== undefined, 'Bounds2 requires 4 parameters' );\n\n    // @public {number} - The minimum X coordinate of the bounds.\n    this.minX = minX;\n\n    // @public {number} - The minimum Y coordinate of the bounds.\n    this.minY = minY;\n\n    // @public {number} - The maximum X coordinate of the bounds.\n    this.maxX = maxX;\n\n    // @public {number} - The maximum Y coordinate of the bounds.\n    this.maxY = maxY;\n\n    phetAllocation && phetAllocation( 'Bounds2' );\n  }\n\n  dot.register( 'Bounds2', Bounds2 );\n\n  inherit( Object, Bounds2, {\n    // @public (read-only) - Helps to identify the dimension of the bounds\n    isBounds: true,\n    dimension: 2,\n\n    /*---------------------------------------------------------------------------*\n     * Properties\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * The width of the bounds, defined as maxX - minX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getWidth: function() { return this.maxX - this.minX; },\n    get width() { return this.getWidth(); },\n\n    /**\n     * The height of the bounds, defined as maxY - minY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getHeight: function() { return this.maxY - this.minY; },\n    get height() { return this.getHeight(); },\n\n    /*\n     * Convenience locations\n     * upper is in terms of the visual layout in Scenery and other programs, so the minY is the \"upper\", and minY is the \"lower\"\n     *\n     *             minX (x)     centerX        maxX\n     *          ---------------------------------------\n     * minY (y) | leftTop     centerTop     rightTop\n     * centerY  | leftCenter  center        rightCenter\n     * maxY     | leftBottom  centerBottom  rightBottom\n     */\n\n    /**\n     * Alias for minX, when thinking of the bounds as an (x,y,width,height) rectangle.\n     * @public\n     *\n     * @returns {number}\n     */\n    getX: function() { return this.minX; },\n    get x() { return this.getX(); },\n\n    /**\n     * Alias for minY, when thinking of the bounds as an (x,y,width,height) rectangle.\n     * @public\n     *\n     * @returns {number}\n     */\n    getY: function() { return this.minY; },\n    get y() { return this.getY(); },\n\n    /**\n     * Alias for minX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinX: function() { return this.minX; },\n\n    /**\n     * Alias for minY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinY: function() { return this.minY; },\n\n    /**\n     * Alias for maxX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxX: function() { return this.maxX; },\n\n    /**\n     * Alias for maxY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxY: function() { return this.maxY; },\n\n    /**\n     * Alias for minX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getLeft: function() { return this.minX; },\n    get left() { return this.minX; },\n\n    /**\n     * Alias for minY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getTop: function() { return this.minY; },\n    get top() { return this.minY; },\n\n    /**\n     * Alias for maxX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getRight: function() { return this.maxX; },\n    get right() { return this.maxX; },\n\n    /**\n     * Alias for maxY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getBottom: function() { return this.maxY; },\n    get bottom() { return this.maxY; },\n\n    /**\n     * The horizontal (X-coordinate) center of the bounds, averaging the minX and maxX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterX: function() { return ( this.maxX + this.minX ) / 2; },\n    get centerX() { return this.getCenterX(); },\n\n    /**\n     * The vertical (Y-coordinate) center of the bounds, averaging the minY and maxY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterY: function() { return ( this.maxY + this.minY ) / 2; },\n    get centerY() { return this.getCenterY(); },\n\n    /**\n     * The point (minX, minY), in the UI-coordinate upper-left.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getLeftTop: function() { return new dot.Vector2( this.minX, this.minY ); },\n    get leftTop() { return this.getLeftTop(); },\n\n    /**\n     * The point (centerX, minY), in the UI-coordinate upper-center.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getCenterTop: function() { return new dot.Vector2( this.getCenterX(), this.minY ); },\n    get centerTop() { return this.getCenterTop(); },\n\n    /**\n     * The point (right, minY), in the UI-coordinate upper-right.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getRightTop: function() { return new dot.Vector2( this.maxX, this.minY ); },\n    get rightTop() { return this.getRightTop(); },\n\n    /**\n     * The point (left, centerY), in the UI-coordinate center-left.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getLeftCenter: function() { return new dot.Vector2( this.minX, this.getCenterY() ); },\n    get leftCenter() { return this.getLeftCenter(); },\n\n    /**\n     * The point (centerX, centerY), in the center of the bounds.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getCenter: function() { return new dot.Vector2( this.getCenterX(), this.getCenterY() ); },\n    get center() { return this.getCenter(); },\n\n    /**\n     * The point (maxX, centerY), in the UI-coordinate center-right\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getRightCenter: function() { return new dot.Vector2( this.maxX, this.getCenterY() ); },\n    get rightCenter() { return this.getRightCenter(); },\n\n    /**\n     * The point (minX, maxY), in the UI-coordinate lower-left\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getLeftBottom: function() { return new dot.Vector2( this.minX, this.maxY ); },\n    get leftBottom() { return this.getLeftBottom(); },\n\n    /**\n     * The point (centerX, maxY), in the UI-coordinate lower-center\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getCenterBottom: function() { return new dot.Vector2( this.getCenterX(), this.maxY ); },\n    get centerBottom() { return this.getCenterBottom(); },\n\n    /**\n     * The point (maxX, maxY), in the UI-coordinate lower-right\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getRightBottom: function() { return new dot.Vector2( this.maxX, this.maxY ); },\n    get rightBottom() { return this.getRightBottom(); },\n\n    /**\n     * Whether we have negative width or height. Bounds2.NOTHING is a prime example of an empty Bounds2.\n     * Bounds with width = height = 0 are considered not empty, since they include the single (0,0) point.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isEmpty: function() { return this.getWidth() < 0 || this.getHeight() < 0; },\n\n    /**\n     * Whether our minimums and maximums are all finite numbers. This will exclude Bounds2.NOTHING and Bounds2.EVERYTHING.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.minX ) && isFinite( this.minY ) && isFinite( this.maxX ) && isFinite( this.maxY );\n    },\n\n    /**\n     * Whether this bounds has a non-zero area (non-zero positive width and height).\n     * @public\n     *\n     * @returns {boolean}\n     */\n    hasNonzeroArea: function() {\n      return this.getWidth() > 0 && this.getHeight() > 0;\n    },\n\n    /**\n     * Whether this bounds has a finite and non-negative width and height.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isValid: function() {\n      return !this.isEmpty() && this.isFinite();\n    },\n\n    /**\n     * If the location is inside the bounds, the location will be returned. Otherwise, this will return a new location\n     * on the edge of the bounds that is the closest to the provided location.\n     * @public\n     *\n     * @param {Vector2} location\n     * @returns {Vector2}\n     */\n    closestPointTo: function( location ) {\n      if ( this.containsCoordinates( location.x, location.y ) ) {\n        return location;\n      }\n      else {\n        var xConstrained = Math.max( Math.min( location.x, this.maxX ), this.x );\n        var yConstrained = Math.max( Math.min( location.y, this.maxY ), this.y );\n        return new Vector2( xConstrained, yConstrained );\n      }\n    },\n\n    /**\n     * Whether the coordinates are contained inside the bounding box, or are on the boundary.\n     * @public\n     *\n     * @param {number} x - X coordinate of the point to check\n     * @param {number} y - Y coordinate of the point to check\n     * @returns {boolean}\n     */\n    containsCoordinates: function( x, y ) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    },\n\n    /**\n     * Whether the point is contained inside the bounding box, or is on the boundary.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {boolean}\n     */\n    containsPoint: function( point ) {\n      return this.containsCoordinates( point.x, point.y );\n    },\n\n    /**\n     * Whether this bounding box completely contains the bounding box passed as a parameter. The boundary of a box is\n     * considered to be \"contained\".\n     * @public\n     *\n     * @param {Bounds2} bounds\n     * @returns {boolean}\n     */\n    containsBounds: function( bounds ) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY;\n    },\n\n    /**\n     * Whether this and another bounding box have any points of intersection (including touching boundaries).\n     * @public\n     *\n     * @param {Bounds2} bounds\n     * @returns {boolean}\n     */\n    intersectsBounds: function( bounds ) {\n      var minX = Math.max( this.minX, bounds.minX );\n      var minY = Math.max( this.minY, bounds.minY );\n      var maxX = Math.min( this.maxX, bounds.maxX );\n      var maxY = Math.min( this.maxY, bounds.maxY );\n      return ( maxX - minX ) >= 0 && ( maxY - minY >= 0 );\n    },\n\n    /**\n     * The squared distance from the input point to the point closest to it inside the bounding box.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    minimumDistanceToPointSquared: function( point ) {\n      var closeX = point.x < this.minX ? this.minX : ( point.x > this.maxX ? this.maxX : null );\n      var closeY = point.y < this.minY ? this.minY : ( point.y > this.maxY ? this.maxY : null );\n      var d;\n      if ( closeX === null && closeY === null ) {\n        // inside, or on the boundary\n        return 0;\n      }\n      else if ( closeX === null ) {\n        // vertically directly above/below\n        d = closeY - point.y;\n        return d * d;\n      }\n      else if ( closeY === null ) {\n        // horizontally directly to the left/right\n        d = closeX - point.x;\n        return d * d;\n      }\n      else {\n        // corner case\n        var dx = closeX - point.x;\n        var dy = closeY - point.y;\n        return dx * dx + dy * dy;\n      }\n    },\n\n    /**\n     * The squared distance from the input point to the point furthest from it inside the bounding box.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    maximumDistanceToPointSquared: function( point ) {\n      var x = point.x > this.getCenterX() ? this.minX : this.maxX;\n      var y = point.y > this.getCenterY() ? this.minY : this.maxY;\n      x -= point.x;\n      y -= point.y;\n      return x * x + y * y;\n    },\n\n    /**\n     * Debugging string for the bounds.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + ')]';\n    },\n\n    /**\n     * Exact equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds2} other\n     * @returns {boolean} - Whether the two bounds are equal\n     */\n    equals: function( other ) {\n      return this.minX === other.minX && this.minY === other.minY && this.maxX === other.maxX && this.maxY === other.maxY;\n    },\n\n    /**\n     * Approximate equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds2} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two bounds has no min/max with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      epsilon = epsilon !== undefined ? epsilon : 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if ( thisFinite && otherFinite ) {\n        // both are finite, so we can use Math.abs() - it would fail with non-finite values like Infinity\n        return Math.abs( this.minX - other.minX ) < epsilon &&\n               Math.abs( this.minY - other.minY ) < epsilon &&\n               Math.abs( this.maxX - other.maxX ) < epsilon &&\n               Math.abs( this.maxY - other.maxY ) < epsilon;\n      }\n      else if ( thisFinite !== otherFinite ) {\n        return false; // one is finite, the other is not. definitely not equal\n      }\n      else if ( this === other ) {\n        return true; // exact same instance, must be equal\n      }\n      else {\n        // epsilon only applies on finite dimensions. due to JS's handling of isFinite(), it's faster to check the sum of both\n        return ( isFinite( this.minX + other.minX ) ? ( Math.abs( this.minX - other.minX ) < epsilon ) : ( this.minX === other.minX ) ) &&\n               ( isFinite( this.minY + other.minY ) ? ( Math.abs( this.minY - other.minY ) < epsilon ) : ( this.minY === other.minY ) ) &&\n               ( isFinite( this.maxX + other.maxX ) ? ( Math.abs( this.maxX - other.maxX ) < epsilon ) : ( this.maxX === other.maxX ) ) &&\n               ( isFinite( this.maxY + other.maxY ) ? ( Math.abs( this.maxY - other.maxY ) < epsilon ) : ( this.maxY === other.maxY ) );\n      }\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this bounds, or if a bounds is passed in, set that bounds's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a bounds is provided. This will return a new bounds, and\n     * will not modify this bounds.\n     *\n     * @param {Bounds2} [bounds] - If not provided, creates a new Bounds2 with filled in values. Otherwise, fills in the\n     *                             values of the provided bounds so that it equals this bounds.\n     * @returns {Bounds2}\n     */\n    copy: function( bounds ) {\n      if ( bounds ) {\n        return bounds.set( this );\n      }\n      else {\n        return new Bounds2( this.minX, this.minY, this.maxX, this.maxY );\n      }\n    },\n\n    /**\n     * The smallest bounds that contains both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function includeBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    union: function( bounds ) {\n      return new Bounds2(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY )\n      );\n    },\n\n    /**\n     * The smallest bounds that is contained by both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function constrainBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    intersection: function( bounds ) {\n      return new Bounds2(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY )\n      );\n    },\n    // TODO: difference should be well-defined, but more logic is needed to compute\n\n    /**\n     * The smallest bounds that contains this bounds and the point (x,y), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addCoordinates(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    withCoordinates: function( x, y ) {\n      return new Bounds2(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y )\n      );\n    },\n\n    /**\n     * The smallest bounds that contains this bounds and the input point, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addPoint(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Vector2} point\n     * @returns {Bounds2}\n     */\n    withPoint: function( point ) {\n      return this.withCoordinates( point.x, point.y );\n    },\n\n    /**\n     * A copy of this bounds, with minX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minX\n     * @returns {Bounds2}\n     */\n    withMinX: function( minX ) {\n      return new Bounds2( minX, this.minY, this.maxX, this.maxY );\n    },\n\n    /**\n     * A copy of this bounds, with minY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minY\n     * @returns {Bounds2}\n     */\n    withMinY: function( minY ) {\n      return new Bounds2( this.minX, minY, this.maxX, this.maxY );\n    },\n\n    /**\n     * A copy of this bounds, with maxX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxX\n     * @returns {Bounds2}\n     */\n    withMaxX: function( maxX ) {\n      return new Bounds2( this.minX, this.minY, maxX, this.maxY );\n    },\n\n    /**\n     * A copy of this bounds, with maxY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxY\n     * @returns {Bounds2}\n     */\n    withMaxY: function( maxY ) {\n      return new Bounds2( this.minX, this.minY, this.maxX, maxY );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded down to the nearest integer, and the maximum values\n     * rounded up to the nearest integer. This causes the bounds to expand as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundOut(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds2}\n     */\n    roundedOut: function() {\n      return new Bounds2(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY )\n      );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded up to the nearest integer, and the maximum values\n     * rounded down to the nearest integer. This causes the bounds to contract as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundIn(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds2}\n     */\n    roundedIn: function() {\n      return new Bounds2(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY )\n      );\n    },\n\n    /**\n     * A bounding box (still axis-aligned) that contains the transformed shape of this bounds, applying the matrix as\n     * an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transformed( matrix ).transformed( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the immutable form of the function transform(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Matrix3} matrix\n     * @returns {Bounds2}\n     */\n    transformed: function( matrix ) {\n      return this.copy().transform( matrix );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides by the specified amount.)\n     * @public\n     *\n     * This is the immutable form of the function dilate(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} d\n     * @returns {Bounds2}\n     */\n    dilated: function( d ) {\n      return new Bounds2( this.minX - d, this.minY - d, this.maxX + d, this.maxY + d );\n    },\n\n    /**\n     * A bounding box that is expanded horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    dilatedX: function( x ) {\n      return new Bounds2( this.minX - x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * A bounding box that is expanded vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    dilatedY: function( y ) {\n      return new Bounds2( this.minX, this.minY - y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides, with different amounts of expansion horizontally and vertically.\n     * Will be identical to the bounds returned by calling bounds.dilatedX( x ).dilatedY( y ).\n     * @public\n     *\n     * This is the immutable form of the function dilateXY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to dilate horizontally (for each side)\n     * @param {number} y - Amount to dilate vertically (for each side)\n     * @returns {Bounds2}\n     */\n    dilatedXY: function( x, y ) {\n      return new Bounds2( this.minX - x, this.minY - y, this.maxX + x, this.maxY + y );\n    },\n\n    /**\n     * A bounding box that is contracted on all sides by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erode(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} amount\n     * @returns {Bounds2}\n     */\n    eroded: function( d ) { return this.dilated( -d ); },\n\n    /**\n     * A bounding box that is contracted horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    erodedX: function( x ) { return this.dilatedX( -x ); },\n\n    /**\n     * A bounding box that is contracted vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    erodedY: function( y ) { return this.dilatedY( -y ); },\n\n    /**\n     * A bounding box that is contracted on all sides, with different amounts of contraction horizontally and vertically.\n     * @public\n     *\n     * This is the immutable form of the function erodeXY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to erode horizontally (for each side)\n     * @param {number} y - Amount to erode vertically (for each side)\n     * @returns {Bounds2}\n     */\n    erodedXY: function( x, y ) { return this.dilatedXY( -x, -y ); },\n\n    /**\n     * A bounding box that is expanded by a specific amount on all sides (or if some offsets are negative, will contract\n     * those sides).\n     * @public\n     *\n     * This is the immutable form of the function offset(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} left - Amount to expand to the left (subtracts from minX)\n     * @param {number} top - Amount to expand to the top (subtracts from minY)\n     * @param {number} right - Amount to expand to the right (adds to maxX)\n     * @param {number} bottom - Amount to expand to the bottom (adds to maxY)\n     * @returns {Bounds2}\n     */\n    withOffsets: function( left, top, right, bottom ) {\n      return new Bounds2( this.minX - left, this.minY - top, this.maxX + right, this.maxY + bottom );\n    },\n\n    /**\n     * Our bounds, translated horizontally by x, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    shiftedX: function( x ) {\n      return new Bounds2( this.minX + x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * Our bounds, translated vertically by y, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shiftedY: function( y ) {\n      return new Bounds2( this.minX, this.minY + y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * Our bounds, translated by (x,y), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shift(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shifted: function( x, y ) {\n      return new Bounds2( this.minX + x, this.minY + y, this.maxX + x, this.maxY + y );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations\n     *\n     * All mutable operations should call one of the following:\n     *   setMinMax, setMinX, setMinY, setMaxX, setMaxY\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets each value for this bounds, and returns itself.\n     * @public\n     *\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} maxX\n     * @param {number} maxY\n     * @returns {Bounds2}\n     */\n    setMinMax: function( minX, minY, maxX, maxY ) {\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      return this;\n    },\n\n    /**\n     * Sets the value of minX.\n     * @public\n     *\n     * This is the mutable form of the function withMinX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minX\n     * @returns {Bounds2}\n     */\n    setMinX: function( minX ) {\n      this.minX = minX;\n      return this;\n    },\n\n    /**\n     * Sets the value of minY.\n     * @public\n     *\n     * This is the mutable form of the function withMinY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minY\n     * @returns {Bounds2}\n     */\n    setMinY: function( minY ) {\n      this.minY = minY;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxX.\n     * @public\n     *\n     * This is the mutable form of the function withMaxX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxX\n     * @returns {Bounds2}\n     */\n    setMaxX: function( maxX ) {\n      this.maxX = maxX;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxY.\n     * @public\n     *\n     * This is the mutable form of the function withMaxY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxY\n     * @returns {Bounds2}\n     */\n    setMaxY: function( maxY ) {\n      this.maxY = maxY;\n      return this;\n    },\n\n    /**\n     * Sets the values of this bounds to be equal to the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    set: function( bounds ) {\n      return this.setMinMax( bounds.minX, bounds.minY, bounds.maxX, bounds.maxY );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function union(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    includeBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it is the largest bounds contained both in its original bounds and in the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function intersection(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    constrainBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point (x,y).\n     * @public\n     *\n     * This is the mutable form of the function withCoordinates(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    addCoordinates: function( x, y ) {\n      return this.setMinMax(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point.\n     * @public\n     *\n     * This is the mutable form of the function withPoint(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Vector2} point\n     * @returns {Bounds2}\n     */\n    addPoint: function( point ) {\n      return this.addCoordinates( point.x, point.y );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries down and the\n     * maximum boundaries up (expanding as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedOut(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds2}\n     */\n    roundOut: function() {\n      return this.setMinMax(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries up and the\n     * maximum boundaries down (contracting as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedIn(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds2}\n     */\n    roundIn: function() {\n      return this.setMinMax(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it would fully contain a transformed version if its previous value, applying the\n     * matrix as an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transform( matrix ).transform( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the mutable form of the function transformed(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Matrix3} matrix\n     * @returns {Bounds2}\n     */\n    transform: function( matrix ) {\n      // if we contain no area, no change is needed\n      if ( this.isEmpty() ) {\n        return this;\n      }\n\n      // optimization to bail for identity matrices\n      if ( matrix.isIdentity() ) {\n        return this;\n      }\n\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.set( dot.Bounds2.NOTHING );\n\n      // using mutable vector so we don't create excessive instances of Vector2 during this\n      // make sure all 4 corners are inside this transformed bounding box\n\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( minX, minY ) ) );\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( minX, maxY ) ) );\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( maxX, minY ) ) );\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( maxX, maxY ) ) );\n      return this;\n    },\n\n    /**\n     * Expands this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilated(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds2}\n     */\n    dilate: function( d ) {\n      return this.setMinMax( this.minX - d, this.minY - d, this.maxX + d, this.maxY + d );\n    },\n\n    /**\n     * Expands this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    dilateX: function( x ) {\n      return this.setMinMax( this.minX - x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * Expands this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    dilateY: function( y ) {\n      return this.setMinMax( this.minX, this.minY - y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * Expands this bounds independently in the horizontal and vertical directions. Will be equal to calling\n     * bounds.dilateX( x ).dilateY( y ).\n     * @public\n     *\n     * This is the mutable form of the function dilatedXY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    dilateXY: function( x, y ) {\n      return this.setMinMax( this.minX - x, this.minY - y, this.maxX + x, this.maxY + y );\n    },\n\n    /**\n     * Contracts this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function eroded(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds2}\n     */\n    erode: function( d ) { return this.dilate( -d ); },\n\n    /**\n     * Contracts this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    erodeX: function( x ) { return this.dilateX( -x ); },\n\n    /**\n     * Contracts this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    erodeY: function( y ) { return this.dilateY( -y ); },\n\n    /**\n     * Contracts this bounds independently in the horizontal and vertical directions. Will be equal to calling\n     * bounds.erodeX( x ).erodeY( y ).\n     * @public\n     *\n     * This is the mutable form of the function erodedXY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    erodeXY: function( x, y ) { return this.dilateXY( -x, -y ); },\n\n    /**\n     * Expands this bounds independently for each side (or if some offsets are negative, will contract those sides).\n     * @public\n     *\n     * This is the mutable form of the function withOffsets(). This will mutate (change) this bounds, in addition to\n     * returning this bounds itself.\n     *\n     * @param {number} left - Amount to expand to the left (subtracts from minX)\n     * @param {number} top - Amount to expand to the top (subtracts from minY)\n     * @param {number} right - Amount to expand to the right (adds to maxX)\n     * @param {number} bottom - Amount to expand to the bottom (adds to maxY)\n     * @returns {Bounds2}\n     */\n    offset: function( left, top, right, bottom ) {\n      return new Bounds2( this.minX - left, this.minY - top, this.maxX + right, this.maxY + bottom );\n    },\n\n    /**\n     * Translates our bounds horizontally by x.\n     * @public\n     *\n     * This is the mutable form of the function shiftedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    shiftX: function( x ) {\n      return this.setMinMax( this.minX + x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * Translates our bounds vertically by y.\n     * @public\n     *\n     * This is the mutable form of the function shiftedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shiftY: function( y ) {\n      return this.setMinMax( this.minX, this.minY + y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * Translates our bounds by (x,y).\n     * @public\n     *\n     * This is the mutable form of the function shifted(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shift: function( x, y ) {\n      return this.setMinMax( this.minX + x, this.minY + y, this.maxX + x, this.maxY + y );\n    },\n\n    /**\n     * Find a point in the bounds closest to the specified point.\n     * @public\n     *\n     * @param {number} x - X coordinate of the point to test.\n     * @param {number} y - Y coordinate of the point to test.\n     * @param {Vector2} [result] - Vector2 that can store the return value to avoid allocations.\n     * @returns {Vector2}\n     */\n    getClosestPoint: function( x, y, result ) {\n      if ( result ) {\n        result.setXY( x, y );\n      }\n      else {\n        result = new dot.Vector2( x, y );\n      }\n      if ( result.x < this.minX ) { result.x = this.minX; }\n      if ( result.x > this.maxX ) { result.x = this.maxX; }\n      if ( result.y < this.minY ) { result.y = this.minY; }\n      if ( result.y > this.maxY ) { result.y = this.maxY; }\n      return result;\n    }\n  }, {\n    /**\n     * Returns a new Bounds2 object, with the familiar rectangle construction with x, y, width, and height.\n     * @public\n     *\n     * @param {number} x - The minimum value of X for the bounds.\n     * @param {number} y - The minimum value of Y for the bounds.\n     * @param {number} width - The width (maxX - minX) of the bounds.\n     * @param {number} height - The height (maxY - minY) of the bounds.\n     * @returns {Bounds2}\n     */\n    rect: function( x, y, width, height ) {\n      return new Bounds2( x, y, x + width, y + height );\n    },\n\n    /**\n     * Returns a new Bounds2 object that only contains the specified point (x,y). Useful for being dilated to form a\n     * bounding box around a point. Note that the bounds will not be \"empty\" as it contains (x,y), but it will have\n     * zero area.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    point: function( x, y ) {\n      if ( x instanceof dot.Vector2 ) {\n        var p = x;\n        return new Bounds2( p.x, p.y, p.x, p.y );\n      }\n      else {\n        return new Bounds2( x, y, x, y );\n      }\n    }\n  } );\n\n  Poolable.mixin( Bounds2, {\n    defaultFactory: function() { return Bounds2.NOTHING.copy(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( minX, minY, maxX, maxY ) {\n        if ( pool.length ) {\n          return pool.pop().setMinMax( minX, minY, maxX, maxY );\n        }\n        else {\n          return new Bounds2( minX, minY, maxX, maxY );\n        }\n      };\n    }\n  } );\n\n  /**\n   * A contant Bounds2 with minimums = $\\infty$, maximums = $-\\infty$, so that it represents \"no bounds whatsoever\".\n   * @public\n   *\n   * This allows us to take the union (union/includeBounds) of this and any other Bounds2 to get the other bounds back,\n   * e.g. Bounds2.NOTHING.union( bounds ).equals( bounds ). This object naturally serves as the base case as a union of\n   * zero bounds objects.\n   *\n   * Additionally, intersections with NOTHING will always return a Bounds2 equivalent to NOTHING.\n   *\n   * @constant {Bounds2} NOTHING\n   */\n  Bounds2.NOTHING = new Bounds2( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY );\n\n  /**\n   * A contant Bounds2 with minimums = $-\\infty$, maximums = $\\infty$, so that it represents \"all bounds\".\n   * @public\n   *\n   * This allows us to take the intersection (intersection/constrainBounds) of this and any other Bounds2 to get the\n   * other bounds back, e.g. Bounds2.EVERYTHING.intersection( bounds ).equals( bounds ). This object naturally serves as\n   * the base case as an intersection of zero bounds objects.\n   *\n   * Additionally, unions with EVERYTHING will always return a Bounds2 equivalent to EVERYTHING.\n   *\n   * @constant {Bounds2} EVERYTHING\n   */\n  Bounds2.EVERYTHING = new Bounds2( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY );\n\n  function catchImmutableSetterLowHangingFruit( bounds ) {\n    bounds.setMinMax = function() { throw new Error( 'Attempt to set \\\"setMinMax\\\" of an immutable Bounds2 object' ); };\n    bounds.set = function() { throw new Error( 'Attempt to set \\\"set\\\" of an immutable Bounds2 object' ); };\n    bounds.includeBounds = function() { throw new Error( 'Attempt to set \\\"includeBounds\\\" of an immutable Bounds2 object' ); };\n    bounds.constrainBounds = function() { throw new Error( 'Attempt to set \\\"constrainBounds\\\" of an immutable Bounds2 object' ); };\n    bounds.addCoordinates = function() { throw new Error( 'Attempt to set \\\"addCoordinates\\\" of an immutable Bounds2 object' ); };\n    bounds.transform = function() { throw new Error( 'Attempt to set \\\"transform\\\" of an immutable Bounds2 object' ); };\n  }\n\n  if ( assert ) {\n    catchImmutableSetterLowHangingFruit( Bounds2.EVERYTHING );\n    catchImmutableSetterLowHangingFruit( Bounds2.NOTHING );\n  }\n\n  return Bounds2;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Given a rectangular containing area, takes care of allocating and deallocating smaller rectangular \"bins\" that fit\n * together inside the area and do not overlap. Optimized more for runtime CPU usage than space currently.\n *\n * For example:\n * #begin canvasExample binPacker 256x256\n * #on\n * var binPacker = new dot.BinPacker( new dot.Bounds2( 0, 0, 256, 256 ) );\n * var bins = [];\n * for ( var i = 0; i < 100; i++ ) {\n *   var bin = binPacker.allocate( Math.random() * 64, Math.random() * 64 );\n *   if ( bin ) {\n *     bins.push( bin );\n *   }\n * }\n * #off\n *\n * context.strokeStyle = '#000';\n * bins.forEach( function( bin ) {\n *   var bounds = bin.bounds;\n *   context.strokeRect( bounds.x, bounds.y, bounds.width, bounds.height );\n * } );\n * #end canvasExample\n *\n * @author Sharfudeen Ashraf\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\ndefine( 'DOT/BinPacker',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  // modules\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n\n  /**\n   * Creates a BinPacker with the specified containing bounds.\n   * @public\n   * @constructor\n   *\n   * @param {Bounds2} bounds - The available bounds to pack bins inside.\n   */\n  function BinPacker( bounds ) {\n    this.rootBin = new dot.BinPacker.Bin( bounds, null );\n  }\n\n  dot.register( 'BinPacker', BinPacker );\n\n  inherit( Object, BinPacker, {\n    /**\n     * Allocates a bin with the specified width and height if possible (returning a {Bin}), otherwise returns null.\n     * @public\n     *\n     * @param {number} width\n     * @param {number} height\n     * @returns {Bin|null}\n     */\n    allocate: function( width, height ) {\n      // find a leaf bin that has available room (or null)\n      var bin = this.rootBin.findAvailableBin( width, height );\n\n      if ( bin ) {\n        // split it into a sized sub-bin for our purpose that we will use, and other bins for future allocations\n        var sizedBin = bin.split( width, height );\n\n        // mark our bin as used\n        sizedBin.use();\n\n        return sizedBin;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Deallocates a bin, so that its area can be reused by future allocations.\n     * @public\n     *\n     * @param {Bin} bin - The bin that was returned from allocate().\n     */\n    deallocate: function( bin ) {\n      bin.unuse();\n    },\n\n    // @private, for debugging purposes\n    toString: function() {\n      var result = '';\n\n      var padding = '';\n\n      function binTree( bin ) {\n        result += padding + bin.toString() + '\\n';\n        padding = padding + '  ';\n        _.each( bin.children, binTree );\n        padding = padding.substring( 2 );\n      }\n\n      binTree( this.rootBin );\n\n      return result;\n    }\n  } );\n\n  /**\n   * A rectangular bin that can be used itself or split into sub-bins.\n   * @public\n   * @constructor\n   *\n   * @param {Bounds2} bounds\n   * @param {Bin|null} parent\n   */\n  BinPacker.Bin = function Bin( bounds, parent ) {\n    // @public {Bounds2} - Our containing bounds\n    this.bounds = bounds;\n\n    // @private {Bin|null} - Parent bin, if applicable\n    this.parent = parent;\n\n    // @private {boolean} - Whether our children are responsible for our area\n    this.isSplit = false;\n\n    // @private {boolean} - Whether we are marked as a bin that is used\n    this.isUsed = false;\n\n    // @private {Array.<Bin>}\n    this.children = [];\n  };\n  inherit( Object, BinPacker.Bin, {\n\n    /**\n     * Finds an unused bin with open area that is at least width-x-height in size.\n     * @private\n     *\n     * @param {number} width\n     * @param {number} height\n     * @returns {Bin|null}\n     */\n    findAvailableBin: function( width, height ) {\n      assert && assert( width > 0 && height > 0, 'Empty bin requested?' );\n\n      // If we are marked as used ourself, we can't be used\n      if ( this.isUsed ) {\n        return null;\n      }\n      // If our bounds can't fit it, skip this entire sub-tree\n      else if ( this.bounds.width < width || this.bounds.height < height ) {\n        return null;\n      }\n      // If we have been split, check our children\n      else if ( this.isSplit ) {\n        for ( var i = 0; i < this.children.length; i++ ) {\n          var result = this.children[ i ].findAvailableBin( width, height );\n          if ( result ) {\n            return result;\n          }\n        }\n        // No child can fit the area\n        return null;\n      }\n      // Otherwise we are free and our dimensions are compatible (checked above)\n      else {\n        return this;\n      }\n    },\n\n    /**\n     * Splits this bin into multiple child bins, and returns the child with the dimensions (width,height).\n     * @private\n     *\n     * @param {number} width\n     * @param {number} height\n     */\n    split: function( width, height ) {\n      assert && assert( this.bounds.width >= width && this.bounds.height >= height,\n        'Bin does not have space' );\n      assert && assert( !this.isSplit, 'Bin should not be re-split' );\n      assert && assert( !this.isUsed, 'Bin should not be split when used' );\n      assert && assert( width > 0 && height > 0, 'Empty bin requested?' );\n\n      // if our dimensions match exactly, don't split (return ourself)\n      if ( width === this.bounds.width && height === this.bounds.height ) {\n        return this;\n      }\n\n      // mark as split\n      this.isSplit = true;\n\n      // locations of the split\n      var splitX = this.bounds.minX + width;\n      var splitY = this.bounds.minY + height;\n\n      /*\n       * How an area is split (for now). In the future, splitting more after determining what we need to fit next would\n       * potentially be better, but this preserves the width better (which many times we need).\n       *\n       *   ************************************\n       *   *                  *               *\n       *   *                  *               *\n       *   *       main       *     right     *\n       *   * (width x height) *               *\n       *   *                  *               *\n       *   ************************************\n       *   *                                  *\n       *   *              bottom              *\n       *   *                                  *\n       *   ************************************\n       */\n      var mainBounds = new Bounds2( this.bounds.minX, this.bounds.minY, splitX, splitY );\n      var rightBounds = new Bounds2( splitX, this.bounds.minY, this.bounds.maxX, splitY );\n      var bottomBounds = new Bounds2( this.bounds.minX, splitY, this.bounds.maxX, this.bounds.maxY );\n\n      var mainBin = new dot.BinPacker.Bin( mainBounds, this );\n      this.children.push( mainBin );\n\n      // only add right/bottom if they take up area\n      if ( rightBounds.hasNonzeroArea() ) {\n        this.children.push( new dot.BinPacker.Bin( rightBounds, this ) );\n      }\n      if ( bottomBounds.hasNonzeroArea() ) {\n        this.children.push( new dot.BinPacker.Bin( bottomBounds, this ) );\n      }\n\n      return mainBin;\n    },\n\n    /**\n     * Mark this bin as used.\n     * @private\n     */\n    use: function() {\n      assert && assert( !this.isSplit, 'Should not mark a split bin as used' );\n      assert && assert( !this.isUsed, 'Should not mark a used bin as used' );\n\n      this.isUsed = true;\n    },\n\n    /**\n     * Mark this bin as not used, and attempt to collapse split parents if all children are unused.\n     * @private\n     */\n    unuse: function() {\n      assert && assert( this.isUsed, 'Can only unuse a used instance' );\n\n      this.isUsed = false;\n\n      this.parent && this.parent.attemptToCollapse();\n    },\n\n    /**\n     * If our bin can be collapsed (it is split and has children that are not used AND not split), then we will become\n     * not split, and will remove our children. If successful, it will also call this on our parent, fully attempting\n     * to clean up unused data structures.\n     * @private\n     */\n    attemptToCollapse: function() {\n      assert && assert( this.isSplit, 'Should only attempt to collapse split bins' );\n\n      // Bail out if a single child isn't able to be collapsed. If it is not split or used, it won't have any children\n      // or needs.\n      for ( var i = 0; i < this.children.length; i++ ) {\n        var child = this.children[ i ];\n\n        if ( child.isSplit || child.isUsed ) {\n          return;\n        }\n      }\n\n      // We can now collapse ourselves neatly\n      this.children = [];\n      this.isSplit = false;\n\n      // And attempt to collapse our parent\n      this.parent && this.parent.attemptToCollapse();\n    },\n\n    // @private for debugging purposes\n    toString: function() {\n      return this.bounds.toString() + ( this.isUsed ? ' used' : '' );\n    }\n  } );\n\n  return BinPacker;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic 4-dimensional vector, represented as (x,y).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Vector4',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  require( 'DOT/Util' );\n  // require( 'DOT/Vector3' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  /**\n   * Creates a 4-dimensional vector with the specified X, Y, Z and W values.\n   * @constructor\n   * @public\n   *\n   * @param {number} [x] - X coordinate, defaults to 0 if not provided\n   * @param {number} [y] - Y coordinate, defaults to 0 if not provided\n   * @param {number} [z] - Z coordinate, defaults to 0 if not provided\n   * @param {number} [w] - W coordinate, defaults to 1 if not provided (convenience for homogeneous coordinates)\n   */\n  function Vector4( x, y, z, w ) {\n    // @public {number} - The X coordinate of the vector.\n    this.x = x !== undefined ? x : 0;\n\n    // @public {number} - The Y coordinate of the vector.\n    this.y = y !== undefined ? y : 0;\n\n    // @public {number} - The Z coordinate of the vector.\n    this.z = z !== undefined ? z : 0;\n\n    // @public {number} - The W coordinate of the vector. Default is 1, for ease with homogeneous coordinates.\n    this.w = w !== undefined ? w : 1;\n\n    assert && assert( typeof this.x === 'number', 'x needs to be a number' );\n    assert && assert( typeof this.y === 'number', 'y needs to be a number' );\n    assert && assert( typeof this.z === 'number', 'z needs to be a number' );\n    assert && assert( typeof this.w === 'number', 'w needs to be a number' );\n\n    phetAllocation && phetAllocation( 'Vector4' );\n  }\n\n  dot.register( 'Vector4', Vector4 );\n\n  inherit( Object, Vector4, {\n    // @public (read-only) - Helps to identify the dimension of the vector\n    isVector4: true,\n    dimension: 4,\n\n    /**\n     * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\\sqrt{x^2+y^2+z^2+w^2}$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    /**\n     * The squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2+z^2+w^2$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitudeSquared: function() {\n      this.dot( this );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector4} point\n     * @returns {number}\n     */\n    distance: function( point ) {\n      return this.minus( point ).magnitude();\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point (x,y,z,w).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {number}\n     */\n    distanceXYZW: function( x, y, z, w ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      var dw = this.w - w;\n      return Math.sqrt( dx * dx + dy * dy + dz * dz + dw * dw );\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector4} point\n     * @returns {number}\n     */\n    distanceSquared: function( point ) {\n      return this.minus( point ).magnitudeSquared();\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point (x,y,z,w).\n     * @public\n     *\n     * @param {Vector4} point\n     * @returns {number}\n     */\n    distanceSquaredXYZW: function( x, y, z, w ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      var dw = this.w - w;\n      return dx * dx + dy * dy + dz * dz + dw * dw;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector v.\n     * @public\n     *\n     * @param {Vector4} v\n     * @returns {number}\n     */\n    dot: function( v ) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector (x,y,z,w).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {number}\n     */\n    dotXYZW: function( x, y, z, w ) {\n      return this.x * x + this.y * y + this.z * z + this.w * w;\n    },\n\n    /**\n     * The angle between this vector and another vector, in the range $\\theta\\in[0, \\pi]$.\n     * @public\n     *\n     * Equal to $\\theta = \\cos^{-1}( \\hat{u} \\cdot \\hat{v} )$ where $\\hat{u}$ is this vector (normalized) and $\\hat{v}$\n     * is the input vector (normalized).\n     *\n     * @param {Vector4} v\n     * @returns {number}\n     */\n    angleBetween: function( v ) {\n      return Math.acos( dot.clamp( this.normalized().dot( v.normalized() ), -1, 1 ) );\n    },\n\n    /**\n     * Exact equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector4} other\n     * @returns {boolean} - Whether the two vectors have equal components\n     */\n    equals: function( other ) {\n      return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;\n    },\n\n    /**\n     * Approximate equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector4} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two vectors has no component with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      if ( !epsilon ) {\n        epsilon = 0;\n      }\n      return Math.abs( this.x - other.x ) + Math.abs( this.y - other.y ) + Math.abs( this.z - other.z ) + Math.abs( this.w - other.w ) <= epsilon;\n    },\n\n    /**\n     * Whether all of the components are numbers (not NaN) that are not infinity or -infinity.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.x ) && isFinite( this.y ) && isFinite( this.z ) && isFinite( this.w );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and\n     * will not modify this vector.\n     *\n     * @param {Vector4} [vector] - If not provided, creates a new Vector4 with filled in values. Otherwise, fills in the\n     *                             values of the provided vector so that it equals this vector.\n     * @returns {Vector4}\n     */\n    copy: function( vector ) {\n      if ( vector ) {\n        return vector.set( this );\n      }\n      else {\n        return new Vector4( this.x, this.y, this.z, this.w );\n      }\n    },\n\n    /**\n     * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an\n     * error is thrown.\n     * @public\n     *\n     * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this\n     * vector.\n     *\n     * @returns {Vector4}\n     */\n    normalized: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return new Vector4( this.x / mag, this.y / mag, this.z / mag, this.w / mag );\n      }\n    },\n\n    /**\n     * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error\n     * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.\n     * @public\n     *\n     * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} magnitude\n     * @returns {Vector4}\n     */\n    withMagnitude: function( magnitude ) {\n      return this.copy().setMagnitude( magnitude );\n    },\n\n    /**\n     * Copy of this vector, scaled by the desired scalar value.\n     * @public\n     *\n     * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    timesScalar: function( scalar ) {\n      return new Vector4( this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar );\n    },\n\n    /**\n     * Same as timesScalar.\n     * @public\n     *\n     * This is the immutable form of the function multiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    times: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.timesScalar( scalar );\n    },\n\n    /**\n     * Copy of this vector, multiplied component-wise by the passed-in vector v.\n     * @public\n     *\n     * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    componentTimes: function( v ) {\n      return new Vector4( this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w );\n    },\n\n    /**\n     * Addition of this vector and another vector, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function add(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    plus: function( v ) {\n      return new Vector4( this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w );\n    },\n\n    /**\n     * Addition of this vector and another vector (x,y,z,w), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addXYZW(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    plusXYZW: function( x, y, z, w ) {\n      return new Vector4( this.x + x, this.y + y, this.z + z, this.w + w );\n    },\n\n    /**\n     * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    plusScalar: function( scalar ) {\n      return new Vector4( this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar );\n    },\n\n    /**\n     * Subtraction of this vector by another vector v, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtract(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    minus: function( v ) {\n      return new Vector4( this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w );\n    },\n\n    /**\n     * Subtraction of this vector by another vector (x,y,z,w), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractXYZW(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    minusXYZW: function( x, y, z, w ) {\n      return new Vector4( this.x - x, this.y - y, this.z - z, this.w - w );\n    },\n\n    /**\n     * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    minusScalar: function( scalar ) {\n      return new Vector4( this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar );\n    },\n\n    /**\n     * Division of this vector by a scalar (divides every component by the scalar), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    dividedScalar: function( scalar ) {\n      return new Vector4( this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar );\n    },\n\n    /**\n     * Negated copy of this vector (multiplies every component by -1).\n     * @public\n     *\n     * This is the immutable form of the function negate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @returns {Vector4}\n     */\n    negated: function() {\n      return new Vector4( -this.x, -this.y, -this.z, -this.w );\n    },\n\n    /**\n     * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).\n     * @public\n     *\n     * @param {Vector4} vector\n     * @param {number} ratio - Not necessarily constrained in [0, 1]\n     * @returns {Vector4}\n     */\n    blend: function( vector, ratio ) {\n      return this.plus( vector.minus( this ).times( ratio ) );\n    },\n\n    /**\n     * The average (midpoint) between this vector and another vector.\n     * @public\n     *\n     * @param {Vector4} vector\n     * @returns {Vector4}\n     */\n    average: function( vector ) {\n      return this.blend( vector, 0.5 );\n    },\n\n    /**\n     * Debugging string for the vector.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Vector4(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\n    },\n\n    /**\n     * Converts this to a 3-dimensional vector, discarding the w-component.\n     * @public\n     *\n     * @returns {Vector3}\n     */\n    toVector3: function() {\n      return new dot.Vector3( this.x, this.y, this.z );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutables\n     * - all mutation should go through setXYZW / setX / setY / setZ / setW\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets all of the components of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    setXYZW: function( x, y, z, w ) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    },\n\n    /**\n     * Sets the x-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @returns {Vector4}\n     */\n    setX: function( x ) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets the y-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} y\n     * @returns {Vector4}\n     */\n    setY: function( y ) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets the z-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} z\n     * @returns {Vector4}\n     */\n    setZ: function( z ) {\n      this.z = z;\n      return this;\n    },\n\n    /**\n     * Sets the w-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    setW: function( w ) {\n      this.w = w;\n      return this;\n    },\n\n    /**\n     * Sets this vector to be a copy of another vector.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning\n     * this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    set: function( v ) {\n      return this.setXYZW( v.x, v.y, v.z, v.w );\n    },\n\n    /**\n     * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its\n     * magnitude to abs( magnitude ).\n     * @public\n     *\n     * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} magnitude\n     * @returns {Vector4}\n     */\n    setMagnitude: function( magnitude ) {\n      var scale = magnitude / this.magnitude();\n      return this.multiplyScalar( scale );\n    },\n\n    /**\n     * Adds another vector to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    add: function( v ) {\n      return this.setXYZW( this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w );\n    },\n\n    /**\n     * Adds another vector (x,y,z,w) to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusXYZW(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    addXYZW: function( x, y, z, w ) {\n      return this.setXYZW( this.x + x, this.y + y, this.z + z, this.w + w );\n    },\n\n    /**\n     * Adds a scalar to this vector (added to every component), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    addScalar: function( scalar ) {\n      return this.setXYZW( this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar );\n    },\n\n    /**\n     * Subtracts this vector by another vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    subtract: function( v ) {\n      return this.setXYZW( this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w );\n    },\n\n    /**\n     * Subtracts this vector by another vector (x,y,z,w), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusXYZW(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    subtractXYZW: function( x, y, z, w ) {\n      return this.setXYZW( this.x - x, this.y - y, this.z - z, this.w - w );\n    },\n\n    /**\n     * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    subtractScalar: function( scalar ) {\n      return this.setXYZW( this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    multiplyScalar: function( scalar ) {\n      return this.setXYZW( this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * Same as multiplyScalar.\n     * @public\n     *\n     * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    multiply: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.multiplyScalar( scalar );\n    },\n\n    /**\n     * Multiplies this vector by another vector component-wise, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    componentMultiply: function( v ) {\n      return this.setXYZW( this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w );\n    },\n\n    /**\n     * Divides this vector by a scalar (divides each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    divideScalar: function( scalar ) {\n      return this.setXYZW( this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar );\n    },\n\n    /**\n     * Negates this vector (multiplies each component by -1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector4}\n     */\n    negate: function() {\n      return this.setXYZW( -this.x, -this.y, -this.z, -this.w );\n    },\n\n    /**\n     * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector4}\n     */\n    normalize: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return this.divideScalar( mag );\n      }\n      return this;\n    }\n  } );\n\n  // Sets up pooling on Vector4\n  Poolable.mixin( Vector4, {\n    defaultFactory: function() { return new Vector4(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y, z, w ) {\n        if ( pool.length ) {\n          return pool.pop().setXY( x, y, z, w );\n        }\n        else {\n          return new Vector4( x, y, z, w );\n        }\n      };\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Immutable Vector form\n   *---------------------------------------------------------------------------*/\n\n  // @private\n  Vector4.Immutable = function( x, y, z, w ) {\n    this.x = x !== undefined ? x : 0;\n    this.y = y !== undefined ? y : 0;\n    this.z = z !== undefined ? z : 0;\n    this.w = w !== undefined ? w : 1;\n  };\n  var Immutable = Vector4.Immutable;\n\n  inherit( Vector4, Immutable );\n\n  // throw errors whenever a mutable method is called on our immutable vector\n  Immutable.mutableOverrideHelper = function( mutableFunctionName ) {\n    Immutable.prototype[ mutableFunctionName ] = function() {\n      throw new Error( 'Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector4' );\n    };\n  };\n\n  // TODO: better way to handle this list?\n  Immutable.mutableOverrideHelper( 'setXYZW' );\n  Immutable.mutableOverrideHelper( 'setX' );\n  Immutable.mutableOverrideHelper( 'setY' );\n  Immutable.mutableOverrideHelper( 'setZ' );\n  Immutable.mutableOverrideHelper( 'setW' );\n\n  // @public {Vector4} - helpful immutable constants\n  Vector4.ZERO = assert ? new Immutable( 0, 0, 0, 0 ) : new Vector4( 0, 0, 0, 0 );\n  Vector4.X_UNIT = assert ? new Immutable( 1, 0, 0, 0 ) : new Vector4( 1, 0, 0, 0 );\n  Vector4.Y_UNIT = assert ? new Immutable( 0, 1, 0, 0 ) : new Vector4( 0, 1, 0, 0 );\n  Vector4.Z_UNIT = assert ? new Immutable( 0, 0, 1, 0 ) : new Vector4( 0, 0, 1, 0 );\n  Vector4.W_UNIT = assert ? new Immutable( 0, 0, 0, 1 ) : new Vector4( 0, 0, 0, 1 );\n\n  return Vector4;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic 3-dimensional vector, represented as (x,y).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Vector3',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util','DOT/Vector2','DOT/Vector4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  require( 'DOT/Util' );\n  require( 'DOT/Vector2' );\n  require( 'DOT/Vector4' );\n\n  /**\n   * Creates a 3-dimensional vector with the specified X, Y and Z values.\n   * @constructor\n   * @public\n   *\n   * @param {number} [x] - X coordinate, defaults to 0 if not provided\n   * @param {number} [y] - Y coordinate, defaults to 0 if not provided\n   * @param {number} [z] - Z coordinate, defaults to 0 if not provided\n   */\n  function Vector3( x, y, z ) {\n    // @public {number} - The X coordinate of the vector.\n    this.x = x !== undefined ? x : 0;\n\n    // @public {number} - The Y coordinate of the vector.\n    this.y = y !== undefined ? y : 0;\n\n    // @public {number} - The Z coordinate of the vector.\n    this.z = z !== undefined ? z : 0;\n\n    assert && assert( typeof this.x === 'number', 'x needs to be a number' );\n    assert && assert( typeof this.y === 'number', 'y needs to be a number' );\n    assert && assert( typeof this.z === 'number', 'z needs to be a number' );\n\n    phetAllocation && phetAllocation( 'Vector3' );\n  }\n\n  dot.register( 'Vector3', Vector3 );\n\n  inherit( Object, Vector3, {\n    // @public (read-only) - Helps to identify the dimension of the vector\n    isVector3: true,\n    dimension: 3,\n\n    /**\n     * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\\sqrt{x^2+y^2+z^2}$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    /**\n     * T squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2+z^2$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitudeSquared: function() {\n      return this.dot( this );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {number}\n     */\n    distance: function( point ) {\n      return Math.sqrt( this.distanceSquared( point ) );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point (x,y,z).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    distanceXYZ: function( x, y, z ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      return Math.sqrt( dx * dx + dy * dy + dz * dz );\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {number}\n     */\n    distanceSquared: function( point ) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var dz = this.z - point.z;\n      return dx * dx + dy * dy + dz * dz;\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point (x,y,z).\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {number}\n     */\n    distanceSquaredXYZ: function( x, y, z ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      return dx * dx + dy * dy + dz * dz;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector v.\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {number}\n     */\n    dot: function( v ) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector (x,y,z).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    dotXYZ: function( x, y, z ) {\n      return this.x * x + this.y * y + this.z * z;\n    },\n\n    /**\n     * The angle between this vector and another vector, in the range $\\theta\\in[0, \\pi]$.\n     * @public\n     *\n     * Equal to $\\theta = \\cos^{-1}( \\hat{u} \\cdot \\hat{v} )$ where $\\hat{u}$ is this vector (normalized) and $\\hat{v}$\n     * is the input vector (normalized).\n     *\n     * @param {Vector3} v\n     * @returns {number}\n     */\n    angleBetween: function( v ) {\n      return Math.acos( dot.clamp( this.normalized().dot( v.normalized() ), -1, 1 ) );\n    },\n\n    /**\n     * Exact equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector3} other\n     * @returns {boolean} - Whether the two vectors have equal components\n     */\n    equals: function( other ) {\n      return this.x === other.x && this.y === other.y && this.z === other.z;\n    },\n\n    /**\n     * Approximate equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector3} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two vectors has no component with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      if ( !epsilon ) {\n        epsilon = 0;\n      }\n      return Math.abs( this.x - other.x ) + Math.abs( this.y - other.y ) + Math.abs( this.z - other.z ) <= epsilon;\n    },\n\n    /**\n     * Whether all of the components are numbers (not NaN) that are not infinity or -infinity.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.x ) && isFinite( this.y ) && isFinite( this.z );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and\n     * will not modify this vector.\n     *\n     * @param {Vector3} [vector] - If not provided, creates a new Vector3 with filled in values. Otherwise, fills in the\n     *                             values of the provided vector so that it equals this vector.\n     * @returns {Vector3}\n     */\n    copy: function( vector ) {\n      if ( vector ) {\n        return vector.set( this );\n      }\n      else {\n        return new Vector3( this.x, this.y, this.z );\n      }\n    },\n\n    /**\n     * The Euclidean 3-dimensional cross-product of this vector by the passed-in vector.\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    cross: function( v ) {\n      return new Vector3(\n        this.y * v.z - this.z * v.y,\n        this.z * v.x - this.x * v.z,\n        this.x * v.y - this.y * v.x\n      );\n    },\n\n    /**\n     * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an\n     * error is thrown.\n     * @public\n     *\n     * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this\n     * vector.\n     *\n     * @returns {Vector3}\n     */\n    normalized: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return new Vector3( this.x / mag, this.y / mag, this.z / mag );\n      }\n    },\n\n    /**\n     * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error\n     * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.\n     * @public\n     *\n     * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} magnitude\n     * @returns {Vector3}\n     */\n    withMagnitude: function( magnitude ) {\n      return this.copy().setMagnitude( magnitude );\n    },\n\n    /**\n     * Copy of this vector, scaled by the desired scalar value.\n     * @public\n     *\n     * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    timesScalar: function( scalar ) {\n      return new Vector3( this.x * scalar, this.y * scalar, this.z * scalar );\n    },\n\n    /**\n     * Same as timesScalar.\n     * @public\n     *\n     * This is the immutable form of the function multiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    times: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.timesScalar( scalar );\n    },\n\n    /**\n     * Copy of this vector, multiplied component-wise by the passed-in vector v.\n     * @public\n     *\n     * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    componentTimes: function( v ) {\n      return new Vector3( this.x * v.x, this.y * v.y, this.z * v.z );\n    },\n\n    /**\n     * Addition of this vector and another vector, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function add(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    plus: function( v ) {\n      return new Vector3( this.x + v.x, this.y + v.y, this.z + v.z );\n    },\n\n    /**\n     * Addition of this vector and another vector (x,y,z), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addXYZ(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    plusXYZ: function( x, y, z ) {\n      return new Vector3( this.x + x, this.y + y, this.z + z );\n    },\n\n    /**\n     * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    plusScalar: function( scalar ) {\n      return new Vector3( this.x + scalar, this.y + scalar, this.z + scalar );\n    },\n\n    /**\n     * Subtraction of this vector by another vector v, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtract(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    minus: function( v ) {\n      return new Vector3( this.x - v.x, this.y - v.y, this.z - v.z );\n    },\n\n    /**\n     * Subtraction of this vector by another vector (x,y,z), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractXYZ(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    minusXYZ: function( x, y, z ) {\n      return new Vector3( this.x - x, this.y - y, this.z - z );\n    },\n\n    /**\n     * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    minusScalar: function( scalar ) {\n      return new Vector3( this.x - scalar, this.y - scalar, this.z - scalar );\n    },\n\n    /**\n     * Division of this vector by a scalar (divides every component by the scalar), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    dividedScalar: function( scalar ) {\n      return new Vector3( this.x / scalar, this.y / scalar, this.z / scalar );\n    },\n\n    /**\n     * Negated copy of this vector (multiplies every component by -1).\n     * @public\n     *\n     * This is the immutable form of the function negate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @returns {Vector3}\n     */\n    negated: function() {\n      return new Vector3( -this.x, -this.y, -this.z );\n    },\n\n    /**\n     * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).\n     * @public\n     *\n     * @param {Vector3} vector\n     * @param {number} ratio - Not necessarily constrained in [0, 1]\n     * @returns {Vector3}\n     */\n    blend: function( vector, ratio ) {\n      return this.plus( vector.minus( this ).times( ratio ) );\n    },\n\n    /**\n     * The average (midpoint) between this vector and another vector.\n     * @public\n     *\n     * @param {Vector3} vector\n     * @returns {Vector3}\n     */\n    average: function( vector ) {\n      return this.blend( vector, 0.5 );\n    },\n\n    /**\n     * Debugging string for the vector.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Vector3(' + this.x + ', ' + this.y + ', ' + this.z + ')';\n    },\n\n    /**\n     * Converts this to a 2-dimensional vector, discarding the z-component.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    toVector2: function() {\n      return new dot.Vector2( this.x, this.y );\n    },\n\n    /**\n     * Converts this to a 4-dimensional vector, with the z-component equal to 1 (useful for homogeneous coordinates).\n     * @public\n     *\n     * @returns {Vector4}\n     */\n    toVector4: function() {\n      return new dot.Vector4( this.x, this.y, this.z, 1 );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutables\n     * - all mutation should go through setXYZ / setX / setY / setZ\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets all of the components of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    setXYZ: function( x, y, z ) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    },\n\n    /**\n     * Sets the x-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @returns {Vector3}\n     */\n    setX: function( x ) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets the y-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} y\n     * @returns {Vector3}\n     */\n    setY: function( y ) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets the z-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    setZ: function( z ) {\n      this.z = z;\n      return this;\n    },\n\n    /**\n     * Sets this vector to be a copy of another vector.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning\n     * this vector itself.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    set: function( v ) {\n      return this.setXYZ( v.x, v.y, v.z );\n    },\n\n    /**\n     * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its\n     * magnitude to abs( magnitude ).\n     * @public\n     *\n     * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} magnitude\n     * @returns {Vector3}\n     */\n    setMagnitude: function( magnitude ) {\n      var scale = magnitude / this.magnitude();\n      return this.multiplyScalar( scale );\n    },\n\n    /**\n     * Adds another vector to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    add: function( v ) {\n      return this.setXYZ( this.x + v.x, this.y + v.y, this.z + v.z );\n    },\n\n    /**\n     * Adds another vector (x,y,z) to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusXYZ(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    addXYZ: function( x, y, z ) {\n      return this.setXYZ( this.x + x, this.y + y, this.z + z );\n    },\n\n    /**\n     * Adds a scalar to this vector (added to every component), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    addScalar: function( scalar ) {\n      return this.setXYZ( this.x + scalar, this.y + scalar, this.z + scalar );\n    },\n\n    /**\n     * Subtracts this vector by another vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    subtract: function( v ) {\n      return this.setXYZ( this.x - v.x, this.y - v.y, this.z - v.z );\n    },\n\n    /**\n     * Subtracts this vector by another vector (x,y,z), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusXYZ(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    subtractXYZ: function( x, y, z ) {\n      return this.setXYZ( this.x - x, this.y - y, this.z - z );\n    },\n\n    /**\n     * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    subtractScalar: function( scalar ) {\n      return this.setXYZ( this.x - scalar, this.y - scalar, this.z - scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    multiplyScalar: function( scalar ) {\n      return this.setXYZ( this.x * scalar, this.y * scalar, this.z * scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * Same as multiplyScalar.\n     * @public\n     *\n     * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    multiply: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.multiplyScalar( scalar );\n    },\n\n    /**\n     * Multiplies this vector by another vector component-wise, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    componentMultiply: function( v ) {\n      return this.setXYZ( this.x * v.x, this.y * v.y, this.z * v.z );\n    },\n\n    /**\n     * Divides this vector by a scalar (divides each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    divideScalar: function( scalar ) {\n      return this.setXYZ( this.x / scalar, this.y / scalar, this.z / scalar );\n    },\n\n    /**\n     * Negates this vector (multiplies each component by -1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector3}\n     */\n    negate: function() {\n      return this.setXYZ( -this.x, -this.y, -this.z );\n    },\n\n    /**\n     * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector3}\n     */\n    normalize: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return this.divideScalar( mag );\n      }\n    }\n  }, {\n    /**\n     * Spherical linear interpolation between two unit vectors.\n     * @public\n     *\n     * @param {Vector3} start - Start unit vector\n     * @param {Vector3} end - End unit vector\n     * @param {number} ratio  - Between 0 (at start vector) and 1 (at end vector)\n     * @return Spherical linear interpolation between the start and end\n     */\n    slerp: function( start, end, ratio ) {\n      // NOTE: we can't create a require() loop here\n      return dot.Quaternion.slerp( new dot.Quaternion(), dot.Quaternion.getRotationQuaternion( start, end ), ratio ).timesVector3( start );\n    }\n  } );\n\n  // Sets up pooling on Vector3\n  Poolable.mixin( Vector3, {\n    defaultFactory: function() { return new Vector3(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y, z ) {\n        if ( pool.length ) {\n          return pool.pop().setXY( x, y, z );\n        }\n        else {\n          return new Vector3( x, y, z );\n        }\n      };\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Immutable Vector form\n   *---------------------------------------------------------------------------*/\n\n  // @private\n  Vector3.Immutable = function( x, y, z ) {\n    this.x = x !== undefined ? x : 0;\n    this.y = y !== undefined ? y : 0;\n    this.z = z !== undefined ? z : 0;\n  };\n  var Immutable = Vector3.Immutable;\n\n  inherit( Vector3, Immutable );\n\n  // throw errors whenever a mutable method is called on our immutable vector\n  Immutable.mutableOverrideHelper = function( mutableFunctionName ) {\n    Immutable.prototype[ mutableFunctionName ] = function() {\n      throw new Error( 'Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector3' );\n    };\n  };\n\n  // TODO: better way to handle this list?\n  Immutable.mutableOverrideHelper( 'setXYZ' );\n  Immutable.mutableOverrideHelper( 'setX' );\n  Immutable.mutableOverrideHelper( 'setY' );\n  Immutable.mutableOverrideHelper( 'setZ' );\n\n  // @public {Vector3} - helpful immutable constants\n  Vector3.ZERO = assert ? new Immutable( 0, 0, 0 ) : new Vector3( 0, 0, 0 );\n  Vector3.X_UNIT = assert ? new Immutable( 1, 0, 0 ) : new Vector3( 1, 0, 0 );\n  Vector3.Y_UNIT = assert ? new Immutable( 0, 1, 0 ) : new Vector3( 0, 1, 0 );\n  Vector3.Z_UNIT = assert ? new Immutable( 0, 0, 1 ) : new Vector3( 0, 0, 1 );\n\n  return Vector3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A 3D cuboid-shaped bounded area (bounding box).\n *\n * There are a number of convenience functions to get locations and points on the Bounds. Currently we do not\n * store these with the Bounds3 instance, since we want to lower the memory footprint.\n *\n * minX, minY, minZ, maxX, maxY, and maxZ are actually stored. We don't do x,y,z,width,height,depth because this can't properly express\n * semi-infinite bounds (like a half-plane), or easily handle what Bounds3.NOTHING and Bounds3.EVERYTHING do with\n * the constructive solid areas.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Bounds3',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Vector3'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  require( 'DOT/Vector3' );\n\n  /**\n   * Creates a 3-dimensional bounds (bounding box).\n   * @constructor\n   * @public\n   *\n   * @param {number} minX - The intial minimum X coordinate of the bounds.\n   * @param {number} minY - The intial minimum Y coordinate of the bounds.\n   * @param {number} minZ - The intial minimum Z coordinate of the bounds.\n   * @param {number} maxX - The intial maximum X coordinate of the bounds.\n   * @param {number} maxY - The intial maximum Y coordinate of the bounds.\n   * @param {number} maxZ - The intial maximum Z coordinate of the bounds.\n   */\n  function Bounds3( minX, minY, minZ, maxX, maxY, maxZ ) {\n    assert && assert( maxY !== undefined, 'Bounds3 requires 4 parameters' );\n\n    // @public {number} - The minimum X coordinate of the bounds.\n    this.minX = minX;\n\n    // @public {number} - The minimum Y coordinate of the bounds.\n    this.minY = minY;\n\n    // @public {number} - The minimum Z coordinate of the bounds.\n    this.minZ = minZ;\n\n    // @public {number} - The maximum X coordinate of the bounds.\n    this.maxX = maxX;\n\n    // @public {number} - The maximum Y coordinate of the bounds.\n    this.maxY = maxY;\n\n    // @public {number} - The maximum Z coordinate of the bounds.\n    this.maxZ = maxZ;\n\n    phetAllocation && phetAllocation( 'Bounds3' );\n  }\n\n  dot.register( 'Bounds3', Bounds3 );\n\n  inherit( Object, Bounds3, {\n    // @public (read-only) - Helps to identify the dimension of the bounds\n    isBounds: true,\n    dimension: 3,\n\n    /*---------------------------------------------------------------------------*\n     * Properties\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * The width of the bounds, defined as maxX - minX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getWidth: function() { return this.maxX - this.minX; },\n    get width() { return this.getWidth(); },\n\n    /**\n     * The height of the bounds, defined as maxY - minY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getHeight: function() { return this.maxY - this.minY; },\n    get height() { return this.getHeight(); },\n\n    /**\n     * The depth of the bounds, defined as maxZ - minZ.\n     * @public\n     *\n     * @returns {number}\n     */\n    getDepth: function() { return this.maxZ - this.minZ; },\n    get depth() { return this.getDepth(); },\n\n    /*\n     * Convenience locations\n     * upper is in terms of the visual layout in Scenery and other programs, so the minY is the \"upper\", and minY is the \"lower\"\n     *\n     *             minX (x)     centerX        maxX\n     *          ---------------------------------------\n     * minY (y) | upperLeft   upperCenter   upperRight\n     * centerY  | centerLeft    center      centerRight\n     * maxY     | lowerLeft   lowerCenter   lowerRight\n     */\n\n    /**\n     * Alias for minX, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.\n     * @public\n     *\n     * @returns {number}\n     */\n    getX: function() { return this.minX; },\n    get x() { return this.getX(); },\n\n    /**\n     * Alias for minY, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.\n     * @public\n     *\n     * @returns {number}\n     */\n    getY: function() { return this.minY; },\n    get y() { return this.getY(); },\n\n    /**\n     * Alias for minZ, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.\n     * @public\n     *\n     * @returns {number}\n     */\n    getZ: function() { return this.minZ; },\n    get z() { return this.getZ(); },\n\n    /**\n     * Alias for minX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinX: function() { return this.minX; },\n\n    /**\n     * Alias for minY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinY: function() { return this.minY; },\n\n    /**\n     * Alias for minZ, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinZ: function() { return this.minZ; },\n\n    /**\n     * Alias for maxX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxX: function() { return this.maxX; },\n\n    /**\n     * Alias for maxY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxY: function() { return this.maxY; },\n\n    /**\n     * Alias for maxZ, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxZ: function() { return this.maxZ; },\n\n    /**\n     * Alias for minX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getLeft: function() { return this.minX; },\n    get left() { return this.minX; },\n\n    /**\n     * Alias for minY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getTop: function() { return this.minY; },\n    get top() { return this.minY; },\n\n    /**\n     * Alias for minZ, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getBack: function() { return this.minZ; },\n    get back() { return this.minZ; },\n\n    /**\n     * Alias for maxX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getRight: function() { return this.maxX; },\n    get right() { return this.maxX; },\n\n    /**\n     * Alias for maxY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getBottom: function() { return this.maxY; },\n    get bottom() { return this.maxY; },\n\n    /**\n     * Alias for maxZ, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getFront: function() { return this.maxZ; },\n    get front() { return this.maxZ; },\n\n    /**\n     * The horizontal (X-coordinate) center of the bounds, averaging the minX and maxX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterX: function() { return ( this.maxX + this.minX ) / 2; },\n    get centerX() { return this.getCenterX(); },\n\n    /**\n     * The vertical (Y-coordinate) center of the bounds, averaging the minY and maxY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterY: function() { return ( this.maxY + this.minY ) / 2; },\n    get centerY() { return this.getCenterY(); },\n\n    /**\n     * The depthwise (Z-coordinate) center of the bounds, averaging the minZ and maxZ.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterZ: function() { return ( this.maxZ + this.minZ ) / 2; },\n    get centerZ() { return this.getCenterZ(); },\n\n    /**\n     * The point (centerX, centerY, centerZ), in the center of the bounds.\n     * @public\n     *\n     * @returns {Vector3}\n     */\n    getCenter: function() { return new dot.Vector3( this.getCenterX(), this.getCenterY(), this.getCenterZ() ); },\n    get center() { return this.getCenter(); },\n\n    /**\n     * Whether we have negative width, height or depth. Bounds3.NOTHING is a prime example of an empty Bounds3.\n     * Bounds with width = height = depth = 0 are considered not empty, since they include the single (0,0,0) point.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isEmpty: function() { return this.getWidth() < 0 || this.getHeight() < 0 || this.getDepth() < 0; },\n\n    /**\n     * Whether our minimums and maximums are all finite numbers. This will exclude Bounds3.NOTHING and Bounds3.EVERYTHING.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.minX ) && isFinite( this.minY ) && isFinite( this.minZ ) && isFinite( this.maxX ) && isFinite( this.maxY ) && isFinite( this.maxZ );\n    },\n\n    /**\n     * Whether this bounds has a non-zero area (non-zero positive width, height and depth).\n     * @public\n     *\n     * @returns {boolean}\n     */\n    hasNonzeroArea: function() {\n      return this.getWidth() > 0 && this.getHeight() > 0 && this.getDepth() > 0;\n    },\n\n    /**\n     * Whether this bounds has a finite and non-negative width, height and depth.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isValid: function() {\n      return !this.isEmpty() && this.isFinite();\n    },\n\n    /**\n     * Whether the coordinates are contained inside the bounding box, or are on the boundary.\n     * @public\n     *\n     * @param {number} x - X coordinate of the point to check\n     * @param {number} y - Y coordinate of the point to check\n     * @param {number} z - Z coordinate of the point to check\n     * @returns {boolean}\n     */\n    containsCoordinates: function( x, y, z ) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY && this.minZ <= z && z <= this.maxZ;\n    },\n\n    /**\n     * Whether the point is contained inside the bounding box, or is on the boundary.\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {boolean}\n     */\n    containsPoint: function( point ) {\n      return this.containsCoordinates( point.x, point.y, point.z );\n    },\n\n    /**\n     * Whether this bounding box completely contains the bounding box passed as a parameter. The boundary of a box is\n     * considered to be \"contained\".\n     * @public\n     *\n     * @param {Bounds3} bounds\n     * @returns {boolean}\n     */\n    containsBounds: function( bounds ) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY && this.minZ <= bounds.minZ && this.maxZ >= bounds.maxZ;\n    },\n\n    /**\n     * Whether this and another bounding box have any points of intersection (including touching boundaries).\n     * @public\n     *\n     * @param {Bounds3} bounds\n     * @returns {boolean}\n     */\n    intersectsBounds: function( bounds ) {\n      // TODO: more efficient way of doing this?\n      return !this.intersection( bounds ).isEmpty();\n    },\n\n    /**\n     * Debugging string for the bounds.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + '),z:(' + this.minZ + ',' + this.maxZ + ')]';\n    },\n\n    /**\n     * Exact equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds3} other\n     * @returns {boolean} - Whether the two bounds are equal\n     */\n    equals: function( other ) {\n      return this.minX === other.minX && this.minY === other.minY && this.minZ === other.minZ && this.maxX === other.maxX && this.maxY === other.maxY && this.maxZ === other.maxZ;\n    },\n\n    /**\n     * Approximate equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds3} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two bounds has no min/max with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      epsilon = epsilon !== undefined ? epsilon : 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if ( thisFinite && otherFinite ) {\n        // both are finite, so we can use Math.abs() - it would fail with non-finite values like Infinity\n        return Math.abs( this.minX - other.minX ) < epsilon &&\n               Math.abs( this.minY - other.minY ) < epsilon &&\n               Math.abs( this.minZ - other.minZ ) < epsilon &&\n               Math.abs( this.maxX - other.maxX ) < epsilon &&\n               Math.abs( this.maxY - other.maxY ) < epsilon &&\n               Math.abs( this.maxZ - other.maxZ ) < epsilon;\n      }\n      else if ( thisFinite !== otherFinite ) {\n        return false; // one is finite, the other is not. definitely not equal\n      }\n      else if ( this === other ) {\n        return true; // exact same instance, must be equal\n      }\n      else {\n        // epsilon only applies on finite dimensions. due to JS's handling of isFinite(), it's faster to check the sum of both\n        return ( isFinite( this.minX + other.minX ) ? ( Math.abs( this.minX - other.minX ) < epsilon ) : ( this.minX === other.minX ) ) &&\n               ( isFinite( this.minY + other.minY ) ? ( Math.abs( this.minY - other.minY ) < epsilon ) : ( this.minY === other.minY ) ) &&\n               ( isFinite( this.minZ + other.minZ ) ? ( Math.abs( this.minZ - other.minZ ) < epsilon ) : ( this.minZ === other.minZ ) ) &&\n               ( isFinite( this.maxX + other.maxX ) ? ( Math.abs( this.maxX - other.maxX ) < epsilon ) : ( this.maxX === other.maxX ) ) &&\n               ( isFinite( this.maxY + other.maxY ) ? ( Math.abs( this.maxY - other.maxY ) < epsilon ) : ( this.maxY === other.maxY ) ) &&\n               ( isFinite( this.maxZ + other.maxZ ) ? ( Math.abs( this.maxZ - other.maxZ ) < epsilon ) : ( this.maxZ === other.maxZ ) );\n      }\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this bounds, or if a bounds is passed in, set that bounds's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a bounds is provided. This will return a new bounds, and\n     * will not modify this bounds.\n     *\n     * @param {Bounds3} [bounds] - If not provided, creates a new Bounds3 with filled in values. Otherwise, fills in the\n     *                             values of the provided bounds so that it equals this bounds.\n     * @returns {Bounds3}\n     */\n    copy: function( bounds ) {\n      if ( bounds ) {\n        return bounds.set( this );\n      }\n      else {\n        return new Bounds3( this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ );\n      }\n    },\n\n    /**\n     * The smallest bounds that contains both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function includeBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    union: function( bounds ) {\n      return new Bounds3(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.min( this.minZ, bounds.minZ ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY ),\n        Math.max( this.maxZ, bounds.maxZ )\n      );\n    },\n\n    /**\n     * The smallest bounds that is contained by both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function constrainBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    intersection: function( bounds ) {\n      return new Bounds3(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.max( this.minZ, bounds.minZ ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY ),\n        Math.min( this.maxZ, bounds.maxZ )\n      );\n    },\n    // TODO: difference should be well-defined, but more logic is needed to compute\n\n    /**\n     * The smallest bounds that contains this bounds and the point (x,y,z), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addCoordinates(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    withCoordinates: function( x, y, z ) {\n      return new Bounds3(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.min( this.minZ, z ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y ),\n        Math.max( this.maxZ, z )\n      );\n    },\n\n    /**\n     * The smallest bounds that contains this bounds and the input point, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addPoint(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Vector3} point\n     * @returns {Bounds3}\n     */\n    withPoint: function( point ) {\n      return this.withCoordinates( point.x, point.y, point.z );\n    },\n\n    /**\n     * A copy of this bounds, with minX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minX\n     * @returns {Bounds3}\n     */\n    withMinX: function( minX ) {\n      return new Bounds3( minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with minY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minY\n     * @returns {Bounds3}\n     */\n    withMinY: function( minY ) {\n      return new Bounds3( this.minX, minY, this.minZ, this.maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with minZ replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minZ\n     * @returns {Bounds3}\n     */\n    withMinZ: function( minZ ) {\n      return new Bounds3( this.minX, this.minY, minZ, this.maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with maxX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxX\n     * @returns {Bounds3}\n     */\n    withMaxX: function( maxX ) {\n      return new Bounds3( this.minX, this.minY, this.minZ, maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with maxY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxY\n     * @returns {Bounds3}\n     */\n    withMaxY: function( maxY ) {\n      return new Bounds3( this.minX, this.minY, this.minZ, this.maxX, maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with maxZ replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxZ\n     * @returns {Bounds3}\n     */\n    withMaxZ: function( maxZ ) {\n      return new Bounds3( this.minX, this.minY, this.minZ, this.maxX, this.maxY, maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded down to the nearest integer, and the maximum values\n     * rounded up to the nearest integer. This causes the bounds to expand as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundOut(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds3}\n     */\n    roundedOut: function() {\n      return new Bounds3(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.floor( this.minZ ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY ),\n        Math.ceil( this.maxZ )\n      );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded up to the nearest integer, and the maximum values\n     * rounded down to the nearest integer. This causes the bounds to contract as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundIn(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds3}\n     */\n    roundedIn: function() {\n      return new Bounds3(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.ceil( this.minZ ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY ),\n        Math.floor( this.maxZ )\n      );\n    },\n\n    /**\n     * A bounding box (still axis-aligned) that contains the transformed shape of this bounds, applying the matrix as\n     * an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transformed( matrix ).transformed( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the immutable form of the function transform(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Matrix4} matrix\n     * @returns {Bounds3}\n     */\n    transformed: function( matrix ) {\n      return this.copy().transform( matrix );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides by the specified amount.)\n     * @public\n     *\n     * This is the immutable form of the function dilate(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} d\n     * @returns {Bounds3}\n     */\n    dilated: function( d ) {\n      return new Bounds3( this.minX - d, this.minY - d, this.minZ - d, this.maxX + d, this.maxY + d, this.maxZ + d );\n    },\n\n    /**\n     * A bounding box that is expanded horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    dilatedX: function( x ) {\n      return new Bounds3( this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A bounding box that is expanded vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    dilatedY: function( y ) {\n      return new Bounds3( this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * A bounding box that is expanded depth-wise (on the front and back) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    dilatedZ: function( z ) {\n      return new Bounds3( this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides, with different amounts of expansion along each axis.\n     * Will be identical to the bounds returned by calling bounds.dilatedX( x ).dilatedY( y ).dilatedZ( z ).\n     * @public\n     *\n     * This is the immutable form of the function dilateXYZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to dilate horizontally (for each side)\n     * @param {number} y - Amount to dilate vertically (for each side)\n     * @param {number} z - Amount to dilate depth-wise (for each side)\n     * @returns {Bounds3}\n     */\n    dilatedXYZ: function( x, y, z ) {\n      return new Bounds3( this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    },\n\n    /**\n     * A bounding box that is contracted on all sides by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erode(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} amount\n     * @returns {Bounds3}\n     */\n    eroded: function( d ) { return this.dilated( -d ); },\n\n    /**\n     * A bounding box that is contracted horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    erodedX: function( x ) { return this.dilatedX( -x ); },\n\n    /**\n     * A bounding box that is contracted vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    erodedY: function( y ) { return this.dilatedY( -y ); },\n\n    /**\n     * A bounding box that is contracted depth-wise (on the front and back) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    erodedZ: function( z ) { return this.dilatedZ( -z ); },\n\n    /**\n     * A bounding box that is contracted on all sides, with different amounts of contraction along each axis.\n     * @public\n     *\n     * This is the immutable form of the function erodeXYZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to erode horizontally (for each side)\n     * @param {number} y - Amount to erode vertically (for each side)\n     * @param {number} z - Amount to erode depth-wise (for each side)\n     * @returns {Bounds3}\n     */\n    erodedXYZ: function( x, y, z ) { return this.dilatedXYZ( -x, -y, -z ); },\n\n    /**\n     * Our bounds, translated horizontally by x, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    shiftedX: function( x ) {\n      return new Bounds3( this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * Our bounds, translated vertically by y, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    shiftedY: function( y ) {\n      return new Bounds3( this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * Our bounds, translated depth-wise by z, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shiftedZ: function( z ) {\n      return new Bounds3( this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * Our bounds, translated by (x,y,z), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shift(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shifted: function( x, y, z ) {\n      return new Bounds3( this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations\n     *\n     * All mutable operations should call one of the following:\n     *   setMinMax, setMinX, setMinY, setMinZ, setMaxX, setMaxY, setMaxZ\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets each value for this bounds, and returns itself.\n     * @public\n     *\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} minZ\n     * @param {number} maxX\n     * @param {number} maxY\n     * @param {number} maxZ\n     * @returns {Bounds3}\n     */\n    setMinMax: function( minX, minY, minZ, maxX, maxY, maxZ ) {\n      this.minX = minX;\n      this.minY = minY;\n      this.minZ = minZ;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      this.maxZ = maxZ;\n      return this;\n    },\n\n    /**\n     * Sets the value of minX.\n     * @public\n     *\n     * This is the mutable form of the function withMinX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minX\n     * @returns {Bounds3}\n     */\n    setMinX: function( minX ) {\n      this.minX = minX;\n      return this;\n    },\n\n    /**\n     * Sets the value of minY.\n     * @public\n     *\n     * This is the mutable form of the function withMinY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minY\n     * @returns {Bounds3}\n     */\n    setMinY: function( minY ) {\n      this.minY = minY;\n      return this;\n    },\n\n    /**\n     * Sets the value of minZ.\n     * @public\n     *\n     * This is the mutable form of the function withMinZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minZ\n     * @returns {Bounds3}\n     */\n    setMinZ: function( minZ ) {\n      this.minZ = minZ;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxX.\n     * @public\n     *\n     * This is the mutable form of the function withMaxX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxX\n     * @returns {Bounds3}\n     */\n    setMaxX: function( maxX ) {\n      this.maxX = maxX;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxY.\n     * @public\n     *\n     * This is the mutable form of the function withMaxY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxY\n     * @returns {Bounds3}\n     */\n    setMaxY: function( maxY ) {\n      this.maxY = maxY;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxZ.\n     * @public\n     *\n     * This is the mutable form of the function withMaxZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxZ\n     * @returns {Bounds3}\n     */\n    setMaxZ: function( maxZ ) {\n      this.maxZ = maxZ;\n      return this;\n    },\n\n    /**\n     * Sets the values of this bounds to be equal to the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    set: function( bounds ) {\n      return this.setMinMax( bounds.minX, bounds.minY, bounds.minZ, bounds.maxX, bounds.maxY, bounds.maxZ );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function union(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    includeBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.min( this.minZ, bounds.minZ ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY ),\n        Math.max( this.maxZ, bounds.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it is the largest bounds contained both in its original bounds and in the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function intersection(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    constrainBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.max( this.minZ, bounds.minZ ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY ),\n        Math.min( this.maxZ, bounds.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point (x,y,z).\n     * @public\n     *\n     * This is the mutable form of the function withCoordinates(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    addCoordinates: function( x, y, z ) {\n      return this.setMinMax(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.min( this.minZ, z ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y ),\n        Math.max( this.maxZ, z )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point.\n     * @public\n     *\n     * This is the mutable form of the function withPoint(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Vector3} point\n     * @returns {Bounds3}\n     */\n    addPoint: function( point ) {\n      return this.addCoordinates( point.x, point.y, point.z );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries down and the\n     * maximum boundaries up (expanding as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedOut(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds3}\n     */\n    roundOut: function() {\n      return this.setMinMax(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.floor( this.minZ ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY ),\n        Math.ceil( this.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries up and the\n     * maximum boundaries down (contracting as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedIn(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds3}\n     */\n    roundIn: function() {\n      return this.setMinMax(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.ceil( this.minZ ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY ),\n        Math.floor( this.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it would fully contain a transformed version if its previous value, applying the\n     * matrix as an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transform( matrix ).transform( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the mutable form of the function transformed(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Matrix4} matrix\n     * @returns {Bounds3}\n     */\n    transform: function( matrix ) {\n      // do nothing\n      if ( this.isEmpty() ) {\n        return this;\n      }\n\n      // optimization to bail for identity matrices\n      if ( matrix.isIdentity() ) {\n        return this;\n      }\n\n      var minX = Number.POSITIVE_INFINITY;\n      var minY = Number.POSITIVE_INFINITY;\n      var minZ = Number.POSITIVE_INFINITY;\n      var maxX = Number.NEGATIVE_INFINITY;\n      var maxY = Number.NEGATIVE_INFINITY;\n      var maxZ = Number.NEGATIVE_INFINITY;\n\n      // using mutable vector so we don't create excessive instances of Vector2 during this\n      // make sure all 4 corners are inside this transformed bounding box\n      var vector = new dot.Vector3();\n\n      function withIt( vector ) {\n        minX = Math.min( minX, vector.x );\n        minY = Math.min( minY, vector.y );\n        minZ = Math.min( minZ, vector.z );\n        maxX = Math.max( maxX, vector.x );\n        maxY = Math.max( maxY, vector.y );\n        maxZ = Math.max( maxZ, vector.z );\n      }\n\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.minY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.maxY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.minY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.maxY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.minY, this.maxZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.maxY, this.maxZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.minY, this.maxZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.maxY, this.maxZ ) ) );\n      return this.setMinMax( minX, minY, minZ, maxX, maxY, maxZ );\n    },\n\n    /**\n     * Expands this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilated(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds3}\n     */\n    dilate: function( d ) {\n      return this.setMinMax( this.minX - d, this.minY - d, this.minZ - d, this.maxX + d, this.maxY + d, this.maxZ + d );\n    },\n\n    /**\n     * Expands this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    dilateX: function( x ) {\n      return this.setMinMax( this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * Expands this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    dilateY: function( y ) {\n      return this.setMinMax( this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * Expands this bounds depth-wise (front and back) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    dilateZ: function( z ) {\n      return this.setMinMax( this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * Expands this bounds independently along each axis. Will be equal to calling\n     * bounds.dilateX( x ).dilateY( y ).dilateZ( z ).\n     * @public\n     *\n     * This is the mutable form of the function dilatedXYZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    dilateXYZ: function( x, y, z ) {\n      return this.setMinMax( this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    },\n\n    /**\n     * Contracts this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function eroded(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds3}\n     */\n    erode: function( d ) { return this.dilate( -d ); },\n\n    /**\n     * Contracts this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    erodeX: function( x ) { return this.dilateX( -x ); },\n\n    /**\n     * Contracts this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    erodeY: function( y ) { return this.dilateY( -y ); },\n\n    /**\n     * Contracts this bounds depth-wise (front and back) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    erodeZ: function( z ) { return this.dilateZ( -z ); },\n\n    /**\n     * Contracts this bounds independently along each axis. Will be equal to calling\n     * bounds.erodeX( x ).erodeY( y ).erodeZ( z ).\n     * @public\n     *\n     * This is the mutable form of the function erodedXYZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    erodeXYZ: function( x, y, z ) { return this.dilateXYZ( -x, -y, -z ); },\n\n    /**\n     * Translates our bounds horizontally by x.\n     * @public\n     *\n     * This is the mutable form of the function shiftedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    shiftX: function( x ) {\n      return this.setMinMax( this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * Translates our bounds vertically by y.\n     * @public\n     *\n     * This is the mutable form of the function shiftedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    shiftY: function( y ) {\n      return this.setMinMax( this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * Translates our bounds depth-wise by z.\n     * @public\n     *\n     * This is the mutable form of the function shiftedZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shiftZ: function( z ) {\n      return this.setMinMax( this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * Translates our bounds by (x,y,z).\n     * @public\n     *\n     * This is the mutable form of the function shifted(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shift: function( x, y, z ) {\n      return this.setMinMax( this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    }\n  }, {\n    /**\n     * Returns a new Bounds3 object, with the cuboid (3d rectangle) construction with x, y, z, width, height and depth.\n     * @public\n     *\n     * @param {number} x - The minimum value of X for the bounds.\n     * @param {number} y - The minimum value of Y for the bounds.\n     * @param {number} z - The minimum value of Z for the bounds.\n     * @param {number} width - The width (maxX - minX) of the bounds.\n     * @param {number} height - The height (maxY - minY) of the bounds.\n     * @param {number} depth - The depth (maxZ - minZ) of the bounds.\n     * @returns {Bounds3}\n     */\n    cuboid: function( x, y, z, width, height, depth ) {\n      return new Bounds3( x, y, z, x + width, y + height, z + depth );\n    },\n\n    /**\n     * Returns a new Bounds3 object that only contains the specified point (x,y,z). Useful for being dilated to form a\n     * bounding box around a point. Note that the bounds will not be \"empty\" as it contains (x,y,z), but it will have\n     * zero area.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    point: function( x, y, z ) {\n      return new Bounds3( x, y, z, x, y, z );\n    }\n  } );\n\n  Poolable.mixin( Bounds3, {\n    defaultFactory: function() { return Bounds3.NOTHING.copy(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( minX, minY, minZ, maxX, maxY, maxZ ) {\n        if ( pool.length ) {\n          return pool.pop().setMinMax( minX, minY, minZ, maxX, maxY, maxZ );\n        }\n        else {\n          return new Bounds3( minX, minY, minZ, maxX, maxY, maxZ );\n        }\n      };\n    }\n  } );\n\n  /**\n   * A contant Bounds3 with minimums = $\\infty$, maximums = $-\\infty$, so that it represents \"no bounds whatsoever\".\n   * @public\n   *\n   * This allows us to take the union (union/includeBounds) of this and any other Bounds3 to get the other bounds back,\n   * e.g. Bounds3.NOTHING.union( bounds ).equals( bounds ). This object naturally serves as the base case as a union of\n   * zero bounds objects.\n   *\n   * Additionally, intersections with NOTHING will always return a Bounds3 equivalent to NOTHING.\n   *\n   * @constant {Bounds3} NOTHING\n   */\n  Bounds3.NOTHING = new Bounds3( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY );\n\n  /**\n   * A contant Bounds3 with minimums = $-\\infty$, maximums = $\\infty$, so that it represents \"all bounds\".\n   * @public\n   *\n   * This allows us to take the intersection (intersection/constrainBounds) of this and any other Bounds3 to get the\n   * other bounds back, e.g. Bounds3.EVERYTHING.intersection( bounds ).equals( bounds ). This object naturally serves as\n   * the base case as an intersection of zero bounds objects.\n   *\n   * Additionally, unions with EVERYTHING will always return a Bounds3 equivalent to EVERYTHING.\n   *\n   * @constant {Bounds3} EVERYTHING\n   */\n  Bounds3.EVERYTHING = new Bounds3( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY );\n\n  return Bounds3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A complex number fhat is immutable. Extends Vector2 for many common operations that need to treat the complex number\n * as a vector $\\begin{bmatrix} a \\\\ b \\end{bmatrix}$ for the real number $a+bi$.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n * @author Chris Malley\n */\n\ndefine( 'DOT/Complex',['require','DOT/dot','PHET_CORE/inherit','DOT/Vector2'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Vector2 = require( 'DOT/Vector2' );\n\n  /**\n   * Creates a complex number, that has both a real and imaginary part.\n   * @constructor\n   * @public\n   *\n   * @param {number} real - The real part. For a complex number $a+bi$, this should be $a$.\n   * @param {number} imaginary - The imaginary part. For a complex number $a+bi$, this should be $b$.\n   */\n  function Complex( real, imaginary ) {\n    Vector2.call( this, real, imaginary );\n\n    // @public {number} - The real part. For a complex number $a+bi$, this is $a$.\n    this.real = real;\n\n    // @public {number} - The imaginary part. For a complex number $a+bi$, this is $b$.\n    this.imaginary = imaginary;\n  }\n\n  dot.register( 'Complex', Complex );\n\n  // Inheriting Vector2 for now since many times we may want to treat the complex number as a vector\n  // ideally, we should have Vector2-likeness be a mixin?\n  // we also inherit the immutable form since we add 'real' and 'imaginary' properties,\n  // without adding extra logic to mutators in Vector2\n  inherit( Vector2.Immutable, Complex, {\n    /**\n     * The phase / argument of the complex number.\n     * @public\n     *\n     * @returns {number}\n     */\n    phase: Vector2.prototype.angle,\n\n    /**\n     * Complex multiplication.\n     * @public\n     *\n     * @param {Complex} c\n     * @returns {Complex}\n     */\n    times: function( c ) {\n      return new Complex( this.real * c.real - this.imaginary * c.imaginary, this.real * c.imaginary + this.imaginary * c.real );\n    },\n\n    /**\n     * Complex division.\n     * @public\n     *\n     * @param {Complex} c\n     * @returns {Complex}\n     */\n    dividedBy: function( c ) {\n      var cMag = c.magnitudeSquared();\n      return new Complex(\n        ( this.real * c.real + this.imaginary * c.imaginary ) / cMag,\n        ( this.imaginary * c.real - this.real * c.imaginary ) / cMag\n      );\n    },\n\n    /**\n     * Square root.\n     * @public\n     *\n     * @returns {Complex}\n     */\n    sqrt: function() {\n      var mag = this.magnitude();\n      return new Complex( Math.sqrt( ( mag + this.real ) / 2 ),\n        ( this.imaginary >= 0 ? 1 : -1 ) * Math.sqrt( ( mag - this.real ) / 2 ) );\n    },\n\n    /**\n     * Complex conjugate.\n     * @public\n     *\n     * @returns {Complex}\n     */\n    conjugate: function() {\n      return new Complex( this.real, -this.imaginary );\n    },\n\n    /**\n     * Takes e to the power of this complex number. $e^{a+bi}=e^a\\cos b + i\\sin b$.\n     * @public\n     *\n     * @returns {Complex}\n     */\n    exponentiated: function() {\n      return Complex.createPolar( Math.exp( this.real ), this.imaginary );\n    },\n\n    /**\n     * Debugging string for the complex number (provides real and imaginary parts).\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Complex(' + this.x + ', ' + this.y + ')';\n    }\n  }, {\n    /**\n     * Constructs a complex number from just the real part (assuming the imaginary part is 0).\n     * @public\n     *\n     * @param {number} real\n     * @returns {Complex}\n     */\n    real: function( real ) {\n      return new Complex( real, 0 );\n    },\n\n    /**\n     * Constructs a complex number from just the imaginary part (assuming the real part is 0).\n     * @public\n     *\n     * @param {number} imaginary\n     * @returns {Complex}\n     */\n    imaginary: function( imaginary ) {\n      return new Complex( 0, imaginary );\n    },\n\n    /**\n     * Constructs a complex number from the polar form. For a magnitude $r$ and phase $\\varphi$, this will be\n     * $\\cos\\varphi+i r\\sin\\varphi$.\n     * @public\n     *\n     * @param {number} magnitude\n     * @param {number} phase\n     * @returns {Complex}\n     */\n    createPolar: function( magnitude, phase ) {\n      return new Complex( magnitude * Math.cos( phase ), magnitude * Math.sin( phase ) );\n    }\n  } );\n\n  /**\n   * Immutable constant $0$.\n   * @public\n   *\n   * @constant {Complex} ZERO\n   */\n  Complex.ZERO = new Complex( 0, 0 );\n\n  /**\n   * Immutable constant $1$.\n   * @public\n   *\n   * @constant {Complex} ONE\n   */\n  Complex.ONE = new Complex( 1, 0 );\n\n  /**\n   * Immutable constant $i$, the imaginary unit.\n   * @public\n   *\n   * @constant {Complex} ONE\n   */\n  Complex.I = new Complex( 0, 1 );\n\n  return Complex;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Construction of 2D convex hulls from a list of points.\n *\n * For example:\n * #begin canvasExample grahamScan 256x128\n * #on\n * var points = _.range( 50 ).map( function() {\n *   return new dot.Vector2( 5 + ( 256 - 10 ) * Math.random(), 5 + ( 128 - 10 ) * Math.random() );\n * } );\n * var hullPoints = dot.ConvexHull2.grahamScan( points, false );\n * #off\n * context.beginPath();\n * hullPoints.forEach( function( point ) {\n *   context.lineTo( point.x, point.y );\n * } );\n * context.closePath();\n * context.fillStyle = '#eee';\n * context.fill();\n * context.strokeStyle = '#f00';\n * context.stroke();\n *\n * context.beginPath();\n * points.forEach( function( point ) {\n *   context.arc( point.x, point.y, 2, 0, Math.PI * 2, false );\n *   context.closePath();\n * } );\n * context.fillStyle = '#00f';\n * context.fill();\n * #end canvasExample\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/ConvexHull2',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  // counter-clockwise turn if > 0, clockwise turn if < 0, collinear if === 0.\n  function ccw( p1, p2, p3 ) {\n    return p2.minus( p1 ).crossScalar( p3.minus( p1 ) );\n  }\n\n  var ConvexHull2 = {\n    // TODO testing: all collinear, multiple ways of having same angle, etc.\n\n    /**\n     * Given multiple points, this performs a Graham Scan (http://en.wikipedia.org/wiki/Graham_scan) to identify an\n     * ordered list of points which define the minimal polygon that contains all of the points.\n     * @public\n     *\n     * @param {Array.<Vector2>} points\n     * @param {boolean} includeCollinear - If a point is along an edge of the convex hull (not at one of its vertices),\n     *                                     should it be included?\n     * @returns {Array.<Vector2>}\n     */\n    grahamScan: function( points, includeCollinear ) {\n      if ( points.length <= 2 ) {\n        return points;\n      }\n\n      // find the point 'p' with the lowest y value\n      var minY = Number.POSITIVE_INFINITY;\n      var p = null;\n      _.each( points, function( point ) {\n        if ( point.y <= minY ) {\n          // if two points have the same y value, take the one with the lowest x\n          if ( point.y === minY && p ) {\n            if ( point.x < p.x ) {\n              p = point;\n            }\n          }\n          else {\n            minY = point.y;\n            p = point;\n          }\n        }\n      } );\n\n      // sorts the points by their angle. Between 0 and PI\n      points = _.sortBy( points, function( point ) {\n        return point.minus( p ).angle();\n      } );\n\n      // remove p from points (relies on the above statement making a defensive copy)\n      points.splice( _.indexOf( points, p ), 1 );\n\n      // our result array\n      var result = [ p ];\n\n      _.each( points, function( point ) {\n        // ignore points equal to our starting point\n        if ( p.x === point.x && p.y === point.y ) { return; }\n\n        function isRightTurn() {\n          if ( result.length < 2 ) {\n            return false;\n          }\n          var cross = ccw( result[ result.length - 2 ], result[ result.length - 1 ], point );\n          return includeCollinear ? ( cross < 0 ) : ( cross <= 0 );\n        }\n\n        while ( isRightTurn() ) {\n          result.pop();\n        }\n        result.push( point );\n      } );\n\n      return result;\n    }\n  };\n\n  dot.register( 'ConvexHull2', ConvexHull2 );\n\n  return ConvexHull2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic width and height, like a Bounds2 but without the location defined.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Dimension2',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  require( 'DOT/Bounds2' );\n\n  /**\n   * Creates a 2-dimensional size with a width and height\n   * @constructor\n   * @public\n   *\n   * @param {number} width\n   * @param {number} height\n   */\n  function Dimension2( width, height ) {\n    // @public {number} - Width of the dimension\n    this.width = width;\n\n    // @public {number} - Height of the dimension\n    this.height = height;\n  }\n\n  dot.register( 'Dimension2', Dimension2 );\n\n  inherit( Object, Dimension2, {\n    /**\n     * Debugging string for the dimension.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return '[' + this.width + 'w, ' + this.height + 'h]';\n    },\n\n    /**\n     * Sets this dimension to be a copy of another dimension.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this dimension, in addition to returning\n     * this dimension itself.\n     *\n     * @param {Dimension2} dimension\n     * @returns {Dimension2}\n     */\n    set: function( dimension ) {\n      this.width = dimension.width;\n      this.height = dimension.height;\n      return this;\n    },\n\n    /**\n     * Sets the width of the dimension, returning this.\n     * @public\n     *\n     * @param {number} width\n     * @returns {Dimension2}\n     */\n    setWidth: function( width ) {\n      this.width = width;\n      return this;\n    },\n\n    /**\n     * Sets the height of the dimension, returning this.\n     * @public\n     *\n     * @param {number} height\n     * @returns {Dimension2}\n     */\n    setHeight: function( height ) {\n      this.height = height;\n      return this;\n    },\n\n    /**\n     * Creates a copy of this dimension, or if a dimension is passed in, set that dimension's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a dimension is provided. This will return a new dimension,\n     * and will not modify this dimension.\n     *\n     * @param {Dimension2} [dimension] - If not provided, creates a new Vector2 with filled in values. Otherwise, fills\n     *                                   in the values of the provided dimension so that it equals this dimension.\n     * @returns {Dimension2}\n     */\n    copy: function( dimension ) {\n      if ( dimension ) {\n        return dimension.set( this );\n      }\n      else {\n        return new Dimension2( this.width, this.height );\n      }\n    },\n\n    /**\n     * Creates a Bounds2 from this dimension based on passing in the minimum (top-left) corner as (x,y).\n     * @public\n     *\n     * @param {number} [x] - Minimum x coordinate of the bounds, or 0 if not provided.\n     * @param {number} [y] - Minimum y coordinate of the bounds, or 0 if not provided.\n     * @returns {Bounds2}\n     */\n    toBounds: function( x, y ) {\n      x = x !== undefined ? x : 0;\n      y = y !== undefined ? y : 0;\n      return new dot.Bounds2( x, y, this.width + x, this.height + y );\n    },\n\n    /**\n     * Exact equality comparison between this dimension and another dimension.\n     * @public\n     *\n     * @param {Dimension2} other\n     * @returns {boolean} - Whether the two dimensions have equal width and height\n     */\n    equals: function( other ) {\n      return this.width === other.width && this.height === other.height;\n    }\n  } );\n\n  return Dimension2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Eigensystem decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * Eigenvalues and eigenvectors of a real matrix.\n * <P>\n * If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is\n * diagonal and the eigenvector matrix V is orthogonal.\n * I.e. A = V.times(D.times(V.transpose())) and\n * V.times(V.transpose()) equals the identity matrix.\n * <P>\n * If A is not symmetric, then the eigenvalue matrix D is block diagonal\n * with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,\n * lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The\n * columns of V represent the eigenvectors in the sense that A*V = V*D,\n * i.e. A.times(V) equals V.times(D).  The matrix V may be badly\n * conditioned, or even singular, so the validity of the equation\n * A = V*D*inverse(V) depends upon V.cond().\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/EigenvalueDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  function EigenvalueDecomposition( matrix ) {\n    var i;\n    var j;\n\n    var A = matrix.entries;\n    this.n = matrix.getColumnDimension(); // Row and column dimension (square matrix).\n    var n = this.n;\n    this.V = new Float32Array( n * n ); // Array for internal storage of eigenvectors.\n\n    // Arrays for internal storage of eigenvalues.\n    this.d = new Float32Array( n );\n    this.e = new Float32Array( n );\n\n    this.issymmetric = true;\n    for ( j = 0; (j < n) && this.issymmetric; j++ ) {\n      for ( i = 0; (i < n) && this.issymmetric; i++ ) {\n        this.issymmetric = (A[ i * this.n + j ] === A[ j * this.n + i ]);\n      }\n    }\n\n    if ( this.issymmetric ) {\n      for ( i = 0; i < n; i++ ) {\n        for ( j = 0; j < n; j++ ) {\n          this.V[ i * this.n + j ] = A[ i * this.n + j ];\n        }\n      }\n\n      // Tridiagonalize.\n      this.tred2();\n\n      // Diagonalize.\n      this.tql2();\n\n    }\n    else {\n      this.H = new Float32Array( n * n ); // Array for internal storage of nonsymmetric Hessenberg form.\n      this.ort = new Float32Array( n ); // // Working storage for nonsymmetric algorithm.\n\n      for ( j = 0; j < n; j++ ) {\n        for ( i = 0; i < n; i++ ) {\n          this.H[ i * this.n + j ] = A[ i * this.n + j ];\n        }\n      }\n\n      // Reduce to Hessenberg form.\n      this.orthes();\n\n      // Reduce Hessenberg to real Schur form.\n      this.hqr2();\n    }\n  }\n\n  dot.register( 'EigenvalueDecomposition', EigenvalueDecomposition );\n\n  EigenvalueDecomposition.prototype = {\n    constructor: EigenvalueDecomposition,\n\n    // Return the eigenvector matrix\n    getV: function() {\n      return this.V.copy();\n    },\n\n    // {Array} Return the real parts of the eigenvalues\n    getRealEigenvalues: function() {\n      return this.d;\n    },\n\n    // {Array} Return the imaginary parts of the eigenvalues\n    getImagEigenvalues: function() {\n      return this.e;\n    },\n\n    // Return the block diagonal eigenvalue matrix\n    getD: function() {\n      var n = this.n;\n      var d = this.d;\n      var e = this.e;\n\n      var X = new dot.Matrix( n, n );\n      var D = X.entries;\n      for ( var i = 0; i < n; i++ ) {\n        for ( var j = 0; j < n; j++ ) {\n          D[ i * this.n + j ] = 0.0;\n        }\n        D[ i * this.n + i ] = d[ i ];\n        if ( e[ i ] > 0 ) {\n          D[ i * this.n + i + 1 ] = e[ i ];\n        }\n        else if ( e[ i ] < 0 ) {\n          D[ i * this.n + i - 1 ] = e[ i ];\n        }\n      }\n      return X;\n    },\n\n    // Symmetric Householder reduction to tridiagonal form.\n    tred2: function() {\n      var n = this.n;\n      var V = this.V;\n      var d = this.d;\n      var e = this.e;\n      var i;\n      var j;\n      var k;\n      var f;\n      var g;\n      var h;\n\n      //  This is derived from the Algol procedures tred2 by\n      //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n      //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutine in EISPACK.\n\n      for ( j = 0; j < n; j++ ) {\n        d[ j ] = V[ (n - 1) * n + j ];\n      }\n\n      // Householder reduction to tridiagonal form.\n\n      for ( i = n - 1; i > 0; i-- ) {\n\n        // Scale to avoid under/overflow.\n\n        var scale = 0.0;\n        h = 0.0;\n        for ( k = 0; k < i; k++ ) {\n          scale = scale + Math.abs( d[ k ] );\n        }\n        if ( scale === 0.0 ) {\n          e[ i ] = d[ i - 1 ];\n          for ( j = 0; j < i; j++ ) {\n            d[ j ] = V[ (i - 1) * n + j ];\n            V[ i * this.n + j ] = 0.0;\n            V[ j * this.n + i ] = 0.0;\n          }\n        }\n        else {\n\n          // Generate Householder vector.\n\n          for ( k = 0; k < i; k++ ) {\n            d[ k ] /= scale;\n            h += d[ k ] * d[ k ];\n          }\n          f = d[ i - 1 ];\n          g = Math.sqrt( h );\n          if ( f > 0 ) {\n            g = -g;\n          }\n          e[ i ] = scale * g;\n          h = h - f * g;\n          d[ i - 1 ] = f - g;\n          for ( j = 0; j < i; j++ ) {\n            e[ j ] = 0.0;\n          }\n\n          // Apply similarity transformation to remaining columns.\n\n          for ( j = 0; j < i; j++ ) {\n            f = d[ j ];\n            V[ j * this.n + i ] = f;\n            g = e[ j ] + V[ j * n + j ] * f;\n            for ( k = j + 1; k <= i - 1; k++ ) {\n              g += V[ k * n + j ] * d[ k ];\n              e[ k ] += V[ k * n + j ] * f;\n            }\n            e[ j ] = g;\n          }\n          f = 0.0;\n          for ( j = 0; j < i; j++ ) {\n            e[ j ] /= h;\n            f += e[ j ] * d[ j ];\n          }\n          var hh = f / (h + h);\n          for ( j = 0; j < i; j++ ) {\n            e[ j ] -= hh * d[ j ];\n          }\n          for ( j = 0; j < i; j++ ) {\n            f = d[ j ];\n            g = e[ j ];\n            for ( k = j; k <= i - 1; k++ ) {\n              V[ k * n + j ] -= (f * e[ k ] + g * d[ k ]);\n            }\n            d[ j ] = V[ (i - 1) * n + j ];\n            V[ i * this.n + j ] = 0.0;\n          }\n        }\n        d[ i ] = h;\n      }\n\n      // Accumulate transformations.\n\n      for ( i = 0; i < n - 1; i++ ) {\n        V[ (n - 1) * n + i ] = V[ i * n + i ];\n        V[ i * n + i ] = 1.0;\n        h = d[ i + 1 ];\n        if ( h !== 0.0 ) {\n          for ( k = 0; k <= i; k++ ) {\n            d[ k ] = V[ k * n + (i + 1) ] / h;\n          }\n          for ( j = 0; j <= i; j++ ) {\n            g = 0.0;\n            for ( k = 0; k <= i; k++ ) {\n              g += V[ k * n + (i + 1) ] * V[ k * n + j ];\n            }\n            for ( k = 0; k <= i; k++ ) {\n              V[ k * n + j ] -= g * d[ k ];\n            }\n          }\n        }\n        for ( k = 0; k <= i; k++ ) {\n          V[ k * n + (i + 1) ] = 0.0;\n        }\n      }\n      for ( j = 0; j < n; j++ ) {\n        d[ j ] = V[ (n - 1) * n + j ];\n        V[ (n - 1) * n + j ] = 0.0;\n      }\n      V[ (n - 1) * n + (n - 1) ] = 1.0;\n      e[ 0 ] = 0.0;\n    },\n\n    // Symmetric tridiagonal QL algorithm.\n    tql2: function() {\n      var n = this.n;\n      var V = this.V;\n      var d = this.d;\n      var e = this.e;\n      var i;\n      var j;\n      var k;\n      var l;\n      var g;\n      var p;\n      var iter;\n\n      //  This is derived from the Algol procedures tql2, by\n      //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n      //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutine in EISPACK.\n\n      for ( i = 1; i < n; i++ ) {\n        e[ i - 1 ] = e[ i ];\n      }\n      e[ n - 1 ] = 0.0;\n\n      var f = 0.0;\n      var tst1 = 0.0;\n      var eps = Math.pow( 2.0, -52.0 );\n      for ( l = 0; l < n; l++ ) {\n\n        // Find small subdiagonal element\n\n        tst1 = Math.max( tst1, Math.abs( d[ l ] ) + Math.abs( e[ l ] ) );\n        var m = l;\n        while ( m < n ) {\n          if ( Math.abs( e[ m ] ) <= eps * tst1 ) {\n            break;\n          }\n          m++;\n        }\n\n        // If m === l, d[l] is an eigenvalue,\n        // otherwise, iterate.\n\n        if ( m > l ) {\n          iter = 0;\n          do {\n            iter = iter + 1;  // (Could check iteration count here.)\n\n            // Compute implicit shift\n\n            g = d[ l ];\n            p = (d[ l + 1 ] - g) / (2.0 * e[ l ]);\n            var r = dot.Matrix.hypot( p, 1.0 );\n            if ( p < 0 ) {\n              r = -r;\n            }\n            d[ l ] = e[ l ] / (p + r);\n            d[ l + 1 ] = e[ l ] * (p + r);\n            var dl1 = d[ l + 1 ];\n            var h = g - d[ l ];\n            for ( i = l + 2; i < n; i++ ) {\n              d[ i ] -= h;\n            }\n            f = f + h;\n\n            // Implicit QL transformation.\n\n            p = d[ m ];\n            var c = 1.0;\n            var c2 = c;\n            var c3 = c;\n            var el1 = e[ l + 1 ];\n            var s = 0.0;\n            var s2 = 0.0;\n            for ( i = m - 1; i >= l; i-- ) {\n              c3 = c2;\n              c2 = c;\n              s2 = s;\n              g = c * e[ i ];\n              h = c * p;\n              r = dot.Matrix.hypot( p, e[ i ] );\n              e[ i + 1 ] = s * r;\n              s = e[ i ] / r;\n              c = p / r;\n              p = c * d[ i ] - s * g;\n              d[ i + 1 ] = h + s * (c * g + s * d[ i ]);\n\n              // Accumulate transformation.\n\n              for ( k = 0; k < n; k++ ) {\n                h = V[ k * n + (i + 1) ];\n                V[ k * n + (i + 1) ] = s * V[ k * n + i ] + c * h;\n                V[ k * n + i ] = c * V[ k * n + i ] - s * h;\n              }\n            }\n            p = -s * s2 * c3 * el1 * e[ l ] / dl1;\n            e[ l ] = s * p;\n            d[ l ] = c * p;\n\n            // Check for convergence.\n\n          } while ( Math.abs( e[ l ] ) > eps * tst1 );\n        }\n        d[ l ] = d[ l ] + f;\n        e[ l ] = 0.0;\n      }\n\n      // Sort eigenvalues and corresponding vectors.\n\n      for ( i = 0; i < n - 1; i++ ) {\n        k = i;\n        p = d[ i ];\n        for ( j = i + 1; j < n; j++ ) {\n          if ( d[ j ] < p ) {\n            k = j;\n            p = d[ j ];\n          }\n        }\n        if ( k !== i ) {\n          d[ k ] = d[ i ];\n          d[ i ] = p;\n          for ( j = 0; j < n; j++ ) {\n            p = V[ j * this.n + i ];\n            V[ j * this.n + i ] = V[ j * n + k ];\n            V[ j * n + k ] = p;\n          }\n        }\n      }\n    },\n\n    // Nonsymmetric reduction to Hessenberg form.\n    orthes: function() {\n      var n = this.n;\n      var V = this.V;\n      var H = this.H;\n      var ort = this.ort;\n      var i;\n      var j;\n      var m;\n      var f;\n      var g;\n\n      //  This is derived from the Algol procedures orthes and ortran,\n      //  by Martin and Wilkinson, Handbook for Auto. Comp.,\n      //  Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutines in EISPACK.\n\n      var low = 0;\n      var high = n - 1;\n\n      for ( m = low + 1; m <= high - 1; m++ ) {\n\n        // Scale column.\n\n        var scale = 0.0;\n        for ( i = m; i <= high; i++ ) {\n          scale = scale + Math.abs( H[ i * n + (m - 1) ] );\n        }\n        if ( scale !== 0.0 ) {\n\n          // Compute Householder transformation.\n\n          var h = 0.0;\n          for ( i = high; i >= m; i-- ) {\n            ort[ i ] = H[ i * n + (m - 1) ] / scale;\n            h += ort[ i ] * ort[ i ];\n          }\n          g = Math.sqrt( h );\n          if ( ort[ m ] > 0 ) {\n            g = -g;\n          }\n          h = h - ort[ m ] * g;\n          ort[ m ] = ort[ m ] - g;\n\n          // Apply Householder similarity transformation\n          // H = (I-u*u'/h)*H*(I-u*u')/h)\n\n          for ( j = m; j < n; j++ ) {\n            f = 0.0;\n            for ( i = high; i >= m; i-- ) {\n              f += ort[ i ] * H[ i * this.n + j ];\n            }\n            f = f / h;\n            for ( i = m; i <= high; i++ ) {\n              H[ i * this.n + j ] -= f * ort[ i ];\n            }\n          }\n\n          for ( i = 0; i <= high; i++ ) {\n            f = 0.0;\n            for ( j = high; j >= m; j-- ) {\n              f += ort[ j ] * H[ i * this.n + j ];\n            }\n            f = f / h;\n            for ( j = m; j <= high; j++ ) {\n              H[ i * this.n + j ] -= f * ort[ j ];\n            }\n          }\n          ort[ m ] = scale * ort[ m ];\n          H[ m * n + (m - 1) ] = scale * g;\n        }\n      }\n\n      // Accumulate transformations (Algol's ortran).\n\n      for ( i = 0; i < n; i++ ) {\n        for ( j = 0; j < n; j++ ) {\n          V[ i * this.n + j ] = (i === j ? 1.0 : 0.0);\n        }\n      }\n\n      for ( m = high - 1; m >= low + 1; m-- ) {\n        if ( H[ m * n + (m - 1) ] !== 0.0 ) {\n          for ( i = m + 1; i <= high; i++ ) {\n            ort[ i ] = H[ i * n + (m - 1) ];\n          }\n          for ( j = m; j <= high; j++ ) {\n            g = 0.0;\n            for ( i = m; i <= high; i++ ) {\n              g += ort[ i ] * V[ i * this.n + j ];\n            }\n            // Double division avoids possible underflow\n            g = (g / ort[ m ]) / H[ m * n + (m - 1) ];\n            for ( i = m; i <= high; i++ ) {\n              V[ i * this.n + j ] += g * ort[ i ];\n            }\n          }\n        }\n      }\n    },\n\n    // Complex scalar division.\n    cdiv: function( xr, xi, yr, yi ) {\n      var r;\n      var d;\n      if ( Math.abs( yr ) > Math.abs( yi ) ) {\n        r = yi / yr;\n        d = yr + r * yi;\n        this.cdivr = (xr + r * xi) / d;\n        this.cdivi = (xi - r * xr) / d;\n      }\n      else {\n        r = yr / yi;\n        d = yi + r * yr;\n        this.cdivr = (r * xr + xi) / d;\n        this.cdivi = (r * xi - xr) / d;\n      }\n    },\n\n    // Nonsymmetric reduction from Hessenberg to real Schur form.\n    hqr2: function() {\n      var n;\n      var V = this.V;\n      var d = this.d;\n      var e = this.e;\n      var H = this.H;\n      var i;\n      var j;\n      var k;\n      var l;\n      var m;\n      var iter;\n\n      //  This is derived from the Algol procedure hqr2,\n      //  by Martin and Wilkinson, Handbook for Auto. Comp.,\n      //  Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutine in EISPACK.\n\n      // Initialize\n\n      var nn = this.n;\n      n = nn - 1;\n      var low = 0;\n      var high = nn - 1;\n      var eps = Math.pow( 2.0, -52.0 );\n      var exshift = 0.0;\n      var p = 0;\n      var q = 0;\n      var r = 0;\n      var s = 0;\n      var z = 0;\n      var t;\n      var w;\n      var x;\n      var y;\n\n      // Store roots isolated by balanc and compute matrix norm\n\n      var norm = 0.0;\n      for ( i = 0; i < nn; i++ ) {\n        if ( i < low || i > high ) {\n          d[ i ] = H[ i * n + i ];\n          e[ i ] = 0.0;\n        }\n        for ( j = Math.max( i - 1, 0 ); j < nn; j++ ) {\n          norm = norm + Math.abs( H[ i * this.n + j ] );\n        }\n      }\n\n      // Outer loop over eigenvalue index\n\n      iter = 0;\n      while ( n >= low ) {\n\n        // Look for single small sub-diagonal element\n\n        l = n;\n        while ( l > low ) {\n          s = Math.abs( H[ (l - 1) * n + (l - 1) ] ) + Math.abs( H[ l * n + l ] );\n          if ( s === 0.0 ) {\n            s = norm;\n          }\n          if ( Math.abs( H[ l * n + (l - 1) ] ) < eps * s ) {\n            break;\n          }\n          l--;\n        }\n\n        // Check for convergence\n        // One root found\n\n        if ( l === n ) {\n          H[ n * n + n ] = H[ n * n + n ] + exshift;\n          d[ n ] = H[ n * n + n ];\n          e[ n ] = 0.0;\n          n--;\n          iter = 0;\n\n          // Two roots found\n\n        }\n        else if ( l === n - 1 ) {\n          w = H[ n * n + n - 1 ] * H[ (n - 1) * n + n ];\n          p = (H[ (n - 1) * n + (n - 1) ] - H[ n * n + n ]) / 2.0;\n          q = p * p + w;\n          z = Math.sqrt( Math.abs( q ) );\n          H[ n * n + n ] = H[ n * n + n ] + exshift;\n          H[ (n - 1) * n + (n - 1) ] = H[ (n - 1) * n + (n - 1) ] + exshift;\n          x = H[ n * n + n ];\n\n          // Real pair\n\n          if ( q >= 0 ) {\n            if ( p >= 0 ) {\n              z = p + z;\n            }\n            else {\n              z = p - z;\n            }\n            d[ n - 1 ] = x + z;\n            d[ n ] = d[ n - 1 ];\n            if ( z !== 0.0 ) {\n              d[ n ] = x - w / z;\n            }\n            e[ n - 1 ] = 0.0;\n            e[ n ] = 0.0;\n            x = H[ n * n + n - 1 ];\n            s = Math.abs( x ) + Math.abs( z );\n            p = x / s;\n            q = z / s;\n            r = Math.sqrt( p * p + q * q );\n            p = p / r;\n            q = q / r;\n\n            // Row modification\n\n            for ( j = n - 1; j < nn; j++ ) {\n              z = H[ (n - 1) * n + j ];\n              H[ (n - 1) * n + j ] = q * z + p * H[ n * n + j ];\n              H[ n * n + j ] = q * H[ n * n + j ] - p * z;\n            }\n\n            // Column modification\n\n            for ( i = 0; i <= n; i++ ) {\n              z = H[ i * n + n - 1 ];\n              H[ i * n + n - 1 ] = q * z + p * H[ i * n + n ];\n              H[ i * n + n ] = q * H[ i * n + n ] - p * z;\n            }\n\n            // Accumulate transformations\n\n            for ( i = low; i <= high; i++ ) {\n              z = V[ i * n + n - 1 ];\n              V[ i * n + n - 1 ] = q * z + p * V[ i * n + n ];\n              V[ i * n + n ] = q * V[ i * n + n ] - p * z;\n            }\n\n            // Complex pair\n\n          }\n          else {\n            d[ n - 1 ] = x + p;\n            d[ n ] = x + p;\n            e[ n - 1 ] = z;\n            e[ n ] = -z;\n          }\n          n = n - 2;\n          iter = 0;\n\n          // No convergence yet\n\n        }\n        else {\n\n          // Form shift\n\n          x = H[ n * n + n ];\n          y = 0.0;\n          w = 0.0;\n          if ( l < n ) {\n            y = H[ (n - 1) * n + (n - 1) ];\n            w = H[ n * n + n - 1 ] * H[ (n - 1) * n + n ];\n          }\n\n          // Wilkinson's original ad hoc shift\n\n          if ( iter === 10 ) {\n            exshift += x;\n            for ( i = low; i <= n; i++ ) {\n              H[ i * n + i ] -= x;\n            }\n            s = Math.abs( H[ n * n + n - 1 ] ) + Math.abs( H[ (n - 1) * n + n - 2 ] );\n            x = y = 0.75 * s;\n            w = -0.4375 * s * s;\n          }\n\n          // MATLAB's new ad hoc shift\n\n          if ( iter === 30 ) {\n            s = (y - x) / 2.0;\n            s = s * s + w;\n            if ( s > 0 ) {\n              s = Math.sqrt( s );\n              if ( y < x ) {\n                s = -s;\n              }\n              s = x - w / ((y - x) / 2.0 + s);\n              for ( i = low; i <= n; i++ ) {\n                H[ i * n + i ] -= s;\n              }\n              exshift += s;\n              x = y = w = 0.964;\n            }\n          }\n\n          iter = iter + 1;   // (Could check iteration count here.)\n\n          // Look for two consecutive small sub-diagonal elements\n\n          m = n - 2;\n          while ( m >= l ) {\n            z = H[ m * n + m ];\n            r = x - z;\n            s = y - z;\n            p = (r * s - w) / H[ (m + 1) * n + m ] + H[ m * n + m + 1 ];\n            q = H[ (m + 1) * n + m + 1 ] - z - r - s;\n            r = H[ (m + 2) * n + m + 1 ];\n            s = Math.abs( p ) + Math.abs( q ) + Math.abs( r );\n            p = p / s;\n            q = q / s;\n            r = r / s;\n            if ( m === l ) {\n              break;\n            }\n            if ( Math.abs( H[ m * n + (m - 1) ] ) * (Math.abs( q ) + Math.abs( r )) <\n                 eps * (Math.abs( p ) * (Math.abs( H[ (m - 1) * n + m - 1 ] ) + Math.abs( z ) +\n                                         Math.abs( H[ (m + 1) * n + m + 1 ] ))) ) {\n              break;\n            }\n            m--;\n          }\n\n          for ( i = m + 2; i <= n; i++ ) {\n            H[ i * n + i - 2 ] = 0.0;\n            if ( i > m + 2 ) {\n              H[ i * n + i - 3 ] = 0.0;\n            }\n          }\n\n          // Double QR step involving rows l:n and columns m:n\n\n          for ( k = m; k <= n - 1; k++ ) {\n            var notlast = (k !== n - 1);\n            if ( k !== m ) {\n              p = H[ k * n + k - 1 ];\n              q = H[ (k + 1) * n + k - 1 ];\n              r = (notlast ? H[ (k + 2) * n + k - 1 ] : 0.0);\n              x = Math.abs( p ) + Math.abs( q ) + Math.abs( r );\n              if ( x !== 0.0 ) {\n                p = p / x;\n                q = q / x;\n                r = r / x;\n              }\n            }\n            if ( x === 0.0 ) {\n              break;\n            }\n            s = Math.sqrt( p * p + q * q + r * r );\n            if ( p < 0 ) {\n              s = -s;\n            }\n            if ( s !== 0 ) {\n              if ( k !== m ) {\n                H[ k * n + k - 1 ] = -s * x;\n              }\n              else if ( l !== m ) {\n                H[ k * n + k - 1 ] = -H[ k * n + k - 1 ];\n              }\n              p = p + s;\n              x = p / s;\n              y = q / s;\n              z = r / s;\n              q = q / p;\n              r = r / p;\n\n              // Row modification\n\n              for ( j = k; j < nn; j++ ) {\n                p = H[ k * n + j ] + q * H[ (k + 1) * n + j ];\n                if ( notlast ) {\n                  p = p + r * H[ (k + 2) * n + j ];\n                  H[ (k + 2) * n + j ] = H[ (k + 2) * n + j ] - p * z;\n                }\n                H[ k * n + j ] = H[ k * n + j ] - p * x;\n                H[ (k + 1) * n + j ] = H[ (k + 1) * n + j ] - p * y;\n              }\n\n              // Column modification\n\n              for ( i = 0; i <= Math.min( n, k + 3 ); i++ ) {\n                p = x * H[ i * n + k ] + y * H[ i * n + k + 1 ];\n                if ( notlast ) {\n                  p = p + z * H[ i * n + k + 2 ];\n                  H[ i * n + k + 2 ] = H[ i * n + k + 2 ] - p * r;\n                }\n                H[ i * n + k ] = H[ i * n + k ] - p;\n                H[ i * n + k + 1 ] = H[ i * n + k + 1 ] - p * q;\n              }\n\n              // Accumulate transformations\n\n              for ( i = low; i <= high; i++ ) {\n                p = x * V[ i * n + k ] + y * V[ i * n + k + 1 ];\n                if ( notlast ) {\n                  p = p + z * V[ i * n + k + 2 ];\n                  V[ i * n + k + 2 ] = V[ i * n + k + 2 ] - p * r;\n                }\n                V[ i * n + k ] = V[ i * n + k ] - p;\n                V[ i * n + k + 1 ] = V[ i * n + k + 1 ] - p * q;\n              }\n            }  // (s !== 0)\n          }  // k loop\n        }  // check convergence\n      }  // while (n >= low)\n\n      // Backsubstitute to find vectors of upper triangular form\n\n      if ( norm === 0.0 ) {\n        return;\n      }\n\n      for ( n = nn - 1; n >= 0; n-- ) {\n        p = d[ n ];\n        q = e[ n ];\n\n        // Real vector\n\n        if ( q === 0 ) {\n          l = n;\n          H[ n * n + n ] = 1.0;\n          for ( i = n - 1; i >= 0; i-- ) {\n            w = H[ i * n + i ] - p;\n            r = 0.0;\n            for ( j = l; j <= n; j++ ) {\n              r = r + H[ i * this.n + j ] * H[ j * n + n ];\n            }\n            if ( e[ i ] < 0.0 ) {\n              z = w;\n              s = r;\n            }\n            else {\n              l = i;\n              if ( e[ i ] === 0.0 ) {\n                if ( w !== 0.0 ) {\n                  H[ i * n + n ] = -r / w;\n                }\n                else {\n                  H[ i * n + n ] = -r / (eps * norm);\n                }\n\n                // Solve real equations\n\n              }\n              else {\n                x = H[ i * n + i + 1 ];\n                y = H[ (i + 1) * n + i ];\n                q = (d[ i ] - p) * (d[ i ] - p) + e[ i ] * e[ i ];\n                t = (x * s - z * r) / q;\n                H[ i * n + n ] = t;\n                if ( Math.abs( x ) > Math.abs( z ) ) {\n                  H[ (i + 1) * n + n ] = (-r - w * t) / x;\n                }\n                else {\n                  H[ (i + 1) * n + n ] = (-s - y * t) / z;\n                }\n              }\n\n              // Overflow control\n\n              t = Math.abs( H[ i * n + n ] );\n              if ( (eps * t) * t > 1 ) {\n                for ( j = i; j <= n; j++ ) {\n                  H[ j * n + n ] = H[ j * n + n ] / t;\n                }\n              }\n            }\n          }\n\n          // Complex vector\n\n        }\n        else if ( q < 0 ) {\n          l = n - 1;\n\n          // Last vector component imaginary so matrix is triangular\n\n          if ( Math.abs( H[ n * n + n - 1 ] ) > Math.abs( H[ (n - 1) * n + n ] ) ) {\n            H[ (n - 1) * n + (n - 1) ] = q / H[ n * n + n - 1 ];\n            H[ (n - 1) * n + n ] = -(H[ n * n + n ] - p) / H[ n * n + n - 1 ];\n          }\n          else {\n            this.cdiv( 0.0, -H[ (n - 1) * n + n ], H[ (n - 1) * n + (n - 1) ] - p, q );\n            H[ (n - 1) * n + (n - 1) ] = this.cdivr;\n            H[ (n - 1) * n + n ] = this.cdivi;\n          }\n          H[ n * n + n - 1 ] = 0.0;\n          H[ n * n + n ] = 1.0;\n          for ( i = n - 2; i >= 0; i-- ) {\n            var ra;\n            var sa;\n            var vr;\n            var vi;\n            ra = 0.0;\n            sa = 0.0;\n            for ( j = l; j <= n; j++ ) {\n              ra = ra + H[ i * this.n + j ] * H[ j * n + n - 1 ];\n              sa = sa + H[ i * this.n + j ] * H[ j * n + n ];\n            }\n            w = H[ i * n + i ] - p;\n\n            if ( e[ i ] < 0.0 ) {\n              z = w;\n              r = ra;\n              s = sa;\n            }\n            else {\n              l = i;\n              if ( e[ i ] === 0 ) {\n                this.cdiv( -ra, -sa, w, q );\n                H[ i * n + n - 1 ] = this.cdivr;\n                H[ i * n + n ] = this.cdivi;\n              }\n              else {\n\n                // Solve complex equations\n\n                x = H[ i * n + i + 1 ];\n                y = H[ (i + 1) * n + i ];\n                vr = (d[ i ] - p) * (d[ i ] - p) + e[ i ] * e[ i ] - q * q;\n                vi = (d[ i ] - p) * 2.0 * q;\n                if ( vr === 0.0 && vi === 0.0 ) {\n                  vr = eps * norm * (Math.abs( w ) + Math.abs( q ) +\n                                     Math.abs( x ) + Math.abs( y ) + Math.abs( z ));\n                }\n                this.cdiv( x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi );\n                H[ i * n + n - 1 ] = this.cdivr;\n                H[ i * n + n ] = this.cdivi;\n                if ( Math.abs( x ) > (Math.abs( z ) + Math.abs( q )) ) {\n                  H[ (i + 1) * n + n - 1 ] = (-ra - w * H[ i * n + n - 1 ] + q * H[ i * n + n ]) / x;\n                  H[ (i + 1) * n + n ] = (-sa - w * H[ i * n + n ] - q * H[ i * n + n - 1 ]) / x;\n                }\n                else {\n                  this.cdiv( -r - y * H[ i * n + n - 1 ], -s - y * H[ i * n + n ], z, q );\n                  H[ (i + 1) * n + n - 1 ] = this.cdivr;\n                  H[ (i + 1) * n + n ] = this.cdivi;\n                }\n              }\n\n              // Overflow control\n              t = Math.max( Math.abs( H[ i * n + n - 1 ] ), Math.abs( H[ i * n + n ] ) );\n              if ( (eps * t) * t > 1 ) {\n                for ( j = i; j <= n; j++ ) {\n                  H[ j * n + n - 1 ] = H[ j * n + n - 1 ] / t;\n                  H[ j * n + n ] = H[ j * n + n ] / t;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Vectors of isolated roots\n      for ( i = 0; i < nn; i++ ) {\n        if ( i < low || i > high ) {\n          for ( j = i; j < nn; j++ ) {\n            V[ i * this.n + j ] = H[ i * this.n + j ];\n          }\n        }\n      }\n\n      // Back transformation to get eigenvectors of original matrix\n      for ( j = nn - 1; j >= low; j-- ) {\n        for ( i = low; i <= high; i++ ) {\n          z = 0.0;\n          for ( k = low; k <= Math.min( j, high ); k++ ) {\n            z = z + V[ i * n + k ] * H[ k * n + j ];\n          }\n          V[ i * this.n + j ] = z;\n        }\n      }\n    }\n  };\n\n  return EigenvalueDecomposition;\n} );\n\n","// Copyright 2013-2014, University of Colorado Boulder\n\n/**\n * Function for doing a linear mapping between two domains ('a' and 'b').\n * <p>\n * Example usage:\n * <code>\n * var f = new dot.LinearFunction( 0, 100, 0, 200 );\n * f( 50 ); // 100\n * f.inverse( 100 ); // 50\n * </code>\n *\n * @author Chris Malley (PixelZoom, Inc.)\n */\ndefine( 'DOT/LinearFunction',['require','DOT/dot','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  // modules\n  require( 'DOT/Util' );\n\n  /**\n   * @param {Number} a1\n   * @param {Number} a2\n   * @param {Number} b1\n   * @param {Number} b2\n   * @param {Boolean} clamp clamp the result to the provided ranges, false by default\n   * @constructor\n   */\n  function LinearFunction( a1, a2, b1, b2, clamp ) {\n\n    clamp = _.isUndefined( clamp ) ? false : clamp;\n\n    /*\n     * Linearly interpolate two points and evaluate the line equation for a third point.\n     * f( a1 ) = b1, f( a2 ) = b2, f( a3 ) = <linear mapped value>\n     * Optionally clamp the result to the range [b1,b2].\n     */\n    var map = function( a1, a2, b1, b2, a3, clamp ) {\n      var b3 = dot.Util.linear( a1, a2, b1, b2, a3 );\n      if ( clamp ) {\n        var max = Math.max( b1, b2 );\n        var min = Math.min( b1, b2 );\n        b3 = dot.Util.clamp( b3, min, max );\n      }\n      return b3;\n    };\n\n    // Maps from a to b.\n    var evaluate = function( a3 ) {\n      return map( a1, a2, b1, b2, a3, clamp );\n    };\n\n    // Maps from b to a.\n    evaluate.inverse = function( b3 ) {\n      return map( b1, b2, a1, a2, b3, clamp );\n    };\n\n    return evaluate; // return the evaluation function, so we use sites look like: f(a) f.inverse(b)\n  }\n\n  dot.register( 'LinearFunction', LinearFunction );\n\n  return LinearFunction;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * LU decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/LUDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  function LUDecomposition( matrix ) {\n    var i;\n    var j;\n    var k;\n\n    this.matrix = matrix;\n\n    // TODO: size!\n    this.LU = matrix.getArrayCopy();\n    var LU = this.LU;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.piv = new Uint32Array( m );\n    for ( i = 0; i < m; i++ ) {\n      this.piv[ i ] = i;\n    }\n    this.pivsign = 1;\n    var LUcolj = new Float32Array( m );\n\n    // Outer loop.\n\n    for ( j = 0; j < n; j++ ) {\n\n      // Make a copy of the j-th column to localize references.\n      for ( i = 0; i < m; i++ ) {\n        LUcolj[ i ] = LU[ matrix.index( i, j ) ];\n      }\n\n      // Apply previous transformations.\n\n      for ( i = 0; i < m; i++ ) {\n        // Most of the time is spent in the following dot product.\n        var kmax = Math.min( i, j );\n        var s = 0.0;\n        for ( k = 0; k < kmax; k++ ) {\n          var ik = matrix.index( i, k );\n          s += LU[ ik ] * LUcolj[ k ];\n        }\n\n        LUcolj[ i ] -= s;\n        LU[ matrix.index( i, j ) ] = LUcolj[ i ];\n      }\n\n      // Find pivot and exchange if necessary.\n\n      var p = j;\n      for ( i = j + 1; i < m; i++ ) {\n        if ( Math.abs( LUcolj[ i ] ) > Math.abs( LUcolj[ p ] ) ) {\n          p = i;\n        }\n      }\n      if ( p !== j ) {\n        for ( k = 0; k < n; k++ ) {\n          var pk = matrix.index( p, k );\n          var jk = matrix.index( j, k );\n          var t = LU[ pk ];\n          LU[ pk ] = LU[ jk ];\n          LU[ jk ] = t;\n        }\n        k = this.piv[ p ];\n        this.piv[ p ] = this.piv[ j ];\n        this.piv[ j ] = k;\n        this.pivsign = -this.pivsign;\n      }\n\n      // Compute multipliers.\n\n      if ( j < m && LU[ this.matrix.index( j, j ) ] !== 0.0 ) {\n        for ( i = j + 1; i < m; i++ ) {\n          LU[ matrix.index( i, j ) ] /= LU[ matrix.index( j, j ) ];\n        }\n      }\n    }\n  }\n\n  dot.register( 'LUDecomposition', LUDecomposition );\n\n  LUDecomposition.prototype = {\n    constructor: LUDecomposition,\n\n    isNonsingular: function() {\n      for ( var j = 0; j < this.n; j++ ) {\n        var index = this.matrix.index( j, j );\n        if ( this.LU[ index ] === 0 ) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    getL: function() {\n      var result = new dot.Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i > j ) {\n            result.entries[ result.index( i, j ) ] = this.LU[ this.matrix.index( i, j ) ];\n          }\n          else if ( i === j ) {\n            result.entries[ result.index( i, j ) ] = 1.0;\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getU: function() {\n      var result = new dot.Matrix( this.n, this.n );\n      for ( var i = 0; i < this.n; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i <= j ) {\n            result.entries[ result.index( i, j ) ] = this.LU[ this.matrix.index( i, j ) ];\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getPivot: function() {\n      var p = new Uint32Array( this.m );\n      for ( var i = 0; i < this.m; i++ ) {\n        p[ i ] = this.piv[ i ];\n      }\n      return p;\n    },\n\n    getDoublePivot: function() {\n      var vals = new Float32Array( this.m );\n      for ( var i = 0; i < this.m; i++ ) {\n        vals[ i ] = this.piv[ i ];\n      }\n      return vals;\n    },\n\n    det: function() {\n      if ( this.m !== this.n ) {\n        throw new Error( 'Matrix must be square.' );\n      }\n      var d = this.pivsign;\n      for ( var j = 0; j < this.n; j++ ) {\n        d *= this.LU[ this.matrix.index( j, j ) ];\n      }\n      return d;\n    },\n\n    solve: function( matrix ) {\n      var i;\n      var j;\n      var k;\n      if ( matrix.getRowDimension() !== this.m ) {\n        throw new Error( 'Matrix row dimensions must agree.' );\n      }\n      if ( !this.isNonsingular() ) {\n        throw new Error( 'Matrix is singular.' );\n      }\n\n      // Copy right hand side with pivoting\n      var nx = matrix.getColumnDimension();\n      var Xmat = matrix.getArrayRowMatrix( this.piv, 0, nx - 1 );\n\n      // Solve L*Y = B(piv,:)\n      for ( k = 0; k < this.n; k++ ) {\n        for ( i = k + 1; i < this.n; i++ ) {\n          for ( j = 0; j < nx; j++ ) {\n            Xmat.entries[ Xmat.index( i, j ) ] -= Xmat.entries[ Xmat.index( k, j ) ] * this.LU[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n\n      // Solve U*X = Y;\n      for ( k = this.n - 1; k >= 0; k-- ) {\n        for ( j = 0; j < nx; j++ ) {\n          Xmat.entries[ Xmat.index( k, j ) ] /= this.LU[ this.matrix.index( k, k ) ];\n        }\n        for ( i = 0; i < k; i++ ) {\n          for ( j = 0; j < nx; j++ ) {\n            Xmat.entries[ Xmat.index( i, j ) ] -= Xmat.entries[ Xmat.index( k, j ) ] * this.LU[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n      return Xmat;\n    }\n  };\n\n  return LUDecomposition;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Tests whether a reference is to an array.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/isArray',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function isArray( array ) {\n    // yes, this is actually how to do this. see http://stackoverflow.com/questions/4775722/javascript-check-if-object-is-array\n    return Object.prototype.toString.call( array ) === '[object Array]';\n  }\n\n  phetCore.register( 'isArray', isArray );\n\n  return isArray;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * SVD decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/SingularValueDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  function SingularValueDecomposition( matrix ) {\n    this.matrix = matrix;\n\n    var Arg = matrix;\n\n    // Derived from LINPACK code.\n    // Initialize.\n    var A = Arg.getArrayCopy();\n    this.m = Arg.getRowDimension();\n    this.n = Arg.getColumnDimension();\n    var m = this.m;\n    var n = this.n;\n\n    var min = Math.min;\n    var max = Math.max;\n    var pow = Math.pow;\n    var abs = Math.abs;\n\n    /* Apparently the failing cases are only a proper subset of (m<n),\n     so let's not throw error.  Correct fix to come later?\n     if (m<n) {\n     throw new IllegalArgumentException(\"Jama SVD only works for m >= n\"); }\n     */\n    var nu = min( m, n );\n    this.s = new Float32Array( min( m + 1, n ) );\n    var s = this.s;\n    this.U = new Float32Array( m * nu );\n    var U = this.U;\n    this.V = new Float32Array( n * n );\n    var V = this.V;\n    var e = new Float32Array( n );\n    var work = new Float32Array( m );\n    var wantu = true;\n    var wantv = true;\n\n    var i;\n    var j;\n    var k;\n    var t;\n    var f;\n\n    var cs;\n    var sn;\n\n    var hypot = dot.Matrix.hypot;\n\n    // Reduce A to bidiagonal form, storing the diagonal elements\n    // in s and the super-diagonal elements in e.\n\n    var nct = min( m - 1, n );\n    var nrt = max( 0, min( n - 2, m ) );\n    for ( k = 0; k < max( nct, nrt ); k++ ) {\n      if ( k < nct ) {\n\n        // Compute the transformation for the k-th column and\n        // place the k-th diagonal in s[k].\n        // Compute 2-norm of k-th column without under/overflow.\n        s[ k ] = 0;\n        for ( i = k; i < m; i++ ) {\n          s[ k ] = hypot( s[ k ], A[ i * n + k ] );\n        }\n        if ( s[ k ] !== 0.0 ) {\n          if ( A[ k * n + k ] < 0.0 ) {\n            s[ k ] = -s[ k ];\n          }\n          for ( i = k; i < m; i++ ) {\n            A[ i * n + k ] /= s[ k ];\n          }\n          A[ k * n + k ] += 1.0;\n        }\n        s[ k ] = -s[ k ];\n      }\n      for ( j = k + 1; j < n; j++ ) {\n        if ( (k < nct) && (s[ k ] !== 0.0) ) {\n\n          // Apply the transformation.\n\n          t = 0;\n          for ( i = k; i < m; i++ ) {\n            t += A[ i * n + k ] * A[ i * n + j ];\n          }\n          t = -t / A[ k * n + k ];\n          for ( i = k; i < m; i++ ) {\n            A[ i * n + j ] += t * A[ i * n + k ];\n          }\n        }\n\n        // Place the k-th row of A into e for the\n        // subsequent calculation of the row transformation.\n\n        e[ j ] = A[ k * n + j ];\n      }\n      if ( wantu && (k < nct) ) {\n\n        // Place the transformation in U for subsequent back\n        // multiplication.\n\n        for ( i = k; i < m; i++ ) {\n          U[ i * nu + k ] = A[ i * n + k ];\n        }\n      }\n      if ( k < nrt ) {\n\n        // Compute the k-th row transformation and place the\n        // k-th super-diagonal in e[k].\n        // Compute 2-norm without under/overflow.\n        e[ k ] = 0;\n        for ( i = k + 1; i < n; i++ ) {\n          e[ k ] = hypot( e[ k ], e[ i ] );\n        }\n        if ( e[ k ] !== 0.0 ) {\n          if ( e[ k + 1 ] < 0.0 ) {\n            e[ k ] = -e[ k ];\n          }\n          for ( i = k + 1; i < n; i++ ) {\n            e[ i ] /= e[ k ];\n          }\n          e[ k + 1 ] += 1.0;\n        }\n        e[ k ] = -e[ k ];\n        if ( (k + 1 < m) && (e[ k ] !== 0.0) ) {\n\n          // Apply the transformation.\n\n          for ( i = k + 1; i < m; i++ ) {\n            work[ i ] = 0.0;\n          }\n          for ( j = k + 1; j < n; j++ ) {\n            for ( i = k + 1; i < m; i++ ) {\n              work[ i ] += e[ j ] * A[ i * n + j ];\n            }\n          }\n          for ( j = k + 1; j < n; j++ ) {\n            t = -e[ j ] / e[ k + 1 ];\n            for ( i = k + 1; i < m; i++ ) {\n              A[ i * n + j ] += t * work[ i ];\n            }\n          }\n        }\n        if ( wantv ) {\n\n          // Place the transformation in V for subsequent\n          // back multiplication.\n\n          for ( i = k + 1; i < n; i++ ) {\n            V[ i * n + k ] = e[ i ];\n          }\n        }\n      }\n    }\n\n    // Set up the final bidiagonal matrix or order p.\n\n    var p = min( n, m + 1 );\n    if ( nct < n ) {\n      s[ nct ] = A[ nct * n + nct ];\n    }\n    if ( m < p ) {\n      s[ p - 1 ] = 0.0;\n    }\n    if ( nrt + 1 < p ) {\n      e[ nrt ] = A[ nrt * n + p - 1 ];\n    }\n    e[ p - 1 ] = 0.0;\n\n    // If required, generate U.\n\n    if ( wantu ) {\n      for ( j = nct; j < nu; j++ ) {\n        for ( i = 0; i < m; i++ ) {\n          U[ i * nu + j ] = 0.0;\n        }\n        U[ j * nu + j ] = 1.0;\n      }\n      for ( k = nct - 1; k >= 0; k-- ) {\n        if ( s[ k ] !== 0.0 ) {\n          for ( j = k + 1; j < nu; j++ ) {\n            t = 0;\n            for ( i = k; i < m; i++ ) {\n              t += U[ i * nu + k ] * U[ i * nu + j ];\n            }\n            t = -t / U[ k * nu + k ];\n            for ( i = k; i < m; i++ ) {\n              U[ i * nu + j ] += t * U[ i * nu + k ];\n            }\n          }\n          for ( i = k; i < m; i++ ) {\n            U[ i * nu + k ] = -U[ i * nu + k ];\n          }\n          U[ k * nu + k ] = 1.0 + U[ k * nu + k ];\n          for ( i = 0; i < k - 1; i++ ) {\n            U[ i * nu + k ] = 0.0;\n          }\n        }\n        else {\n          for ( i = 0; i < m; i++ ) {\n            U[ i * nu + k ] = 0.0;\n          }\n          U[ k * nu + k ] = 1.0;\n        }\n      }\n    }\n\n    // If required, generate V.\n\n    if ( wantv ) {\n      for ( k = n - 1; k >= 0; k-- ) {\n        if ( (k < nrt) && (e[ k ] !== 0.0) ) {\n          for ( j = k + 1; j < nu; j++ ) {\n            t = 0;\n            for ( i = k + 1; i < n; i++ ) {\n              t += V[ i * n + k ] * V[ i * n + j ];\n            }\n            t = -t / V[ (k + 1) * n + k ];\n            for ( i = k + 1; i < n; i++ ) {\n              V[ i * n + j ] += t * V[ i * n + k ];\n            }\n          }\n        }\n        for ( i = 0; i < n; i++ ) {\n          V[ i * n + k ] = 0.0;\n        }\n        V[ k * n + k ] = 1.0;\n      }\n    }\n\n    // Main iteration loop for the singular values.\n\n    var pp = p - 1;\n    var iter = 0;\n    var eps = pow( 2.0, -52.0 );\n    var tiny = pow( 2.0, -966.0 );\n    while ( p > 0 ) {\n      var kase;\n\n      // Here is where a test for too many iterations would go.\n      if ( iter > 500 ) {\n        break;\n      }\n\n      // This section of the program inspects for\n      // negligible elements in the s and e arrays.  On\n      // completion the variables kase and k are set as follows.\n\n      // kase = 1   if s(p) and e[k-1] are negligible and k<p\n      // kase = 2   if s(k) is negligible and k<p\n      // kase = 3   if e[k-1] is negligible, k<p, and\n      //        s(k), ..., s(p) are not negligible (qr step).\n      // kase = 4   if e(p-1) is negligible (convergence).\n\n      for ( k = p - 2; k >= -1; k-- ) {\n        if ( k === -1 ) {\n          break;\n        }\n        if ( abs( e[ k ] ) <=\n             tiny + eps * (abs( s[ k ] ) + abs( s[ k + 1 ] )) ) {\n          e[ k ] = 0.0;\n          break;\n        }\n      }\n      if ( k === p - 2 ) {\n        kase = 4;\n      }\n      else {\n        var ks;\n        for ( ks = p - 1; ks >= k; ks-- ) {\n          if ( ks === k ) {\n            break;\n          }\n          t = (ks !== p ? abs( e[ ks ] ) : 0) +\n              (ks !== k + 1 ? abs( e[ ks - 1 ] ) : 0);\n          if ( abs( s[ ks ] ) <= tiny + eps * t ) {\n            s[ ks ] = 0.0;\n            break;\n          }\n        }\n        if ( ks === k ) {\n          kase = 3;\n        }\n        else if ( ks === p - 1 ) {\n          kase = 1;\n        }\n        else {\n          kase = 2;\n          k = ks;\n        }\n      }\n      k++;\n\n      // Perform the task indicated by kase.\n\n      switch( kase ) {\n\n        // Deflate negligible s(p).\n\n        case 1:\n        {\n          f = e[ p - 2 ];\n          e[ p - 2 ] = 0.0;\n          for ( j = p - 2; j >= k; j-- ) {\n            t = hypot( s[ j ], f );\n            cs = s[ j ] / t;\n            sn = f / t;\n            s[ j ] = t;\n            if ( j !== k ) {\n              f = -sn * e[ j - 1 ];\n              e[ j - 1 ] = cs * e[ j - 1 ];\n            }\n            if ( wantv ) {\n              for ( i = 0; i < n; i++ ) {\n                t = cs * V[ i * n + j ] + sn * V[ i * n + p - 1 ];\n                V[ i * n + p - 1 ] = -sn * V[ i * n + j ] + cs * V[ i * n + p - 1 ];\n                V[ i * n + j ] = t;\n              }\n            }\n          }\n        }\n          break;\n\n        // Split at negligible s(k).\n\n        case 2:\n        {\n          f = e[ k - 1 ];\n          e[ k - 1 ] = 0.0;\n          for ( j = k; j < p; j++ ) {\n            t = hypot( s[ j ], f );\n            cs = s[ j ] / t;\n            sn = f / t;\n            s[ j ] = t;\n            f = -sn * e[ j ];\n            e[ j ] = cs * e[ j ];\n            if ( wantu ) {\n              for ( i = 0; i < m; i++ ) {\n                t = cs * U[ i * nu + j ] + sn * U[ i * nu + k - 1 ];\n                U[ i * nu + k - 1 ] = -sn * U[ i * nu + j ] + cs * U[ i * nu + k - 1 ];\n                U[ i * nu + j ] = t;\n              }\n            }\n          }\n        }\n          break;\n\n        // Perform one qr step.\n\n        case 3:\n        {\n\n          // Calculate the shift.\n\n          var scale = max( max( max( max( abs( s[ p - 1 ] ), abs( s[ p - 2 ] ) ), abs( e[ p - 2 ] ) ), abs( s[ k ] ) ), abs( e[ k ] ) );\n          var sp = s[ p - 1 ] / scale;\n          var spm1 = s[ p - 2 ] / scale;\n          var epm1 = e[ p - 2 ] / scale;\n          var sk = s[ k ] / scale;\n          var ek = e[ k ] / scale;\n          var b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;\n          var c = (sp * epm1) * (sp * epm1);\n          var shift = 0.0;\n          if ( (b !== 0.0) || (c !== 0.0) ) {\n            shift = Math.sqrt( b * b + c );\n            if ( b < 0.0 ) {\n              shift = -shift;\n            }\n            shift = c / (b + shift);\n          }\n          f = (sk + sp) * (sk - sp) + shift;\n          var g = sk * ek;\n\n          // Chase zeros.\n\n          for ( j = k; j < p - 1; j++ ) {\n            t = hypot( f, g );\n            cs = f / t;\n            sn = g / t;\n            if ( j !== k ) {\n              e[ j - 1 ] = t;\n            }\n            f = cs * s[ j ] + sn * e[ j ];\n            e[ j ] = cs * e[ j ] - sn * s[ j ];\n            g = sn * s[ j + 1 ];\n            s[ j + 1 ] = cs * s[ j + 1 ];\n            if ( wantv ) {\n              for ( i = 0; i < n; i++ ) {\n                t = cs * V[ i * n + j ] + sn * V[ i * n + j + 1 ];\n                V[ i * n + j + 1 ] = -sn * V[ i * n + j ] + cs * V[ i * n + j + 1 ];\n                V[ i * n + j ] = t;\n              }\n            }\n            t = hypot( f, g );\n            cs = f / t;\n            sn = g / t;\n            s[ j ] = t;\n            f = cs * e[ j ] + sn * s[ j + 1 ];\n            s[ j + 1 ] = -sn * e[ j ] + cs * s[ j + 1 ];\n            g = sn * e[ j + 1 ];\n            e[ j + 1 ] = cs * e[ j + 1 ];\n            if ( wantu && (j < m - 1) ) {\n              for ( i = 0; i < m; i++ ) {\n                t = cs * U[ i * nu + j ] + sn * U[ i * nu + j + 1 ];\n                U[ i * nu + j + 1 ] = -sn * U[ i * nu + j ] + cs * U[ i * nu + j + 1 ];\n                U[ i * nu + j ] = t;\n              }\n            }\n          }\n          e[ p - 2 ] = f;\n          iter = iter + 1;\n        }\n          break;\n\n        // Convergence.\n\n        case 4:\n        {\n\n          // Make the singular values positive.\n\n          if ( s[ k ] <= 0.0 ) {\n            s[ k ] = (s[ k ] < 0.0 ? -s[ k ] : 0.0);\n            if ( wantv ) {\n              for ( i = 0; i <= pp; i++ ) {\n                V[ i * n + k ] = -V[ i * n + k ];\n              }\n            }\n          }\n\n          // Order the singular values.\n\n          while ( k < pp ) {\n            if ( s[ k ] >= s[ k + 1 ] ) {\n              break;\n            }\n            t = s[ k ];\n            s[ k ] = s[ k + 1 ];\n            s[ k + 1 ] = t;\n            if ( wantv && (k < n - 1) ) {\n              for ( i = 0; i < n; i++ ) {\n                t = V[ i * n + k + 1 ];\n                V[ i * n + k + 1 ] = V[ i * n + k ];\n                V[ i * n + k ] = t;\n              }\n            }\n            if ( wantu && (k < m - 1) ) {\n              for ( i = 0; i < m; i++ ) {\n                t = U[ i * nu + k + 1 ];\n                U[ i * nu + k + 1 ] = U[ i * nu + k ];\n                U[ i * nu + k ] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n        }\n          break;\n      }\n    }\n  }\n\n  dot.register( 'SingularValueDecomposition', SingularValueDecomposition );\n\n  SingularValueDecomposition.prototype = {\n    constructor: SingularValueDecomposition,\n\n    getU: function() {\n      return new dot.Matrix( this.m, Math.min( this.m + 1, this.n ), this.U, true ); // the \"fast\" flag added, since U is Float32Array\n    },\n\n    getV: function() {\n      return new dot.Matrix( this.n, this.n, this.V, true );\n    },\n\n    getSingularValues: function() {\n      return this.s;\n    },\n\n    getS: function() {\n      var result = new dot.Matrix( this.n, this.n );\n      for ( var i = 0; i < this.n; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          result.entries[ result.index( i, j ) ] = 0.0;\n        }\n        result.entries[ result.index( i, i ) ] = this.s[ i ];\n      }\n      return result;\n    },\n\n    norm2: function() {\n      return this.s[ 0 ];\n    },\n\n    cond: function() {\n      return this.s[ 0 ] / this.s[ Math.min( this.m, this.n ) - 1 ];\n    },\n\n    rank: function() {\n      // changed to 23 from 52 (bits of mantissa), since we are using floats here!\n      var eps = Math.pow( 2.0, -23.0 );\n      var tol = Math.max( this.m, this.n ) * this.s[ 0 ] * eps;\n      var r = 0;\n      for ( var i = 0; i < this.s.length; i++ ) {\n        if ( this.s[ i ] > tol ) {\n          r++;\n        }\n      }\n      return r;\n    }\n  };\n\n  return SingularValueDecomposition;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * QR decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/QRDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  dot.QRDecomposition = function QRDecomposition( matrix ) {\n    this.matrix = matrix;\n\n    // TODO: size!\n    this.QR = matrix.getArrayCopy();\n    var QR = this.QR;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n\n    this.Rdiag = new Float32Array( n );\n\n    var i;\n    var j;\n    var k;\n\n    // Main loop.\n    for ( k = 0; k < n; k++ ) {\n      // Compute 2-norm of k-th column without under/overflow.\n      var nrm = 0;\n      for ( i = k; i < m; i++ ) {\n        nrm = dot.Matrix.hypot( nrm, QR[ this.matrix.index( i, k ) ] );\n      }\n\n      if ( nrm !== 0.0 ) {\n        // Form k-th Householder vector.\n        if ( QR[ this.matrix.index( k, k ) ] < 0 ) {\n          nrm = -nrm;\n        }\n        for ( i = k; i < m; i++ ) {\n          QR[ this.matrix.index( i, k ) ] /= nrm;\n        }\n        QR[ this.matrix.index( k, k ) ] += 1.0;\n\n        // Apply transformation to remaining columns.\n        for ( j = k + 1; j < n; j++ ) {\n          var s = 0.0;\n          for ( i = k; i < m; i++ ) {\n            s += QR[ this.matrix.index( i, k ) ] * QR[ this.matrix.index( i, j ) ];\n          }\n          s = -s / QR[ this.matrix.index( k, k ) ];\n          for ( i = k; i < m; i++ ) {\n            QR[ this.matrix.index( i, j ) ] += s * QR[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n      this.Rdiag[ k ] = -nrm;\n    }\n  };\n  var QRDecomposition = dot.QRDecomposition;\n\n  QRDecomposition.prototype = {\n    constructor: QRDecomposition,\n\n    isFullRank: function() {\n      for ( var j = 0; j < this.n; j++ ) {\n        if ( this.Rdiag[ j ] === 0 ) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    getH: function() {\n      var result = new dot.Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i >= j ) {\n            result.entries[ result.index( i, j ) ] = this.QR[ this.matrix.index( i, j ) ];\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getR: function() {\n      var result = new dot.Matrix( this.n, this.n );\n      for ( var i = 0; i < this.n; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i < j ) {\n            result.entries[ result.index( i, j ) ] = this.QR[ this.matrix.index( i, j ) ];\n          }\n          else if ( i === j ) {\n            result.entries[ result.index( i, j ) ] = this.Rdiag[ i ];\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getQ: function() {\n      var i;\n      var j;\n      var k;\n      var result = new dot.Matrix( this.m, this.n );\n      for ( k = this.n - 1; k >= 0; k-- ) {\n        for ( i = 0; i < this.m; i++ ) {\n          result.entries[ result.index( i, k ) ] = 0.0;\n        }\n        result.entries[ result.index( k, k ) ] = 1.0;\n        for ( j = k; j < this.n; j++ ) {\n          if ( this.QR[ this.matrix.index( k, k ) ] !== 0 ) {\n            var s = 0.0;\n            for ( i = k; i < this.m; i++ ) {\n              s += this.QR[ this.matrix.index( i, k ) ] * result.entries[ result.index( i, j ) ];\n            }\n            s = -s / this.QR[ this.matrix.index( k, k ) ];\n            for ( i = k; i < this.m; i++ ) {\n              result.entries[ result.index( i, j ) ] += s * this.QR[ this.matrix.index( i, k ) ];\n            }\n          }\n        }\n      }\n      return result;\n    },\n\n    solve: function( matrix ) {\n      if ( matrix.getRowDimension() !== this.m ) {\n        throw new Error( 'Matrix row dimensions must agree.' );\n      }\n      if ( !this.isFullRank() ) {\n        throw new Error( 'Matrix is rank deficient.' );\n      }\n\n      var i;\n      var j;\n      var k;\n\n      // Copy right hand side\n      var nx = matrix.getColumnDimension();\n      var X = matrix.getArrayCopy();\n\n      // Compute Y = transpose(Q)*matrix\n      for ( k = 0; k < this.n; k++ ) {\n        for ( j = 0; j < nx; j++ ) {\n          var s = 0.0;\n          for ( i = k; i < this.m; i++ ) {\n            s += this.QR[ this.matrix.index( i, k ) ] * X[ matrix.index( i, j ) ];\n          }\n          s = -s / this.QR[ this.matrix.index( k, k ) ];\n          for ( i = k; i < this.m; i++ ) {\n            X[ matrix.index( i, j ) ] += s * this.QR[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n\n      // Solve R*X = Y;\n      for ( k = this.n - 1; k >= 0; k-- ) {\n        for ( j = 0; j < nx; j++ ) {\n          X[ matrix.index( k, j ) ] /= this.Rdiag[ k ];\n        }\n        for ( i = 0; i < k; i++ ) {\n          for ( j = 0; j < nx; j++ ) {\n            X[ matrix.index( i, j ) ] -= X[ matrix.index( k, j ) ] * this.QR[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n      return new dot.Matrix( this.n, nx, X, true ).getMatrix( 0, this.n - 1, 0, nx - 1 );\n    }\n  };\n\n  return QRDecomposition;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Arbitrary-dimensional matrix, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Matrix',['require','DOT/dot','PHET_CORE/isArray','DOT/SingularValueDecomposition','DOT/LUDecomposition','DOT/QRDecomposition','DOT/EigenvalueDecomposition','DOT/Vector2','DOT/Vector3','DOT/Vector4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  var isArray = require( 'PHET_CORE/isArray' );\n\n  require( 'DOT/SingularValueDecomposition' );\n  require( 'DOT/LUDecomposition' );\n  require( 'DOT/QRDecomposition' );\n  require( 'DOT/EigenvalueDecomposition' );\n  require( 'DOT/Vector2' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Vector4' );\n\n  function Matrix( m, n, filler, fast ) {\n    this.m = m;\n    this.n = n;\n\n    var size = m * n;\n    this.size = size;\n    var i;\n\n    if ( fast ) {\n      this.entries = filler;\n    }\n    else {\n      if ( !filler ) {\n        filler = 0;\n      }\n\n      // entries stored in row-major format\n      this.entries = new Float32Array( size );\n\n      if ( isArray( filler ) ) {\n        assert && assert( filler.length === size );\n\n        for ( i = 0; i < size; i++ ) {\n          this.entries[ i ] = filler[ i ];\n        }\n      }\n      else {\n        for ( i = 0; i < size; i++ ) {\n          this.entries[ i ] = filler;\n        }\n      }\n    }\n  }\n\n  dot.register( 'Matrix', Matrix );\n\n  /** sqrt(a^2 + b^2) without under/overflow. **/\n  Matrix.hypot = function hypot( a, b ) {\n    var r;\n    if ( Math.abs( a ) > Math.abs( b ) ) {\n      r = b / a;\n      r = Math.abs( a ) * Math.sqrt( 1 + r * r );\n    }\n    else if ( b !== 0 ) {\n      r = a / b;\n      r = Math.abs( b ) * Math.sqrt( 1 + r * r );\n    }\n    else {\n      r = 0.0;\n    }\n    return r;\n  };\n\n  Matrix.prototype = {\n    constructor: Matrix,\n\n    copy: function() {\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.size; i++ ) {\n        result.entries[ i ] = this.entries[ i ];\n      }\n      return result;\n    },\n\n    getArray: function() {\n      return this.entries;\n    },\n\n    getArrayCopy: function() {\n      return new Float32Array( this.entries );\n    },\n\n    getRowDimension: function() {\n      return this.m;\n    },\n\n    getColumnDimension: function() {\n      return this.n;\n    },\n\n    // TODO: inline this places if we aren't using an inlining compiler! (check performance)\n    index: function( i, j ) {\n      return i * this.n + j;\n    },\n\n    get: function( i, j ) {\n      return this.entries[ this.index( i, j ) ];\n    },\n\n    set: function( i, j, s ) {\n      this.entries[ this.index( i, j ) ] = s;\n    },\n\n    getMatrix: function( i0, i1, j0, j1 ) {\n      var result = new Matrix( i1 - i0 + 1, j1 - j0 + 1 );\n      for ( var i = i0; i <= i1; i++ ) {\n        for ( var j = j0; j <= j1; j++ ) {\n          result.entries[ result.index( i - i0, j - j0 ) ] = this.entries[ this.index( i, j ) ];\n        }\n      }\n      return result;\n    },\n\n    // getMatrix (int[] r, int j0, int j1)\n    getArrayRowMatrix: function( r, j0, j1 ) {\n      var result = new Matrix( r.length, j1 - j0 + 1 );\n      for ( var i = 0; i < r.length; i++ ) {\n        for ( var j = j0; j <= j1; j++ ) {\n          result.entries[ result.index( i, j - j0 ) ] = this.entries[ this.index( r[ i ], j ) ];\n        }\n      }\n      return result;\n    },\n\n    // allow passing in a pre-constructed matrix\n    transpose: function( result ) {\n      result = result || new Matrix( this.n, this.m );\n      assert && assert( result.m === this.n );\n      assert && assert( result.n === this.m );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          result.entries[ result.index( j, i ) ] = this.entries[ this.index( i, j ) ];\n        }\n      }\n      return result;\n    },\n\n    norm1: function() {\n      var f = 0;\n      for ( var j = 0; j < this.n; j++ ) {\n        var s = 0;\n        for ( var i = 0; i < this.m; i++ ) {\n          s += Math.abs( this.entries[ this.index( i, j ) ] );\n        }\n        f = Math.max( f, s );\n      }\n      return f;\n    },\n\n    norm2: function() {\n      return (new dot.SingularValueDecomposition( this ).norm2());\n    },\n\n    normInf: function() {\n      var f = 0;\n      for ( var i = 0; i < this.m; i++ ) {\n        var s = 0;\n        for ( var j = 0; j < this.n; j++ ) {\n          s += Math.abs( this.entries[ this.index( i, j ) ] );\n        }\n        f = Math.max( f, s );\n      }\n      return f;\n    },\n\n    normF: function() {\n      var f = 0;\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          f = Matrix.hypot( f, this.entries[ this.index( i, j ) ] );\n        }\n      }\n      return f;\n    },\n\n    uminus: function() {\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          result.entries[ result.index( i, j ) ] = -this.entries[ this.index( i, j ) ];\n        }\n      }\n      return result;\n    },\n\n    plus: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = result.index( i, j );\n          result.entries[ index ] = this.entries[ index ] + matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    plusEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = result.index( i, j );\n          this.entries[ index ] = this.entries[ index ] + matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    minus: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          result.entries[ index ] = this.entries[ index ] - matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    minusEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = this.entries[ index ] - matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    arrayTimes: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = result.index( i, j );\n          result.entries[ index ] = this.entries[ index ] * matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    arrayTimesEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = this.entries[ index ] * matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    arrayRightDivide: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          result.entries[ index ] = this.entries[ index ] / matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    arrayRightDivideEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = this.entries[ index ] / matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    arrayLeftDivide: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          result.entries[ index ] = matrix.entries[ index ] / this.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    arrayLeftDivideEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = matrix.entries[ index ] / this.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    times: function( matrixOrScalar ) {\n      var result;\n      var i;\n      var j;\n      var k;\n      var s;\n      var matrix;\n      if ( matrixOrScalar.isMatrix ) {\n        matrix = matrixOrScalar;\n        if ( matrix.m !== this.n ) {\n          throw new Error( 'Matrix inner dimensions must agree.' );\n        }\n        result = new Matrix( this.m, matrix.n );\n        var matrixcolj = new Float32Array( this.n );\n        for ( j = 0; j < matrix.n; j++ ) {\n          for ( k = 0; k < this.n; k++ ) {\n            matrixcolj[ k ] = matrix.entries[ matrix.index( k, j ) ];\n          }\n          for ( i = 0; i < this.m; i++ ) {\n            s = 0;\n            for ( k = 0; k < this.n; k++ ) {\n              s += this.entries[ this.index( i, k ) ] * matrixcolj[ k ];\n            }\n            result.entries[ result.index( i, j ) ] = s;\n          }\n        }\n        return result;\n      }\n      else {\n        s = matrixOrScalar;\n        result = new Matrix( this.m, this.n );\n        for ( i = 0; i < this.m; i++ ) {\n          for ( j = 0; j < this.n; j++ ) {\n            result.entries[ result.index( i, j ) ] = s * this.entries[ this.index( i, j ) ];\n          }\n        }\n        return result;\n      }\n    },\n\n    timesEquals: function( s ) {\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = s * this.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    solve: function( matrix ) {\n      return (this.m === this.n ? (new dot.LUDecomposition( this )).solve( matrix ) :\n              (new dot.QRDecomposition( this )).solve( matrix ));\n    },\n\n    solveTranspose: function( matrix ) {\n      return this.transpose().solve( matrix.transpose() );\n    },\n\n    inverse: function() {\n      return this.solve( Matrix.identity( this.m, this.m ) );\n    },\n\n    det: function() {\n      return new dot.LUDecomposition( this ).det();\n    },\n\n    rank: function() {\n      return new dot.SingularValueDecomposition( this ).rank();\n    },\n\n    cond: function() {\n      return new dot.SingularValueDecomposition( this ).cond();\n    },\n\n    trace: function() {\n      var t = 0;\n      for ( var i = 0; i < Math.min( this.m, this.n ); i++ ) {\n        t += this.entries[ this.index( i, i ) ];\n      }\n      return t;\n    },\n\n    checkMatrixDimensions: function( matrix ) {\n      if ( matrix.m !== this.m || matrix.n !== this.n ) {\n        throw new Error( 'Matrix dimensions must agree.' );\n      }\n    },\n\n    toString: function() {\n      var result = '';\n      result += 'dim: ' + this.getRowDimension() + 'x' + this.getColumnDimension() + '\\n';\n      for ( var row = 0; row < this.getRowDimension(); row++ ) {\n        for ( var col = 0; col < this.getColumnDimension(); col++ ) {\n          result += this.get( row, col ) + ' ';\n        }\n        result += '\\n';\n      }\n      return result;\n    },\n\n    // returns a vector that is contained in the specified column\n    extractVector2: function( column ) {\n      assert && assert( this.m === 2 ); // rows should match vector dimension\n      return new dot.Vector2( this.get( 0, column ), this.get( 1, column ) );\n    },\n\n    // returns a vector that is contained in the specified column\n    extractVector3: function( column ) {\n      assert && assert( this.m === 3 ); // rows should match vector dimension\n      return new dot.Vector3( this.get( 0, column ), this.get( 1, column ), this.get( 2, column ) );\n    },\n\n    // returns a vector that is contained in the specified column\n    extractVector4: function( column ) {\n      assert && assert( this.m === 4 ); // rows should match vector dimension\n      return new dot.Vector4( this.get( 0, column ), this.get( 1, column ), this.get( 2, column ), this.get( 3, column ) );\n    },\n\n    // Sets the current matrix to the values of the listed column vectors (Vector3).\n    setVectors3: function( vectors ) {\n      var m = 3;\n      var n = vectors.length;\n\n      assert && assert( this.m === m );\n      assert && assert( this.n === n );\n\n      for ( var i = 0; i < n; i++ ) {\n        var vector = vectors[ i ];\n        this.entries[ i ] = vector.x;\n        this.entries[ i + n ] = vector.y;\n        this.entries[ i + 2 * n ] = vector.z;\n      }\n\n      return this;\n    },\n\n    isMatrix: true\n  };\n\n  Matrix.identity = function( m, n ) {\n    var result = new Matrix( m, n );\n    for ( var i = 0; i < m; i++ ) {\n      for ( var j = 0; j < n; j++ ) {\n        result.entries[ result.index( i, j ) ] = (i === j ? 1.0 : 0.0);\n      }\n    }\n    return result;\n  };\n\n  Matrix.rowVector2 = function( vector ) {\n    return new Matrix( 1, 2, [ vector.x, vector.y ] );\n  };\n\n  Matrix.rowVector3 = function( vector ) {\n    return new Matrix( 1, 3, [ vector.x, vector.y, vector.z ] );\n  };\n\n  Matrix.rowVector4 = function( vector ) {\n    return new Matrix( 1, 4, [ vector.x, vector.y, vector.z, vector.w ] );\n  };\n\n  Matrix.rowVector = function( vector ) {\n    if ( vector.isVector2 ) {\n      return Matrix.rowVector2( vector );\n    }\n    else if ( vector.isVector3 ) {\n      return Matrix.rowVector3( vector );\n    }\n    else if ( vector.isVector4 ) {\n      return Matrix.rowVector4( vector );\n    }\n    else {\n      throw new Error( 'undetected type of vector: ' + vector.toString() );\n    }\n  };\n\n  Matrix.columnVector2 = function( vector ) {\n    return new Matrix( 2, 1, [ vector.x, vector.y ] );\n  };\n\n  Matrix.columnVector3 = function( vector ) {\n    return new Matrix( 3, 1, [ vector.x, vector.y, vector.z ] );\n  };\n\n  Matrix.columnVector4 = function( vector ) {\n    return new Matrix( 4, 1, [ vector.x, vector.y, vector.z, vector.w ] );\n  };\n\n  Matrix.columnVector = function( vector ) {\n    if ( vector.isVector2 ) {\n      return Matrix.columnVector2( vector );\n    }\n    else if ( vector.isVector3 ) {\n      return Matrix.columnVector3( vector );\n    }\n    else if ( vector.isVector4 ) {\n      return Matrix.columnVector4( vector );\n    }\n    else {\n      throw new Error( 'undetected type of vector: ' + vector.toString() );\n    }\n  };\n\n  /**\n   * Create a Matrix where each column is a vector\n   */\n\n  Matrix.fromVectors2 = function( vectors ) {\n    var dimension = 2;\n    var n = vectors.length;\n    var data = new Float32Array( dimension * n );\n\n    for ( var i = 0; i < n; i++ ) {\n      var vector = vectors[ i ];\n      data[ i ] = vector.x;\n      data[ i + n ] = vector.y;\n    }\n\n    return new Matrix( dimension, n, data, true );\n  };\n\n  Matrix.fromVectors3 = function( vectors ) {\n    var dimension = 3;\n    var n = vectors.length;\n    var data = new Float32Array( dimension * n );\n\n    for ( var i = 0; i < n; i++ ) {\n      var vector = vectors[ i ];\n      data[ i ] = vector.x;\n      data[ i + n ] = vector.y;\n      data[ i + 2 * n ] = vector.z;\n    }\n\n    return new Matrix( dimension, n, data, true );\n  };\n\n  Matrix.fromVectors4 = function( vectors ) {\n    var dimension = 4;\n    var n = vectors.length;\n    var data = new Float32Array( dimension * n );\n\n    for ( var i = 0; i < n; i++ ) {\n      var vector = vectors[ i ];\n      data[ i ] = vector.x;\n      data[ i + n ] = vector.y;\n      data[ i + 2 * n ] = vector.z;\n      data[ i + 3 * n ] = vector.w;\n    }\n\n    return new Matrix( dimension, n, data, true );\n  };\n\n  return Matrix;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 4-dimensional Matrix\n *\n * TODO: consider adding affine flag if it will help performance (a la Matrix3)\n * TODO: get rotation angles\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Matrix4',['require','DOT/dot','DOT/Vector3','DOT/Vector4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  require( 'DOT/Vector3' );\n  require( 'DOT/Vector4' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  function Matrix4( v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type ) {\n\n    // entries stored in column-major format\n    this.entries = new Float32Array( 16 );\n\n    this.rowMajor(\n      v00 !== undefined ? v00 : 1, v01 !== undefined ? v01 : 0, v02 !== undefined ? v02 : 0, v03 !== undefined ? v03 : 0,\n      v10 !== undefined ? v10 : 0, v11 !== undefined ? v11 : 1, v12 !== undefined ? v12 : 0, v13 !== undefined ? v13 : 0,\n      v20 !== undefined ? v20 : 0, v21 !== undefined ? v21 : 0, v22 !== undefined ? v22 : 1, v23 !== undefined ? v23 : 0,\n      v30 !== undefined ? v30 : 0, v31 !== undefined ? v31 : 0, v32 !== undefined ? v32 : 0, v33 !== undefined ? v33 : 1,\n      type );\n  }\n\n  dot.register( 'Matrix4', Matrix4 );\n\n  Matrix4.Types = {\n    OTHER: 0, // default\n    IDENTITY: 1,\n    TRANSLATION_3D: 2,\n    SCALING: 3,\n    AFFINE: 4\n\n    // TODO: possibly add rotations\n  };\n\n  var Types = Matrix4.Types;\n\n  Matrix4.identity = function() {\n    return new Matrix4(\n      1, 0, 0, 0,\n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1,\n      Types.IDENTITY );\n  };\n\n  Matrix4.translation = function( x, y, z ) {\n    return new Matrix4(\n      1, 0, 0, x,\n      0, 1, 0, y,\n      0, 0, 1, z,\n      0, 0, 0, 1,\n      Types.TRANSLATION_3D );\n  };\n\n  Matrix4.translationFromVector = function( v ) { return Matrix4.translation( v.x, v.y, v.z ); };\n\n  Matrix4.scaling = function( x, y, z ) {\n    // allow using one parameter to scale everything\n    y = y === undefined ? x : y;\n    z = z === undefined ? x : z;\n\n    return new Matrix4(\n      x, 0, 0, 0,\n      0, y, 0, 0,\n      0, 0, z, 0,\n      0, 0, 0, 1,\n      Types.SCALING );\n  };\n\n  // axis is a normalized Vector3, angle in radians.\n  Matrix4.rotationAxisAngle = function( axis, angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n    var C = 1 - c;\n\n    return new Matrix4(\n      axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, 0,\n      axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, 0,\n      axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  // TODO: add in rotation from quaternion, and from quat + translation\n\n  Matrix4.rotationX = function( angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n\n    return new Matrix4(\n      1, 0, 0, 0,\n      0, c, -s, 0,\n      0, s, c, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  Matrix4.rotationY = function( angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n\n    return new Matrix4(\n      c, 0, s, 0,\n      0, 1, 0, 0,\n      -s, 0, c, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  Matrix4.rotationZ = function( angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n\n    return new Matrix4(\n      c, -s, 0, 0,\n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  // aspect === width / height\n  Matrix4.gluPerspective = function( fovYRadians, aspect, zNear, zFar ) {\n    var cotangent = Math.cos( fovYRadians ) / Math.sin( fovYRadians );\n\n    return new Matrix4(\n      cotangent / aspect, 0, 0, 0,\n      0, cotangent, 0, 0,\n      0, 0, ( zFar + zNear ) / ( zNear - zFar ), ( 2 * zFar * zNear ) / ( zNear - zFar ),\n      0, 0, -1, 0 );\n  };\n\n  Matrix4.prototype = {\n    constructor: Matrix4,\n\n    rowMajor: function( v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type ) {\n      this.entries[ 0 ] = v00;\n      this.entries[ 1 ] = v10;\n      this.entries[ 2 ] = v20;\n      this.entries[ 3 ] = v30;\n      this.entries[ 4 ] = v01;\n      this.entries[ 5 ] = v11;\n      this.entries[ 6 ] = v21;\n      this.entries[ 7 ] = v31;\n      this.entries[ 8 ] = v02;\n      this.entries[ 9 ] = v12;\n      this.entries[ 10 ] = v22;\n      this.entries[ 11 ] = v32;\n      this.entries[ 12 ] = v03;\n      this.entries[ 13 ] = v13;\n      this.entries[ 14 ] = v23;\n      this.entries[ 15 ] = v33;\n\n      // TODO: consider performance of the affine check here\n      this.type = type === undefined ? ( ( v30 === 0 && v31 === 0 && v32 === 0 && v33 === 1 ) ? Types.AFFINE : Types.OTHER ) : type;\n      return this;\n    },\n\n    columnMajor: function( v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32, v03, v13, v23, v33, type ) {\n      return this.rowMajor( v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type );\n    },\n\n    set: function( matrix ) {\n      return this.rowMajor(\n        matrix.m00(), matrix.m01(), matrix.m02(), matrix.m03(),\n        matrix.m10(), matrix.m11(), matrix.m12(), matrix.m13(),\n        matrix.m20(), matrix.m21(), matrix.m22(), matrix.m23(),\n        matrix.m30(), matrix.m31(), matrix.m32(), matrix.m33(),\n        matrix.type );\n    },\n\n    // convenience getters. inline usages of these when performance is critical? TODO: test performance of inlining these, with / without closure compiler\n    m00: function() { return this.entries[ 0 ]; },\n    m01: function() { return this.entries[ 4 ]; },\n    m02: function() { return this.entries[ 8 ]; },\n    m03: function() { return this.entries[ 12 ]; },\n    m10: function() { return this.entries[ 1 ]; },\n    m11: function() { return this.entries[ 5 ]; },\n    m12: function() { return this.entries[ 9 ]; },\n    m13: function() { return this.entries[ 13 ]; },\n    m20: function() { return this.entries[ 2 ]; },\n    m21: function() { return this.entries[ 6 ]; },\n    m22: function() { return this.entries[ 10 ]; },\n    m23: function() { return this.entries[ 14 ]; },\n    m30: function() { return this.entries[ 3 ]; },\n    m31: function() { return this.entries[ 7 ]; },\n    m32: function() { return this.entries[ 11 ]; },\n    m33: function() { return this.entries[ 15 ]; },\n\n    isFinite: function() {\n      return isFinite( this.m00() ) &&\n             isFinite( this.m01() ) &&\n             isFinite( this.m02() ) &&\n             isFinite( this.m03() ) &&\n             isFinite( this.m10() ) &&\n             isFinite( this.m11() ) &&\n             isFinite( this.m12() ) &&\n             isFinite( this.m13() ) &&\n             isFinite( this.m20() ) &&\n             isFinite( this.m21() ) &&\n             isFinite( this.m22() ) &&\n             isFinite( this.m23() ) &&\n             isFinite( this.m30() ) &&\n             isFinite( this.m31() ) &&\n             isFinite( this.m32() ) &&\n             isFinite( this.m33() );\n    },\n\n    // the 3D translation, assuming multiplication with a homogeneous vector\n    getTranslation: function() {\n      return new dot.Vector3( this.m03(), this.m13(), this.m23() );\n    },\n    get translation() { return this.getTranslation(); },\n\n    // returns a vector that is equivalent to ( T(1,0,0).magnitude(), T(0,1,0).magnitude(), T(0,0,1).magnitude() )\n    // where T is a relative transform\n    getScaleVector: function() {\n      var m0003 = this.m00() + this.m03();\n      var m1013 = this.m10() + this.m13();\n      var m2023 = this.m20() + this.m23();\n      var m3033 = this.m30() + this.m33();\n      var m0103 = this.m01() + this.m03();\n      var m1113 = this.m11() + this.m13();\n      var m2123 = this.m21() + this.m23();\n      var m3133 = this.m31() + this.m33();\n      var m0203 = this.m02() + this.m03();\n      var m1213 = this.m12() + this.m13();\n      var m2223 = this.m22() + this.m23();\n      var m3233 = this.m32() + this.m33();\n      return new dot.Vector3(\n        Math.sqrt( m0003 * m0003 + m1013 * m1013 + m2023 * m2023 + m3033 * m3033 ),\n        Math.sqrt( m0103 * m0103 + m1113 * m1113 + m2123 * m2123 + m3133 * m3133 ),\n        Math.sqrt( m0203 * m0203 + m1213 * m1213 + m2223 * m2223 + m3233 * m3233 ) );\n    },\n    get scaleVector() { return this.getScaleVector(); },\n\n    getCSSTransform: function() {\n      // See http://www.w3.org/TR/css3-transforms/, particularly Section 13 that discusses the SVG compatibility\n\n      // We need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that\n      // 20 is the largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\n      // See https://github.com/phetsims/dot/issues/36\n\n      // the inner part of a CSS3 transform, but remember to add the browser-specific parts!\n      // NOTE: the toFixed calls are inlined for performance reasons\n      return 'matrix3d(' +\n             this.entries[ 0 ].toFixed( 20 ) + ',' +\n             this.entries[ 1 ].toFixed( 20 ) + ',' +\n             this.entries[ 2 ].toFixed( 20 ) + ',' +\n             this.entries[ 3 ].toFixed( 20 ) + ',' +\n             this.entries[ 4 ].toFixed( 20 ) + ',' +\n             this.entries[ 5 ].toFixed( 20 ) + ',' +\n             this.entries[ 6 ].toFixed( 20 ) + ',' +\n             this.entries[ 7 ].toFixed( 20 ) + ',' +\n             this.entries[ 8 ].toFixed( 20 ) + ',' +\n             this.entries[ 9 ].toFixed( 20 ) + ',' +\n             this.entries[ 10 ].toFixed( 20 ) + ',' +\n             this.entries[ 11 ].toFixed( 20 ) + ',' +\n             this.entries[ 12 ].toFixed( 20 ) + ',' +\n             this.entries[ 13 ].toFixed( 20 ) + ',' +\n             this.entries[ 14 ].toFixed( 20 ) + ',' +\n             this.entries[ 15 ].toFixed( 20 ) + ')';\n    },\n    get cssTransform() { return this.getCSSTransform(); },\n\n    // exact equality\n    equals: function( m ) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() && this.m03() === m.m03() &&\n             this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() && this.m13() === m.m13() &&\n             this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22() && this.m23() === m.m23() &&\n             this.m30() === m.m30() && this.m31() === m.m31() && this.m32() === m.m32() && this.m33() === m.m33();\n    },\n\n    // equality within a margin of error\n    equalsEpsilon: function( m, epsilon ) {\n      return Math.abs( this.m00() - m.m00() ) < epsilon &&\n             Math.abs( this.m01() - m.m01() ) < epsilon &&\n             Math.abs( this.m02() - m.m02() ) < epsilon &&\n             Math.abs( this.m03() - m.m03() ) < epsilon &&\n             Math.abs( this.m10() - m.m10() ) < epsilon &&\n             Math.abs( this.m11() - m.m11() ) < epsilon &&\n             Math.abs( this.m12() - m.m12() ) < epsilon &&\n             Math.abs( this.m13() - m.m13() ) < epsilon &&\n             Math.abs( this.m20() - m.m20() ) < epsilon &&\n             Math.abs( this.m21() - m.m21() ) < epsilon &&\n             Math.abs( this.m22() - m.m22() ) < epsilon &&\n             Math.abs( this.m23() - m.m23() ) < epsilon &&\n             Math.abs( this.m30() - m.m30() ) < epsilon &&\n             Math.abs( this.m31() - m.m31() ) < epsilon &&\n             Math.abs( this.m32() - m.m32() ) < epsilon &&\n             Math.abs( this.m33() - m.m33() ) < epsilon;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations (returning a new matrix)\n     *----------------------------------------------------------------------------*/\n\n    copy: function() {\n      return new Matrix4(\n        this.m00(), this.m01(), this.m02(), this.m03(),\n        this.m10(), this.m11(), this.m12(), this.m13(),\n        this.m20(), this.m21(), this.m22(), this.m23(),\n        this.m30(), this.m31(), this.m32(), this.m33(),\n        this.type\n      );\n    },\n\n    plus: function( m ) {\n      return new Matrix4(\n        this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m03() + m.m03(),\n        this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m13() + m.m13(),\n        this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22(), this.m23() + m.m23(),\n        this.m30() + m.m30(), this.m31() + m.m31(), this.m32() + m.m32(), this.m33() + m.m33()\n      );\n    },\n\n    minus: function( m ) {\n      return new Matrix4(\n        this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m03() - m.m03(),\n        this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m13() - m.m13(),\n        this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22(), this.m23() - m.m23(),\n        this.m30() - m.m30(), this.m31() - m.m31(), this.m32() - m.m32(), this.m33() - m.m33()\n      );\n    },\n\n    transposed: function() {\n      return new Matrix4(\n        this.m00(), this.m10(), this.m20(), this.m30(),\n        this.m01(), this.m11(), this.m21(), this.m31(),\n        this.m02(), this.m12(), this.m22(), this.m32(),\n        this.m03(), this.m13(), this.m23(), this.m33() );\n    },\n\n    negated: function() {\n      return new Matrix4(\n        -this.m00(), -this.m01(), -this.m02(), -this.m03(),\n        -this.m10(), -this.m11(), -this.m12(), -this.m13(),\n        -this.m20(), -this.m21(), -this.m22(), -this.m23(),\n        -this.m30(), -this.m31(), -this.m32(), -this.m33() );\n    },\n\n    inverted: function() {\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return this;\n        case Types.TRANSLATION_3D:\n          return new Matrix4(\n            1, 0, 0, -this.m03(),\n            0, 1, 0, -this.m13(),\n            0, 0, 1, -this.m23(),\n            0, 0, 0, 1, Types.TRANSLATION_3D );\n        case Types.SCALING:\n          return new Matrix4(\n            1 / this.m00(), 0, 0, 0,\n            0, 1 / this.m11(), 0, 0,\n            0, 0, 1 / this.m22(), 0,\n            0, 0, 0, 1 / this.m33(), Types.SCALING );\n        case Types.AFFINE:\n        case Types.OTHER:\n          var det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return new Matrix4(\n              ( -this.m31() * this.m22() * this.m13() + this.m21() * this.m32() * this.m13() + this.m31() * this.m12() * this.m23() - this.m11() * this.m32() * this.m23() - this.m21() * this.m12() * this.m33() + this.m11() * this.m22() * this.m33() ) / det,\n              ( this.m31() * this.m22() * this.m03() - this.m21() * this.m32() * this.m03() - this.m31() * this.m02() * this.m23() + this.m01() * this.m32() * this.m23() + this.m21() * this.m02() * this.m33() - this.m01() * this.m22() * this.m33() ) / det,\n              ( -this.m31() * this.m12() * this.m03() + this.m11() * this.m32() * this.m03() + this.m31() * this.m02() * this.m13() - this.m01() * this.m32() * this.m13() - this.m11() * this.m02() * this.m33() + this.m01() * this.m12() * this.m33() ) / det,\n              ( this.m21() * this.m12() * this.m03() - this.m11() * this.m22() * this.m03() - this.m21() * this.m02() * this.m13() + this.m01() * this.m22() * this.m13() + this.m11() * this.m02() * this.m23() - this.m01() * this.m12() * this.m23() ) / det,\n              ( this.m30() * this.m22() * this.m13() - this.m20() * this.m32() * this.m13() - this.m30() * this.m12() * this.m23() + this.m10() * this.m32() * this.m23() + this.m20() * this.m12() * this.m33() - this.m10() * this.m22() * this.m33() ) / det,\n              ( -this.m30() * this.m22() * this.m03() + this.m20() * this.m32() * this.m03() + this.m30() * this.m02() * this.m23() - this.m00() * this.m32() * this.m23() - this.m20() * this.m02() * this.m33() + this.m00() * this.m22() * this.m33() ) / det,\n              ( this.m30() * this.m12() * this.m03() - this.m10() * this.m32() * this.m03() - this.m30() * this.m02() * this.m13() + this.m00() * this.m32() * this.m13() + this.m10() * this.m02() * this.m33() - this.m00() * this.m12() * this.m33() ) / det,\n              ( -this.m20() * this.m12() * this.m03() + this.m10() * this.m22() * this.m03() + this.m20() * this.m02() * this.m13() - this.m00() * this.m22() * this.m13() - this.m10() * this.m02() * this.m23() + this.m00() * this.m12() * this.m23() ) / det,\n              ( -this.m30() * this.m21() * this.m13() + this.m20() * this.m31() * this.m13() + this.m30() * this.m11() * this.m23() - this.m10() * this.m31() * this.m23() - this.m20() * this.m11() * this.m33() + this.m10() * this.m21() * this.m33() ) / det,\n              ( this.m30() * this.m21() * this.m03() - this.m20() * this.m31() * this.m03() - this.m30() * this.m01() * this.m23() + this.m00() * this.m31() * this.m23() + this.m20() * this.m01() * this.m33() - this.m00() * this.m21() * this.m33() ) / det,\n              ( -this.m30() * this.m11() * this.m03() + this.m10() * this.m31() * this.m03() + this.m30() * this.m01() * this.m13() - this.m00() * this.m31() * this.m13() - this.m10() * this.m01() * this.m33() + this.m00() * this.m11() * this.m33() ) / det,\n              ( this.m20() * this.m11() * this.m03() - this.m10() * this.m21() * this.m03() - this.m20() * this.m01() * this.m13() + this.m00() * this.m21() * this.m13() + this.m10() * this.m01() * this.m23() - this.m00() * this.m11() * this.m23() ) / det,\n              ( this.m30() * this.m21() * this.m12() - this.m20() * this.m31() * this.m12() - this.m30() * this.m11() * this.m22() + this.m10() * this.m31() * this.m22() + this.m20() * this.m11() * this.m32() - this.m10() * this.m21() * this.m32() ) / det,\n              ( -this.m30() * this.m21() * this.m02() + this.m20() * this.m31() * this.m02() + this.m30() * this.m01() * this.m22() - this.m00() * this.m31() * this.m22() - this.m20() * this.m01() * this.m32() + this.m00() * this.m21() * this.m32() ) / det,\n              ( this.m30() * this.m11() * this.m02() - this.m10() * this.m31() * this.m02() - this.m30() * this.m01() * this.m12() + this.m00() * this.m31() * this.m12() + this.m10() * this.m01() * this.m32() - this.m00() * this.m11() * this.m32() ) / det,\n              ( -this.m20() * this.m11() * this.m02() + this.m10() * this.m21() * this.m02() + this.m20() * this.m01() * this.m12() - this.m00() * this.m21() * this.m12() - this.m10() * this.m01() * this.m22() + this.m00() * this.m11() * this.m22() ) / det\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        default:\n          throw new Error( 'Matrix3.inverted with unknown type: ' + this.type );\n      }\n    },\n\n    timesMatrix: function( m ) {\n      // I * M === M * I === I (the identity)\n      if ( this.type === Types.IDENTITY || m.type === Types.IDENTITY ) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n\n      if ( this.type === m.type ) {\n        // currently two matrices of the same type will result in the same result type\n        if ( this.type === Types.TRANSLATION_3D ) {\n          // faster combination of translations\n          return new Matrix4(\n            1, 0, 0, this.m03() + m.m02(),\n            0, 1, 0, this.m13() + m.m12(),\n            0, 0, 1, this.m23() + m.m23(),\n            0, 0, 0, 1, Types.TRANSLATION_3D );\n        }\n        else if ( this.type === Types.SCALING ) {\n          // faster combination of scaling\n          return new Matrix4(\n            this.m00() * m.m00(), 0, 0, 0,\n            0, this.m11() * m.m11(), 0, 0,\n            0, 0, this.m22() * m.m22(), 0,\n            0, 0, 0, 1, Types.SCALING );\n        }\n      }\n\n      if ( this.type !== Types.OTHER && m.type !== Types.OTHER ) {\n        // currently two matrices that are anything but \"other\" are technically affine, and the result will be affine\n\n        // affine case\n        return new Matrix4(\n          this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(),\n          this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(),\n          this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(),\n          this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03(),\n          this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(),\n          this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(),\n          this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(),\n          this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13(),\n          this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(),\n          this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(),\n          this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22(),\n          this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23(),\n          0, 0, 0, 1, Types.AFFINE );\n      }\n\n      // general case\n      return new Matrix4(\n        this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20() + this.m03() * m.m30(),\n        this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21() + this.m03() * m.m31(),\n        this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22() + this.m03() * m.m32(),\n        this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03() * m.m33(),\n        this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20() + this.m13() * m.m30(),\n        this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21() + this.m13() * m.m31(),\n        this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22() + this.m13() * m.m32(),\n        this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13() * m.m33(),\n        this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20() + this.m23() * m.m30(),\n        this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21() + this.m23() * m.m31(),\n        this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() + this.m23() * m.m32(),\n        this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23() * m.m33(),\n        this.m30() * m.m00() + this.m31() * m.m10() + this.m32() * m.m20() + this.m33() * m.m30(),\n        this.m30() * m.m01() + this.m31() * m.m11() + this.m32() * m.m21() + this.m33() * m.m31(),\n        this.m30() * m.m02() + this.m31() * m.m12() + this.m32() * m.m22() + this.m33() * m.m32(),\n        this.m30() * m.m03() + this.m31() * m.m13() + this.m32() * m.m23() + this.m33() * m.m33() );\n    },\n\n    timesVector4: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z + this.m03() * v.w;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z + this.m13() * v.w;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z + this.m23() * v.w;\n      var w = this.m30() * v.x + this.m31() * v.y + this.m32() * v.z + this.m33() * v.w;\n      return new dot.Vector4( x, y, z, w );\n    },\n\n    timesVector3: function( v ) {\n      return this.timesVector4( v.toVector4() ).toVector3();\n    },\n\n    timesTransposeVector4: function( v ) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z + this.m30() * v.w;\n      var y = this.m01() * v.x + this.m11() * v.y + this.m21() * v.z + this.m31() * v.w;\n      var z = this.m02() * v.x + this.m12() * v.y + this.m22() * v.z + this.m32() * v.w;\n      var w = this.m03() * v.x + this.m13() * v.y + this.m23() * v.z + this.m33() * v.w;\n      return new dot.Vector4( x, y, z, w );\n    },\n\n    timesTransposeVector3: function( v ) {\n      return this.timesTransposeVector4( v.toVector4() ).toVector3();\n    },\n\n    timesRelativeVector3: function( v ) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z;\n      var y = this.m01() * v.y + this.m11() * v.y + this.m21() * v.z;\n      var z = this.m02() * v.z + this.m12() * v.y + this.m22() * v.z;\n      return new dot.Vector3( x, y, z );\n    },\n\n    getDeterminant: function() {\n      return this.m03() * this.m12() * this.m21() * this.m30() -\n             this.m02() * this.m13() * this.m21() * this.m30() -\n             this.m03() * this.m11() * this.m22() * this.m30() +\n             this.m01() * this.m13() * this.m22() * this.m30() +\n             this.m02() * this.m11() * this.m23() * this.m30() -\n             this.m01() * this.m12() * this.m23() * this.m30() -\n             this.m03() * this.m12() * this.m20() * this.m31() +\n             this.m02() * this.m13() * this.m20() * this.m31() +\n             this.m03() * this.m10() * this.m22() * this.m31() -\n             this.m00() * this.m13() * this.m22() * this.m31() -\n             this.m02() * this.m10() * this.m23() * this.m31() +\n             this.m00() * this.m12() * this.m23() * this.m31() +\n             this.m03() * this.m11() * this.m20() * this.m32() -\n             this.m01() * this.m13() * this.m20() * this.m32() -\n             this.m03() * this.m10() * this.m21() * this.m32() +\n             this.m00() * this.m13() * this.m21() * this.m32() +\n             this.m01() * this.m10() * this.m23() * this.m32() -\n             this.m00() * this.m11() * this.m23() * this.m32() -\n             this.m02() * this.m11() * this.m20() * this.m33() +\n             this.m01() * this.m12() * this.m20() * this.m33() +\n             this.m02() * this.m10() * this.m21() * this.m33() -\n             this.m00() * this.m12() * this.m21() * this.m33() -\n             this.m01() * this.m10() * this.m22() * this.m33() +\n             this.m00() * this.m11() * this.m22() * this.m33();\n    },\n    get determinant() { return this.getDeterminant(); },\n\n    toString: function() {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + ' ' + this.m03() + '\\n' +\n             this.m10() + ' ' + this.m11() + ' ' + this.m12() + ' ' + this.m13() + '\\n' +\n             this.m20() + ' ' + this.m21() + ' ' + this.m22() + ' ' + this.m23() + '\\n' +\n             this.m30() + ' ' + this.m31() + ' ' + this.m32() + ' ' + this.m33();\n    },\n\n    makeImmutable: function() {\n      this.rowMajor = function() {\n        throw new Error( 'Cannot modify immutable matrix' );\n      };\n    }\n  };\n\n  // create an immutable\n  Matrix4.IDENTITY = new Matrix4();\n  Matrix4.IDENTITY.makeImmutable();\n\n  return Matrix4;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 3-dimensional Matrix\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Matrix3',['require','DOT/dot','PHET_CORE/Poolable','DOT/Vector2','DOT/Vector3','DOT/Matrix4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  var FastArray = dot.FastArray;\n\n  require( 'DOT/Vector2' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Matrix4' );\n\n  var identityFastArray = new FastArray( 9 );\n  identityFastArray[ 0 ] = 1;\n  identityFastArray[ 4 ] = 1;\n  identityFastArray[ 8 ] = 1;\n\n  var createIdentityArray = FastArray === Array ?\n                            function() {\n                              return [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n                            } :\n                            function() {\n                              return new FastArray( identityFastArray );\n                            };\n\n  // Create an identity matrix\n  function Matrix3( argumentsShouldNotExist ) {\n\n    //Make sure no clients are expecting to create a matrix with non-identity values\n    assert && assert( !argumentsShouldNotExist, 'Matrix3 constructor should not be called with any arguments.  Use Matrix3.createFromPool()/Matrix3.identity()/etc.' );\n\n    // entries stored in column-major format\n    this.entries = createIdentityArray();\n\n    phetAllocation && phetAllocation( 'Matrix3' );\n    this.type = Types.IDENTITY;\n  }\n\n  dot.register( 'Matrix3', Matrix3 );\n\n  Matrix3.Types = {\n    // NOTE: if an inverted matrix of a type is not that type, change inverted()!\n    // NOTE: if two matrices with identical types are multiplied, the result should have the same type. if not, changed timesMatrix()!\n    // NOTE: on adding a type, exaustively check all type usage\n    OTHER: 0, // default\n    IDENTITY: 1,\n    TRANSLATION_2D: 2,\n    SCALING: 3,\n    AFFINE: 4\n\n    // TODO: possibly add rotations\n  };\n\n  var Types = Matrix3.Types;\n\n  Matrix3.identity = function() { return Matrix3.dirtyFromPool().setToIdentity(); };\n  Matrix3.translation = function( x, y ) { return Matrix3.dirtyFromPool().setToTranslation( x, y ); };\n  Matrix3.translationFromVector = function( v ) { return Matrix3.translation( v.x, v.y ); };\n  Matrix3.scaling = function( x, y ) { return Matrix3.dirtyFromPool().setToScale( x, y ); };\n  Matrix3.scale = Matrix3.scaling;\n  Matrix3.affine = function( m00, m10, m01, m11, m02, m12 ) { return Matrix3.dirtyFromPool().setToAffine( m00, m01, m02, m10, m11, m12 ); };\n  Matrix3.rowMajor = function( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ) { return Matrix3.dirtyFromPool().rowMajor( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ); };\n\n  // axis is a normalized Vector3, angle in radians.\n  Matrix3.rotationAxisAngle = function( axis, angle ) { return Matrix3.dirtyFromPool().setToRotationAxisAngle( axis, angle ); };\n\n  Matrix3.rotationX = function( angle ) { return Matrix3.dirtyFromPool().setToRotationX( angle ); };\n  Matrix3.rotationY = function( angle ) { return Matrix3.dirtyFromPool().setToRotationY( angle ); };\n  Matrix3.rotationZ = function( angle ) { return Matrix3.dirtyFromPool().setToRotationZ( angle ); };\n\n  // standard 2d rotation\n  Matrix3.rotation2 = Matrix3.rotationZ;\n\n  Matrix3.rotationAround = function( angle, x, y ) {\n    return Matrix3.translation( x, y ).timesMatrix( Matrix3.rotation2( angle ) ).timesMatrix( Matrix3.translation( -x, -y ) );\n  };\n\n  Matrix3.rotationAroundPoint = function( angle, point ) {\n    return Matrix3.rotationAround( angle, point.x, point.y );\n  };\n\n  Matrix3.fromSVGMatrix = function( svgMatrix ) { return Matrix3.dirtyFromPool().setToSVGMatrix( svgMatrix ); };\n\n  // a rotation matrix that rotates A to B, by rotating about the axis A.cross( B ) -- Shortest path. ideally should be unit vectors\n  Matrix3.rotateAToB = function( a, b ) { return Matrix3.dirtyFromPool().setRotationAToB( a, b ); };\n\n  Matrix3.prototype = {\n    constructor: Matrix3,\n\n    /*---------------------------------------------------------------------------*\n     * \"Properties\"\n     *----------------------------------------------------------------------------*/\n\n    // convenience getters. inline usages of these when performance is critical? TODO: test performance of inlining these, with / without closure compiler\n    m00: function() { return this.entries[ 0 ]; },\n    m01: function() { return this.entries[ 3 ]; },\n    m02: function() { return this.entries[ 6 ]; },\n    m10: function() { return this.entries[ 1 ]; },\n    m11: function() { return this.entries[ 4 ]; },\n    m12: function() { return this.entries[ 7 ]; },\n    m20: function() { return this.entries[ 2 ]; },\n    m21: function() { return this.entries[ 5 ]; },\n    m22: function() { return this.entries[ 8 ]; },\n\n    isIdentity: function() {\n      return this.type === Types.IDENTITY || this.equals( Matrix3.IDENTITY );\n    },\n\n    // returning false means \"inconclusive, may be identity or not\"\n    isFastIdentity: function() {\n      return this.type === Types.IDENTITY;\n    },\n\n    isAffine: function() {\n      return this.type === Types.AFFINE || ( this.m20() === 0 && this.m21() === 0 && this.m22() === 1 );\n    },\n\n    // if it's an affine matrix where the components of transforms are independent\n    // i.e. constructed from arbitrary component scaling and translation.\n    isAligned: function() {\n      // non-diagonal non-translation entries should all be zero.\n      return this.isAffine() && this.m01() === 0 && this.m10() === 0;\n    },\n\n    // if it's an affine matrix where the components of transforms are independent, but may be switched (unlike isAligned)\n    // i.e. the 2x2 rotational sub-matrix is of one of the two forms:\n    // A 0  or  0  A\n    // 0 B      B  0\n    // This means that moving a transformed point by (x,0) or (0,y) will result in a motion along one of the axes.\n    isAxisAligned: function() {\n      return this.isAffine() && ( ( this.m01() === 0 && this.m10() === 0 ) || ( this.m00() === 0 && this.m11() === 0 ) );\n    },\n\n    isFinite: function() {\n      return isFinite( this.m00() ) &&\n             isFinite( this.m01() ) &&\n             isFinite( this.m02() ) &&\n             isFinite( this.m10() ) &&\n             isFinite( this.m11() ) &&\n             isFinite( this.m12() ) &&\n             isFinite( this.m20() ) &&\n             isFinite( this.m21() ) &&\n             isFinite( this.m22() );\n    },\n\n    getDeterminant: function() {\n      return this.m00() * this.m11() * this.m22() + this.m01() * this.m12() * this.m20() + this.m02() * this.m10() * this.m21() - this.m02() * this.m11() * this.m20() - this.m01() * this.m10() * this.m22() - this.m00() * this.m12() * this.m21();\n    },\n    get determinant() { return this.getDeterminant(); },\n\n    // the 2D translation, assuming multiplication with a homogeneous vector\n    getTranslation: function() {\n      return new dot.Vector2( this.m02(), this.m12() );\n    },\n    get translation() { return this.getTranslation(); },\n\n    // returns a vector that is equivalent to ( T(1,0).magnitude(), T(0,1).magnitude() ) where T is a relative transform\n    getScaleVector: function() {\n      return new dot.Vector2(\n        Math.sqrt( this.m00() * this.m00() + this.m10() * this.m10() ),\n        Math.sqrt( this.m01() * this.m01() + this.m11() * this.m11() ) );\n    },\n    get scaleVector() { return this.getScaleVector(); },\n\n    // angle in radians for the 2d rotation from this matrix, between pi, -pi\n    getRotation: function() {\n      return Math.atan2( this.m10(), this.m00() );\n    },\n    get rotation() { return this.getRotation(); },\n\n    toMatrix4: function() {\n      return new dot.Matrix4(\n        this.m00(), this.m01(), this.m02(), 0,\n        this.m10(), this.m11(), this.m12(), 0,\n        this.m20(), this.m21(), this.m22(), 0,\n        0, 0, 0, 1 );\n    },\n\n    toAffineMatrix4: function() {\n      return new dot.Matrix4(\n        this.m00(), this.m01(), 0, this.m02(),\n        this.m10(), this.m11(), 0, this.m12(),\n        0, 0, 1, 0,\n        0, 0, 0, 1 );\n    },\n\n    toString: function() {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + '\\n' +\n             this.m10() + ' ' + this.m11() + ' ' + this.m12() + '\\n' +\n             this.m20() + ' ' + this.m21() + ' ' + this.m22();\n    },\n\n    toSVGMatrix: function() {\n      var result = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' ).createSVGMatrix();\n\n      // top two rows\n      result.a = this.m00();\n      result.b = this.m10();\n      result.c = this.m01();\n      result.d = this.m11();\n      result.e = this.m02();\n      result.f = this.m12();\n\n      return result;\n    },\n\n    getCSSTransform: function() {\n      // See http://www.w3.org/TR/css3-transforms/, particularly Section 13 that discusses the SVG compatibility\n\n      // We need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that\n      // 20 is the largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\n      // See https://github.com/phetsims/dot/issues/36\n\n      // the inner part of a CSS3 transform, but remember to add the browser-specific parts!\n      // NOTE: the toFixed calls are inlined for performance reasons\n      return 'matrix(' + this.entries[ 0 ].toFixed( 20 ) + ',' + this.entries[ 1 ].toFixed( 20 ) + ',' + this.entries[ 3 ].toFixed( 20 ) + ',' + this.entries[ 4 ].toFixed( 20 ) + ',' + this.entries[ 6 ].toFixed( 20 ) + ',' + this.entries[ 7 ].toFixed( 20 ) + ')';\n    },\n    get cssTransform() { return this.getCSSTransform(); },\n\n    getSVGTransform: function() {\n      // SVG transform presentation attribute. See http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n\n      // we need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that\n      function svgNumber( number ) {\n        // Largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\n        // See https://github.com/phetsims/dot/issues/36\n        return number.toFixed( 20 );\n      }\n\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return '';\n        case Types.TRANSLATION_2D:\n          return 'translate(' + svgNumber( this.entries[ 6 ] ) + ',' + svgNumber( this.entries[ 7 ] ) + ')';\n        case Types.SCALING:\n          return 'scale(' + svgNumber( this.entries[ 0 ] ) + ( this.entries[ 0 ] === this.entries[ 4 ] ? '' : ',' + svgNumber( this.entries[ 4 ] ) ) + ')';\n        default:\n          return 'matrix(' + svgNumber( this.entries[ 0 ] ) + ',' + svgNumber( this.entries[ 1 ] ) + ',' + svgNumber( this.entries[ 3 ] ) + ',' + svgNumber( this.entries[ 4 ] ) + ',' + svgNumber( this.entries[ 6 ] ) + ',' + svgNumber( this.entries[ 7 ] ) + ')';\n      }\n    },\n    get svgTransform() { return this.getSVGTransform(); },\n\n    // returns a parameter object suitable for use with jQuery's .css()\n    getCSSTransformStyles: function() {\n      var transformCSS = this.getCSSTransform();\n\n      // notes on triggering hardware acceleration: http://creativejs.com/2011/12/day-2-gpu-accelerate-your-dom-elements/\n      return {\n        // force iOS hardware acceleration\n        '-webkit-perspective': 1000,\n        '-webkit-backface-visibility': 'hidden',\n\n        '-webkit-transform': transformCSS + ' translateZ(0)', // trigger hardware acceleration if possible\n        '-moz-transform': transformCSS + ' translateZ(0)', // trigger hardware acceleration if possible\n        '-ms-transform': transformCSS,\n        '-o-transform': transformCSS,\n        'transform': transformCSS,\n        'transform-origin': 'top left', // at the origin of the component. consider 0px 0px instead. Critical, since otherwise this defaults to 50% 50%!!! see https://developer.mozilla.org/en-US/docs/CSS/transform-origin\n        '-ms-transform-origin': 'top left' // TODO: do we need other platform-specific transform-origin styles?\n      };\n    },\n    get cssTransformStyles() { return this.getCSSTransformStyles(); },\n\n    // exact equality\n    equals: function( m ) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() &&\n             this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() &&\n             this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22();\n    },\n\n    // equality within a margin of error\n    equalsEpsilon: function( m, epsilon ) {\n      return Math.abs( this.m00() - m.m00() ) < epsilon && Math.abs( this.m01() - m.m01() ) < epsilon && Math.abs( this.m02() - m.m02() ) < epsilon &&\n             Math.abs( this.m10() - m.m10() ) < epsilon && Math.abs( this.m11() - m.m11() ) < epsilon && Math.abs( this.m12() - m.m12() ) < epsilon &&\n             Math.abs( this.m20() - m.m20() ) < epsilon && Math.abs( this.m21() - m.m21() ) < epsilon && Math.abs( this.m22() - m.m22() ) < epsilon;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations (returns a new matrix)\n     *----------------------------------------------------------------------------*/\n\n    copy: function() {\n      return Matrix3.createFromPool(\n        this.m00(), this.m01(), this.m02(),\n        this.m10(), this.m11(), this.m12(),\n        this.m20(), this.m21(), this.m22(),\n        this.type\n      );\n    },\n\n    plus: function( m ) {\n      return Matrix3.createFromPool(\n        this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(),\n        this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(),\n        this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22()\n      );\n    },\n\n    minus: function( m ) {\n      return Matrix3.createFromPool(\n        this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(),\n        this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(),\n        this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22()\n      );\n    },\n\n    transposed: function() {\n      return Matrix3.createFromPool(\n        this.m00(), this.m10(), this.m20(),\n        this.m01(), this.m11(), this.m21(),\n        this.m02(), this.m12(), this.m22(), ( this.type === Types.IDENTITY || this.type === Types.SCALING ) ? this.type : undefined\n      );\n    },\n\n    negated: function() {\n      return Matrix3.createFromPool(\n        -this.m00(), -this.m01(), -this.m02(),\n        -this.m10(), -this.m11(), -this.m12(),\n        -this.m20(), -this.m21(), -this.m22()\n      );\n    },\n\n    inverted: function() {\n      var det;\n\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return this;\n        case Types.TRANSLATION_2D:\n          return Matrix3.createFromPool(\n            1, 0, -this.m02(),\n            0, 1, -this.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        case Types.SCALING:\n          return Matrix3.createFromPool(\n            1 / this.m00(), 0, 0,\n            0, 1 / this.m11(), 0,\n            0, 0, 1 / this.m22(), Types.SCALING );\n        case Types.AFFINE:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return Matrix3.createFromPool(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              0, 0, 1, Types.AFFINE\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        case Types.OTHER:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return Matrix3.createFromPool(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              ( -this.m11() * this.m20() + this.m10() * this.m21() ) / det,\n              ( this.m01() * this.m20() - this.m00() * this.m21() ) / det,\n              ( -this.m01() * this.m10() + this.m00() * this.m11() ) / det,\n              Types.OTHER\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        default:\n          throw new Error( 'Matrix3.inverted with unknown type: ' + this.type );\n      }\n    },\n\n    timesMatrix: function( m ) {\n      // I * M === M * I === M (the identity)\n      if ( this.type === Types.IDENTITY || m.type === Types.IDENTITY ) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n\n      if ( this.type === m.type ) {\n        // currently two matrices of the same type will result in the same result type\n        if ( this.type === Types.TRANSLATION_2D ) {\n          // faster combination of translations\n          return Matrix3.createFromPool(\n            1, 0, this.m02() + m.m02(),\n            0, 1, this.m12() + m.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        }\n        else if ( this.type === Types.SCALING ) {\n          // faster combination of scaling\n          return Matrix3.createFromPool(\n            this.m00() * m.m00(), 0, 0,\n            0, this.m11() * m.m11(), 0,\n            0, 0, 1, Types.SCALING );\n        }\n      }\n\n      if ( this.type !== Types.OTHER && m.type !== Types.OTHER ) {\n        // currently two matrices that are anything but \"other\" are technically affine, and the result will be affine\n\n        // affine case\n        return Matrix3.createFromPool(\n          this.m00() * m.m00() + this.m01() * m.m10(),\n          this.m00() * m.m01() + this.m01() * m.m11(),\n          this.m00() * m.m02() + this.m01() * m.m12() + this.m02(),\n          this.m10() * m.m00() + this.m11() * m.m10(),\n          this.m10() * m.m01() + this.m11() * m.m11(),\n          this.m10() * m.m02() + this.m11() * m.m12() + this.m12(),\n          0, 0, 1, Types.AFFINE );\n      }\n\n      // general case\n      return Matrix3.createFromPool(\n        this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(),\n        this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(),\n        this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(),\n        this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(),\n        this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(),\n        this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(),\n        this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(),\n        this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(),\n        this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations (returns new form of a parameter)\n     *----------------------------------------------------------------------------*/\n\n    timesVector2: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02();\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12();\n      return new dot.Vector2( x, y );\n    },\n\n    timesVector3: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z;\n      return new dot.Vector3( x, y, z );\n    },\n\n    timesTransposeVector2: function( v ) {\n      var x = this.m00() * v.x + this.m10() * v.y;\n      var y = this.m01() * v.x + this.m11() * v.y;\n      return new dot.Vector2( x, y );\n    },\n\n    // TODO: this operation seems to not work for transformDelta2, should be vetted\n    timesRelativeVector2: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y;\n      var y = this.m10() * v.y + this.m11() * v.y;\n      return new dot.Vector2( x, y );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations (changes this matrix)\n     *----------------------------------------------------------------------------*/\n\n    // every mutable method goes through rowMajor\n    rowMajor: function( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ) {\n      this.entries[ 0 ] = v00;\n      this.entries[ 1 ] = v10;\n      this.entries[ 2 ] = v20;\n      this.entries[ 3 ] = v01;\n      this.entries[ 4 ] = v11;\n      this.entries[ 5 ] = v21;\n      this.entries[ 6 ] = v02;\n      this.entries[ 7 ] = v12;\n      this.entries[ 8 ] = v22;\n\n      // TODO: consider performance of the affine check here\n      this.type = type === undefined ? ( ( v20 === 0 && v21 === 0 && v22 === 1 ) ? Types.AFFINE : Types.OTHER ) : type;\n      return this;\n    },\n\n    set: function( matrix ) {\n      return this.rowMajor(\n        matrix.m00(), matrix.m01(), matrix.m02(),\n        matrix.m10(), matrix.m11(), matrix.m12(),\n        matrix.m20(), matrix.m21(), matrix.m22(),\n        matrix.type );\n    },\n\n    setArray: function( array ) {\n      return this.rowMajor(\n        array[ 0 ], array[ 3 ], array[ 6 ],\n        array[ 1 ], array[ 4 ], array[ 7 ],\n        array[ 2 ], array[ 5 ], array[ 8 ] );\n    },\n\n    // component setters\n    set00: function( value ) {\n      this.entries[ 0 ] = value;\n      return this;\n    },\n    set01: function( value ) {\n      this.entries[ 3 ] = value;\n      return this;\n    },\n    set02: function( value ) {\n      this.entries[ 6 ] = value;\n      return this;\n    },\n    set10: function( value ) {\n      this.entries[ 1 ] = value;\n      return this;\n    },\n    set11: function( value ) {\n      this.entries[ 4 ] = value;\n      return this;\n    },\n    set12: function( value ) {\n      this.entries[ 7 ] = value;\n      return this;\n    },\n    set20: function( value ) {\n      this.entries[ 2 ] = value;\n      return this;\n    },\n    set21: function( value ) {\n      this.entries[ 5 ] = value;\n      return this;\n    },\n    set22: function( value ) {\n      this.entries[ 8 ] = value;\n      return this;\n    },\n\n    makeImmutable: function() {\n      this.rowMajor = function() {\n        throw new Error( 'Cannot modify immutable matrix' );\n      };\n      return this;\n    },\n\n    columnMajor: function( v00, v10, v20, v01, v11, v21, v02, v12, v22, type ) {\n      return this.rowMajor( v00, v01, v02, v10, v11, v12, v20, v21, v22, type );\n    },\n\n    add: function( m ) {\n      return this.rowMajor(\n        this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(),\n        this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(),\n        this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22()\n      );\n    },\n\n    subtract: function( m ) {\n      return this.rowMajor(\n        this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(),\n        this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(),\n        this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22()\n      );\n    },\n\n    transpose: function() {\n      return this.rowMajor(\n        this.m00(), this.m10(), this.m20(),\n        this.m01(), this.m11(), this.m21(),\n        this.m02(), this.m12(), this.m22(),\n        ( this.type === Types.IDENTITY || this.type === Types.SCALING ) ? this.type : undefined\n      );\n    },\n\n    negate: function() {\n      return this.rowMajor(\n        -this.m00(), -this.m01(), -this.m02(),\n        -this.m10(), -this.m11(), -this.m12(),\n        -this.m20(), -this.m21(), -this.m22()\n      );\n    },\n\n    invert: function() {\n      var det;\n\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return this;\n        case Types.TRANSLATION_2D:\n          return this.rowMajor(\n            1, 0, -this.m02(),\n            0, 1, -this.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        case Types.SCALING:\n          return this.rowMajor(\n            1 / this.m00(), 0, 0,\n            0, 1 / this.m11(), 0,\n            0, 0, 1 / this.m22(), Types.SCALING );\n        case Types.AFFINE:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return this.rowMajor(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              0, 0, 1, Types.AFFINE\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        case Types.OTHER:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return this.rowMajor(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              ( -this.m11() * this.m20() + this.m10() * this.m21() ) / det,\n              ( this.m01() * this.m20() - this.m00() * this.m21() ) / det,\n              ( -this.m01() * this.m10() + this.m00() * this.m11() ) / det,\n              Types.OTHER\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        default:\n          throw new Error( 'Matrix3.inverted with unknown type: ' + this.type );\n      }\n    },\n\n    multiplyMatrix: function( m ) {\n      // M * I === M (the identity)\n      if ( m.type === Types.IDENTITY ) {\n        // no change needed\n        return this;\n      }\n\n      // I * M === M (the identity)\n      if ( this.type === Types.IDENTITY ) {\n        // copy the other matrix to us\n        return this.set( m );\n      }\n\n      if ( this.type === m.type ) {\n        // currently two matrices of the same type will result in the same result type\n        if ( this.type === Types.TRANSLATION_2D ) {\n          // faster combination of translations\n          return this.rowMajor(\n            1, 0, this.m02() + m.m02(),\n            0, 1, this.m12() + m.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        }\n        else if ( this.type === Types.SCALING ) {\n          // faster combination of scaling\n          return this.rowMajor(\n            this.m00() * m.m00(), 0, 0,\n            0, this.m11() * m.m11(), 0,\n            0, 0, 1, Types.SCALING );\n        }\n      }\n\n      if ( this.type !== Types.OTHER && m.type !== Types.OTHER ) {\n        // currently two matrices that are anything but \"other\" are technically affine, and the result will be affine\n\n        // affine case\n        return this.rowMajor(\n          this.m00() * m.m00() + this.m01() * m.m10(),\n          this.m00() * m.m01() + this.m01() * m.m11(),\n          this.m00() * m.m02() + this.m01() * m.m12() + this.m02(),\n          this.m10() * m.m00() + this.m11() * m.m10(),\n          this.m10() * m.m01() + this.m11() * m.m11(),\n          this.m10() * m.m02() + this.m11() * m.m12() + this.m12(),\n          0, 0, 1, Types.AFFINE );\n      }\n\n      // general case\n      return this.rowMajor(\n        this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(),\n        this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(),\n        this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(),\n        this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(),\n        this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(),\n        this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(),\n        this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(),\n        this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(),\n        this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() );\n    },\n\n    prependTranslation: function( x, y ) {\n      this.set02( this.m02() + x );\n      this.set12( this.m12() + y );\n\n      if ( this.type === Types.IDENTITY || this.type === Types.TRANSLATION_2D ) {\n        this.type = Types.TRANSLATION_2D;\n      }\n      else if ( this.type === Types.OTHER ) {\n        this.type = Types.OTHER;\n      }\n      else {\n        this.type = Types.AFFINE;\n      }\n      return this; // for chaining\n    },\n\n    setToIdentity: function() {\n      return this.rowMajor(\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n        Types.IDENTITY );\n    },\n\n    setToTranslation: function( x, y ) {\n      return this.rowMajor(\n        1, 0, x,\n        0, 1, y,\n        0, 0, 1,\n        Types.TRANSLATION_2D );\n    },\n\n    setToScale: function( x, y ) {\n      // allow using one parameter to scale everything\n      y = y === undefined ? x : y;\n\n      return this.rowMajor(\n        x, 0, 0,\n        0, y, 0,\n        0, 0, 1,\n        Types.SCALING );\n    },\n\n    // row major\n    setToAffine: function( m00, m01, m02, m10, m11, m12 ) {\n      return this.rowMajor( m00, m01, m02, m10, m11, m12, 0, 0, 1, Types.AFFINE );\n    },\n\n    // axis is a normalized Vector3, angle in radians.\n    setToRotationAxisAngle: function( axis, angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n      var C = 1 - c;\n\n      return this.rowMajor(\n        axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s,\n        axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s,\n        axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c,\n        Types.OTHER );\n    },\n\n    setToRotationX: function( angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n\n      return this.rowMajor(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c,\n        Types.OTHER );\n    },\n\n    setToRotationY: function( angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n\n      return this.rowMajor(\n        c, 0, s,\n        0, 1, 0,\n        -s, 0, c,\n        Types.OTHER );\n    },\n\n    setToRotationZ: function( angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n\n      return this.rowMajor(\n        c, -s, 0,\n        s, c, 0,\n        0, 0, 1,\n        Types.AFFINE );\n    },\n\n    setToSVGMatrix: function( svgMatrix ) {\n      return this.rowMajor(\n        svgMatrix.a, svgMatrix.c, svgMatrix.e,\n        svgMatrix.b, svgMatrix.d, svgMatrix.f,\n        0, 0, 1,\n        Types.AFFINE );\n    },\n\n    // a rotation matrix that rotates A to B (Vector3 instances), by rotating about the axis A.cross( B ) -- Shortest path. ideally should be unit vectors\n    setRotationAToB: function( a, b ) {\n      // see http://graphics.cs.brown.edu/~jfh/papers/Moller-EBA-1999/paper.pdf for information on this implementation\n      var start = a;\n      var end = b;\n\n      var epsilon = 0.0001;\n\n      var e;\n      var h;\n      var f;\n\n      var v = start.cross( end );\n      e = start.dot( end );\n      f = ( e < 0 ) ? -e : e;\n\n      // if \"from\" and \"to\" vectors are nearly parallel\n      if ( f > 1.0 - epsilon ) {\n        var c1;\n        var c2;\n        var c3;\n\n        var x = new dot.Vector3(\n          ( start.x > 0.0 ) ? start.x : -start.x,\n          ( start.y > 0.0 ) ? start.y : -start.y,\n          ( start.z > 0.0 ) ? start.z : -start.z\n        );\n\n        if ( x.x < x.y ) {\n          if ( x.x < x.z ) {\n            x = dot.Vector3.X_UNIT;\n          }\n          else {\n            x = dot.Vector3.Z_UNIT;\n          }\n        }\n        else {\n          if ( x.y < x.z ) {\n            x = dot.Vector3.Y_UNIT;\n          }\n          else {\n            x = dot.Vector3.Z_UNIT;\n          }\n        }\n\n        var u = x.minus( start );\n        v = x.minus( end );\n\n        c1 = 2.0 / u.dot( u );\n        c2 = 2.0 / v.dot( v );\n        c3 = c1 * c2 * u.dot( v );\n\n        return this.rowMajor(\n          -c1 * u.x * u.x - c2 * v.x * v.x + c3 * v.x * u.x + 1,\n          -c1 * u.x * u.y - c2 * v.x * v.y + c3 * v.x * u.y,\n          -c1 * u.x * u.z - c2 * v.x * v.z + c3 * v.x * u.z,\n          -c1 * u.y * u.x - c2 * v.y * v.x + c3 * v.y * u.x,\n          -c1 * u.y * u.y - c2 * v.y * v.y + c3 * v.y * u.y + 1,\n          -c1 * u.y * u.z - c2 * v.y * v.z + c3 * v.y * u.z,\n          -c1 * u.z * u.x - c2 * v.z * v.x + c3 * v.z * u.x,\n          -c1 * u.z * u.y - c2 * v.z * v.y + c3 * v.z * u.y,\n          -c1 * u.z * u.z - c2 * v.z * v.z + c3 * v.z * u.z + 1\n        );\n      }\n      else {\n        // the most common case, unless \"start\"=\"end\", or \"start\"=-\"end\"\n        var hvx;\n        var hvz;\n        var hvxy;\n        var hvxz;\n        var hvyz;\n        h = 1.0 / ( 1.0 + e );\n        hvx = h * v.x;\n        hvz = h * v.z;\n        hvxy = hvx * v.y;\n        hvxz = hvx * v.z;\n        hvyz = hvz * v.y;\n\n        return this.rowMajor(\n          e + hvx * v.x, hvxy - v.z, hvxz + v.y,\n          hvxy + v.z, e + h * v.y * v.y, hvyz - v.x,\n          hvxz - v.y, hvyz + v.x, e + hvz * v.z\n        );\n      }\n    },\n\n    setTo32Bit: function() {\n      if ( window.Float32Array ) {\n        this.entries = new window.Float32Array( this.entries );\n      }\n      return this;\n    },\n\n    setTo64Bit: function() {\n      if ( window.Float64Array ) {\n        this.entries = new window.Float64Array( this.entries );\n      }\n      return this;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations (changes the parameter)\n     *----------------------------------------------------------------------------*/\n\n    multiplyVector2: function( v ) {\n      return v.setXY(\n        this.m00() * v.x + this.m01() * v.y + this.m02(),\n        this.m10() * v.x + this.m11() * v.y + this.m12() );\n    },\n\n    multiplyVector3: function( v ) {\n      return v.setXYZ(\n        this.m00() * v.x + this.m01() * v.y + this.m02() * v.z,\n        this.m10() * v.x + this.m11() * v.y + this.m12() * v.z,\n        this.m20() * v.x + this.m21() * v.y + this.m22() * v.z );\n    },\n\n    multiplyTransposeVector2: function( v ) {\n      return v.setXY(\n        this.m00() * v.x + this.m10() * v.y,\n        this.m01() * v.x + this.m11() * v.y );\n    },\n\n    multiplyRelativeVector2: function( v ) {\n      return v.setXY(\n        this.m00() * v.x + this.m01() * v.y,\n        this.m10() * v.y + this.m11() * v.y );\n    },\n\n    // sets the transform of a Canvas 2D rendering context to the affine part of this matrix\n    canvasSetTransform: function( context ) {\n      context.setTransform(\n        // inlined array entries\n        this.entries[ 0 ],\n        this.entries[ 1 ],\n        this.entries[ 3 ],\n        this.entries[ 4 ],\n        this.entries[ 6 ],\n        this.entries[ 7 ]\n      );\n    },\n\n    // appends the affine part of this matrix to the Canvas 2D rendering context\n    canvasAppendTransform: function( context ) {\n      if ( this.type !== Types.IDENTITY ) {\n        context.transform(\n          // inlined array entries\n          this.entries[ 0 ],\n          this.entries[ 1 ],\n          this.entries[ 3 ],\n          this.entries[ 4 ],\n          this.entries[ 6 ],\n          this.entries[ 7 ]\n        );\n      }\n    }\n  };\n\n  Poolable.mixin( Matrix3, {\n\n    //The default factory creates an identity matrix\n    defaultFactory: function() { return new Matrix3(); },\n\n    constructorDuplicateFactory: function( pool ) {\n      return function( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ) {\n        var instance = pool.length ? pool.pop() : new Matrix3();\n        return instance.rowMajor( v00, v01, v02, v10, v11, v12, v20, v21, v22, type );\n      };\n    }\n  } );\n\n  // create an immutable\n  Matrix3.IDENTITY = Matrix3.identity();\n  Matrix3.IDENTITY.makeImmutable();\n\n  Matrix3.X_REFLECTION = Matrix3.createFromPool(\n    -1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n    Types.AFFINE );\n  Matrix3.X_REFLECTION.makeImmutable();\n\n  Matrix3.Y_REFLECTION = Matrix3.createFromPool(\n    1, 0, 0,\n    0, -1, 0,\n    0, 0, 1,\n    Types.AFFINE );\n  Matrix3.Y_REFLECTION.makeImmutable();\n\n  //Shortcut for translation times a matrix (without allocating a translation matrix), see scenery#119\n  Matrix3.translationTimesMatrix = function( x, y, m ) {\n    var type;\n    if ( m.type === Types.IDENTITY || m.type === Types.TRANSLATION_2D ) {\n      return Matrix3.createFromPool(\n        1, 0, m.m02() + x,\n        0, 1, m.m12() + y,\n        0, 0, 1,\n        Types.TRANSLATION_2D );\n    }\n    else if ( m.type === Types.OTHER ) {\n      type = Types.OTHER;\n    }\n    else {\n      type = Types.AFFINE;\n    }\n    return Matrix3.createFromPool(\n      m.m00(), m.m01(), m.m02() + x,\n      m.m10(), m.m11(), m.m12() + y,\n      m.m20(), m.m21(), m.m22(),\n      type );\n  };\n\n  Matrix3.printer = {\n    print: function( matrix ) {\n      console.log( matrix.toString() );\n    }\n  };\n\n  return Matrix3;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Fast 3x3 matrix computations at the lower level, including an SVD implementation that is fully stable.\n * Overall, it uses a heavily mutable style, passing in the object where the result(s) will be stored.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/MatrixOps3',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  /*\n   * Matrices are stored as flat typed arrays with row-major indices. For example, for a 3x3:\n   * [0] [1] [2]\n   * [3] [4] [5]\n   * [6] [7] [8]\n   *\n   * NOTE: We assume the typed arrays are AT LEAST as long as necessary (but could be longer). This allows us to use\n   * an array as big as the largest one we'll need.\n   */\n\n  // constants\n  var SQRT_HALF = Math.sqrt( 0.5 );\n\n  var MatrixOps3 = {\n    // use typed arrays if possible\n    Array: dot.FastArray,\n\n    /*---------------------------------------------------------------------------*\n     * 3x3 matrix math\n     *----------------------------------------------------------------------------*/\n\n    /*\n     * From 0-indexed row and column indices, returns the index into the flat array\n     *\n     * @param {number} row\n     * @param {number} col\n     */\n    index3: function( row, col ) {\n      assert && assert( row >= 0 && row < 3 );\n      assert && assert( col >= 0 && col < 3 );\n      return 3 * row + col;\n    },\n\n    /*\n     * Copies one matrix into another\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    set3: function( matrix, result ) {\n      assert && assert( matrix.length >= 9 );\n      assert && assert( result.length >= 9 );\n      result[ 0 ] = matrix[ 0 ];\n      result[ 1 ] = matrix[ 1 ];\n      result[ 2 ] = matrix[ 2 ];\n      result[ 3 ] = matrix[ 3 ];\n      result[ 4 ] = matrix[ 4 ];\n      result[ 5 ] = matrix[ 5 ];\n      result[ 6 ] = matrix[ 6 ];\n      result[ 7 ] = matrix[ 7 ];\n      result[ 8 ] = matrix[ 8 ];\n    },\n\n    /*\n     * Writes the transpose of the input matrix into the result matrix (in-place modification is OK)\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    transpose3: function( matrix, result ) {\n      assert && assert( matrix.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m1 = matrix[ 3 ];\n      var m2 = matrix[ 6 ];\n      var m3 = matrix[ 1 ];\n      var m5 = matrix[ 7 ];\n      var m6 = matrix[ 2 ];\n      var m7 = matrix[ 5 ];\n      result[ 0 ] = matrix[ 0 ];\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = matrix[ 4 ];\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = matrix[ 8 ];\n    },\n\n    /*\n     * The determinant of a 3x3 matrix\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @returns {number} - The determinant. 0 indicates a singular (non-invertible) matrix.\n     */\n    det3: function( matrix ) {\n      assert && assert( matrix.length >= 9 );\n      return matrix[ 0 ] * matrix[ 4 ] * matrix[ 8 ] + matrix[ 1 ] * matrix[ 5 ] * matrix[ 6 ] +\n             matrix[ 2 ] * matrix[ 3 ] * matrix[ 7 ] - matrix[ 2 ] * matrix[ 4 ] * matrix[ 6 ] -\n             matrix[ 1 ] * matrix[ 3 ] * matrix[ 8 ] - matrix[ 0 ] * matrix[ 5 ] * matrix[ 7 ];\n    },\n\n    /*\n     * Writes the matrix multiplication ( left * right ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 1 ] * right[ 3 ] + left[ 2 ] * right[ 6 ];\n      var m1 = left[ 0 ] * right[ 1 ] + left[ 1 ] * right[ 4 ] + left[ 2 ] * right[ 7 ];\n      var m2 = left[ 0 ] * right[ 2 ] + left[ 1 ] * right[ 5 ] + left[ 2 ] * right[ 8 ];\n      var m3 = left[ 3 ] * right[ 0 ] + left[ 4 ] * right[ 3 ] + left[ 5 ] * right[ 6 ];\n      var m4 = left[ 3 ] * right[ 1 ] + left[ 4 ] * right[ 4 ] + left[ 5 ] * right[ 7 ];\n      var m5 = left[ 3 ] * right[ 2 ] + left[ 4 ] * right[ 5 ] + left[ 5 ] * right[ 8 ];\n      var m6 = left[ 6 ] * right[ 0 ] + left[ 7 ] * right[ 3 ] + left[ 8 ] * right[ 6 ];\n      var m7 = left[ 6 ] * right[ 1 ] + left[ 7 ] * right[ 4 ] + left[ 8 ] * right[ 7 ];\n      var m8 = left[ 6 ] * right[ 2 ] + left[ 7 ] * right[ 5 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the matrix multiplication ( transpose( left ) * right ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3LeftTranspose: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 3 ] * right[ 3 ] + left[ 6 ] * right[ 6 ];\n      var m1 = left[ 0 ] * right[ 1 ] + left[ 3 ] * right[ 4 ] + left[ 6 ] * right[ 7 ];\n      var m2 = left[ 0 ] * right[ 2 ] + left[ 3 ] * right[ 5 ] + left[ 6 ] * right[ 8 ];\n      var m3 = left[ 1 ] * right[ 0 ] + left[ 4 ] * right[ 3 ] + left[ 7 ] * right[ 6 ];\n      var m4 = left[ 1 ] * right[ 1 ] + left[ 4 ] * right[ 4 ] + left[ 7 ] * right[ 7 ];\n      var m5 = left[ 1 ] * right[ 2 ] + left[ 4 ] * right[ 5 ] + left[ 7 ] * right[ 8 ];\n      var m6 = left[ 2 ] * right[ 0 ] + left[ 5 ] * right[ 3 ] + left[ 8 ] * right[ 6 ];\n      var m7 = left[ 2 ] * right[ 1 ] + left[ 5 ] * right[ 4 ] + left[ 8 ] * right[ 7 ];\n      var m8 = left[ 2 ] * right[ 2 ] + left[ 5 ] * right[ 5 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the matrix multiplication ( left * transpose( right ) ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3RightTranspose: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 1 ] * right[ 1 ] + left[ 2 ] * right[ 2 ];\n      var m1 = left[ 0 ] * right[ 3 ] + left[ 1 ] * right[ 4 ] + left[ 2 ] * right[ 5 ];\n      var m2 = left[ 0 ] * right[ 6 ] + left[ 1 ] * right[ 7 ] + left[ 2 ] * right[ 8 ];\n      var m3 = left[ 3 ] * right[ 0 ] + left[ 4 ] * right[ 1 ] + left[ 5 ] * right[ 2 ];\n      var m4 = left[ 3 ] * right[ 3 ] + left[ 4 ] * right[ 4 ] + left[ 5 ] * right[ 5 ];\n      var m5 = left[ 3 ] * right[ 6 ] + left[ 4 ] * right[ 7 ] + left[ 5 ] * right[ 8 ];\n      var m6 = left[ 6 ] * right[ 0 ] + left[ 7 ] * right[ 1 ] + left[ 8 ] * right[ 2 ];\n      var m7 = left[ 6 ] * right[ 3 ] + left[ 7 ] * right[ 4 ] + left[ 8 ] * right[ 5 ];\n      var m8 = left[ 6 ] * right[ 6 ] + left[ 7 ] * right[ 7 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the matrix multiplication ( transpose( left ) * transpose( right ) ) into result.\n     * (in-place modification is OK)\n     * NOTE: This is equivalent to transpose( right * left ).\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3BothTranspose: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 3 ] * right[ 1 ] + left[ 6 ] * right[ 2 ];\n      var m1 = left[ 0 ] * right[ 3 ] + left[ 3 ] * right[ 4 ] + left[ 6 ] * right[ 5 ];\n      var m2 = left[ 0 ] * right[ 6 ] + left[ 3 ] * right[ 7 ] + left[ 6 ] * right[ 8 ];\n      var m3 = left[ 1 ] * right[ 0 ] + left[ 4 ] * right[ 1 ] + left[ 7 ] * right[ 2 ];\n      var m4 = left[ 1 ] * right[ 3 ] + left[ 4 ] * right[ 4 ] + left[ 7 ] * right[ 5 ];\n      var m5 = left[ 1 ] * right[ 6 ] + left[ 4 ] * right[ 7 ] + left[ 7 ] * right[ 8 ];\n      var m6 = left[ 2 ] * right[ 0 ] + left[ 5 ] * right[ 1 ] + left[ 8 ] * right[ 2 ];\n      var m7 = left[ 2 ] * right[ 3 ] + left[ 5 ] * right[ 4 ] + left[ 8 ] * right[ 5 ];\n      var m8 = left[ 2 ] * right[ 6 ] + left[ 5 ] * right[ 7 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the product ( matrix * vector ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {Vector3} vector - [input]\n     * @param {Vector3} result - [output]\n     */\n    mult3Vector3: function( matrix, vector, result ) {\n      assert && assert( matrix.length >= 9 );\n      var x = matrix[ 0 ] * vector.x + matrix[ 1 ] * vector.y + matrix[ 2 ] * vector.z;\n      var y = matrix[ 3 ] * vector.x + matrix[ 4 ] * vector.y + matrix[ 5 ] * vector.z;\n      var z = matrix[ 6 ] * vector.x + matrix[ 7 ] * vector.y + matrix[ 8 ] * vector.z;\n      result.x = x;\n      result.y = y;\n      result.z = z;\n    },\n\n    /*\n     * Swaps two columns in a matrix, negating one of them to maintain the sign of the determinant.\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {number} idx0 - In the range [0,2]\n     * @param {number} idx1 - In the range [0,2]\n     */\n    swapNegateColumn: function( matrix, idx0, idx1 ) {\n      assert && assert( matrix.length >= 9 );\n      var tmp0 = matrix[ idx0 ];\n      var tmp1 = matrix[ idx0 + 3 ];\n      var tmp2 = matrix[ idx0 + 6 ];\n\n      matrix[ idx0 ] = matrix[ idx1 ];\n      matrix[ idx0 + 3 ] = matrix[ idx1 + 3 ];\n      matrix[ idx0 + 6 ] = matrix[ idx1 + 6 ];\n\n      matrix[ idx1 ] = -tmp0;\n      matrix[ idx1 + 3 ] = -tmp1;\n      matrix[ idx1 + 6 ] = -tmp2;\n    },\n\n    /*\n     * Sets the result matrix to the identity.\n     *\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    setIdentity3: function( result ) {\n      result[ 0 ] = result[ 4 ] = result[ 8 ] = 1; // diagonal\n      result[ 1 ] = result[ 2 ] = result[ 3 ] = result[ 5 ] = result[ 6 ] = result[ 7 ] = 0; // non-diagonal\n    },\n\n    /*\n     * Sets the result matrix to the Givens rotation (performs a rotation between two components). Instead of an angle,\n     * the 'cos' and 'sin' values are passed in directly since we skip the trigonometry almost everywhere we can.\n     *\n     * See http://en.wikipedia.org/wiki/Givens_rotation (note that we use the other sign convention for the sin)\n     *\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     * @param {number} cos - [input] The cosine of the Givens rotation angle\n     * @param {number} sin - [input] The sine of the Givens rotation angle\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    setGivens3: function( result, cos, sin, idx0, idx1 ) {\n      assert && assert( idx0 < idx1 );\n      this.setIdentity3( result );\n      result[ this.index3( idx0, idx0 ) ] = cos;\n      result[ this.index3( idx1, idx1 ) ] = cos;\n      result[ this.index3( idx0, idx1 ) ] = sin;\n      result[ this.index3( idx1, idx0 ) ] = -sin;\n    },\n\n    /*\n     * Efficiently pre-multiples the matrix in-place by the specified Givens rotation (matrix <= rotation * matrix).\n     * Equivalent to using setGivens3 and mult3.\n     *\n     * @param {FastMath.Array} result - [input AND output] 3x3 Matrix\n     * @param {number} cos - [input] The cosine of the Givens rotation angle\n     * @param {number} sin - [input] The sine of the Givens rotation angle\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    preMult3Givens: function( matrix, cos, sin, idx0, idx1 ) {\n      var baseA = idx0 * 3;\n      var baseB = idx1 * 3;\n      // lexicographically in column-major order for \"affine\" section\n      var a = cos * matrix[ baseA + 0 ] + sin * matrix[ baseB + 0 ];\n      var b = cos * matrix[ baseB + 0 ] - sin * matrix[ baseA + 0 ];\n      var c = cos * matrix[ baseA + 1 ] + sin * matrix[ baseB + 1 ];\n      var d = cos * matrix[ baseB + 1 ] - sin * matrix[ baseA + 1 ];\n      var e = cos * matrix[ baseA + 2 ] + sin * matrix[ baseB + 2 ];\n      var f = cos * matrix[ baseB + 2 ] - sin * matrix[ baseA + 2 ];\n      matrix[ baseA + 0 ] = a;\n      matrix[ baseB + 0 ] = b;\n      matrix[ baseA + 1 ] = c;\n      matrix[ baseB + 1 ] = d;\n      matrix[ baseA + 2 ] = e;\n      matrix[ baseB + 2 ] = f;\n    },\n\n    /*\n     * Efficiently post-multiples the matrix in-place by the transpose of the specified Givens rotation\n     * (matrix <= matrix * rotation^T).\n     * Equivalent to using setGivens3 and mult3RightTranspose.\n     *\n     * @param {FastMath.Array} result - [input AND output] 3x3 Matrix\n     * @param {number} cos - [input] The cosine of the Givens rotation angle\n     * @param {number} sin - [input] The sine of the Givens rotation angle\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    postMult3Givens: function( matrix, cos, sin, idx0, idx1 ) {\n      // lexicographically in row-major order for the \"transposed affine\" section\n      var a = cos * matrix[ idx0 + 0 ] + sin * matrix[ idx1 + 0 ];\n      var b = cos * matrix[ idx1 + 0 ] - sin * matrix[ idx0 + 0 ];\n      var c = cos * matrix[ idx0 + 3 ] + sin * matrix[ idx1 + 3 ];\n      var d = cos * matrix[ idx1 + 3 ] - sin * matrix[ idx0 + 3 ];\n      var e = cos * matrix[ idx0 + 6 ] + sin * matrix[ idx1 + 6 ];\n      var f = cos * matrix[ idx1 + 6 ] - sin * matrix[ idx0 + 6 ];\n      matrix[ idx0 + 0 ] = a;\n      matrix[ idx1 + 0 ] = b;\n      matrix[ idx0 + 3 ] = c;\n      matrix[ idx1 + 3 ] = d;\n      matrix[ idx0 + 6 ] = e;\n      matrix[ idx1 + 6 ] = f;\n    },\n\n    /*\n     * Zeros out the [idx0,idx1] and [idx1,idx0] entries of the matrix mS by applying a Givens rotation as part of the\n     * Jacobi iteration. In addition, the Givens rotation is prepended to mQ so we can track the accumulated rotations\n     * applied (this is how we get V in the SVD).\n     *\n     * @param {FastMath.Array} mS - [input AND output] Symmetric 3x3 Matrix\n     * @param {FastMath.Array} mQ - [input AND output] Unitary 3x3 Matrix\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    applyJacobi3: function( mS, mQ, idx0, idx1 ) {\n      // submatrix entries for idx0,idx1\n      var a11 = mS[ 3 * idx0 + idx0 ];\n      var a12 = mS[ 3 * idx0 + idx1 ]; // we assume mS is symmetric, so we don't need a21\n      var a22 = mS[ 3 * idx1 + idx1 ];\n\n      // Approximate givens angle, see https://graphics.cs.wisc.edu/Papers/2011/MSTTS11/SVD_TR1690.pdf (section 2.3)\n      // \"Computing the Singular Value Decomposition of 3x3 matrices with minimal branching and elementary floating point operations\"\n      // Aleka McAdams, Andrew Selle, Rasmus Tamstorf, Joseph Teran, Eftychios Sifakis\n      var lhs = a12 * a12;\n      var rhs = a11 - a22;\n      rhs = rhs * rhs;\n      var useAngle = lhs < rhs;\n      var w = 1 / Math.sqrt( lhs + rhs );\n      // NOTE: exact Givens angle is 0.5 * Math.atan( 2 * a12 / ( a11 - a22 ) ), but clamped to withing +-Math.PI / 4\n      var cos = useAngle ? ( w * ( a11 - a22 ) ) : SQRT_HALF;\n      var sin = useAngle ? ( w * a12 ) : SQRT_HALF;\n\n      // S' = Q * S * transpose( Q )\n      this.preMult3Givens( mS, cos, sin, idx0, idx1 );\n      this.postMult3Givens( mS, cos, sin, idx0, idx1 );\n\n      // Q' = Q * mQ\n      this.preMult3Givens( mQ, cos, sin, idx0, idx1 );\n    },\n\n    /*\n     * The Jacobi method, which in turn zeros out all the non-diagonal entries repeatedly until mS converges into\n     * a diagonal matrix. We track the applied Givens rotations in mQ, so that when given mS and mQ=identity, we will\n     * maintain the value mQ * mS * mQ^T\n     *\n     * @param {FastMath.Array} mS - [input AND output] Symmetric 3x3 Matrix\n     * @param {FastMath.Array} mQ - [input AND output] Unitary 3x3 Matrix\n     * @param {number} n - [input] The number of iterations to run\n     */\n    jacobiIteration3: function( mS, mQ, n ) {\n      // for 3x3, we eliminate non-diagonal entries iteratively\n      for ( var i = 0; i < n; i++ ) {\n        this.applyJacobi3( mS, mQ, 0, 1 );\n        this.applyJacobi3( mS, mQ, 0, 2 );\n        this.applyJacobi3( mS, mQ, 1, 2 );\n      }\n    },\n\n    /*\n     * One step in computing the QR decomposition. Zeros out the (row,col) entry in 'r', while maintaining the\n     * value of (q * r). We will end up with an orthogonal Q and upper-triangular R (or in the SVD case,\n     * R will be diagonal)\n     *\n     * @param {FastMath.Array} q - [input AND ouput] 3x3 Matrix\n     * @param {FastMath.Array} r - [input AND ouput] 3x3 Matrix\n     * @param {number} row - [input] The row of the entry to zero out\n     * @param {number} col - [input] The column of the entry to zero out\n     */\n    qrAnnihilate3: function( q, r, row, col ) {\n      assert && assert( row > col ); // only in the lower-triangular area\n\n      var epsilon = 0.0000000001;\n      var cos;\n      var sin;\n\n      var diagonalValue = r[ this.index3( col, col ) ];\n      var targetValue = r[ this.index3( row, col ) ];\n      var diagonalSquared = diagonalValue * diagonalValue;\n      var targetSquared = targetValue * targetValue;\n\n      // handle the case where both (row,col) and (col,col) are very small (would cause instabilities)\n      if ( diagonalSquared + targetSquared < epsilon ) {\n        cos = diagonalValue > 0 ? 1 : 0;\n        sin = 0;\n      }\n      else {\n        var rsqr = 1 / Math.sqrt( diagonalSquared + targetSquared );\n        cos = rsqr * diagonalValue;\n        sin = rsqr * targetValue;\n      }\n\n      this.preMult3Givens( r, cos, sin, col, row );\n      this.postMult3Givens( q, cos, sin, col, row );\n    },\n\n    /*\n     * 3x3 Singular Value Decomposition, handling singular cases.\n     * Based on https://graphics.cs.wisc.edu/Papers/2011/MSTTS11/SVD_TR1690.pdf\n     * \"Computing the Singular Value Decomposition of 3x3 matrices with minimal branching and elementary floating point operations\"\n     * Aleka McAdams, Andrew Selle, Rasmus Tamstorf, Joseph Teran, Eftychios Sifakis\n     *\n     * @param {FastMath.Array} a - [input] 3x3 Matrix that we want the SVD of.\n     * @param {number} jacobiIterationCount - [input] How many Jacobi iterations to run (larger is more accurate to a point)\n     * @param {FastMath.Array} resultU - [output] 3x3 U matrix (unitary)\n     * @param {FastMath.Array} resultSigma - [output] 3x3 diagonal matrix of singular values\n     * @param {FastMath.Array} resultV - [output] 3x3 V matrix (unitary)\n     */\n    svd3: function( a, jacobiIterationCount, resultU, resultSigma, resultV ) {\n      // shorthands\n      var q = resultU;\n      var v = resultV;\n      var r = resultSigma;\n\n      // for now, use 'r' as our S == transpose( A ) * A, so we don't have to use scratch matrices\n      this.mult3LeftTranspose( a, a, r );\n      // we'll accumulate into 'q' == transpose( V ) during the Jacobi iteration\n      this.setIdentity3( q );\n\n      // Jacobi iteration turns Q into V^T and R into Sigma^2 (we'll ditch R since the QR decomposition will be beter)\n      this.jacobiIteration3( r, q, jacobiIterationCount );\n      // final determination of V\n      this.transpose3( q, v ); // done with this 'q' until we reuse the scratch matrix later below for the QR decomposition\n\n      this.mult3( a, v, r ); // R = AV\n\n      // Sort columns of R and V based on singular values (needed for the QR step, and useful anyways).\n      // Their product will remain unchanged.\n      var mag0 = r[ 0 ] * r[ 0 ] + r[ 3 ] * r[ 3 ] + r[ 6 ] * r[ 6 ]; // column vector magnitudes\n      var mag1 = r[ 1 ] * r[ 1 ] + r[ 4 ] * r[ 4 ] + r[ 7 ] * r[ 7 ];\n      var mag2 = r[ 2 ] * r[ 2 ] + r[ 5 ] * r[ 5 ] + r[ 8 ] * r[ 8 ];\n      var tmpMag;\n      if ( mag0 < mag1 ) {\n        // swap magnitudes\n        tmpMag = mag0;\n        mag0 = mag1;\n        mag1 = tmpMag;\n        this.swapNegateColumn( r, 0, 1 );\n        this.swapNegateColumn( v, 0, 1 );\n      }\n      if ( mag0 < mag2 ) {\n        // swap magnitudes\n        tmpMag = mag0;\n        mag0 = mag2;\n        mag2 = tmpMag;\n        this.swapNegateColumn( r, 0, 2 );\n        this.swapNegateColumn( v, 0, 2 );\n      }\n      if ( mag1 < mag2 ) {\n        this.swapNegateColumn( r, 1, 2 );\n        this.swapNegateColumn( v, 1, 2 );\n      }\n\n      // QR decomposition\n      this.setIdentity3( q ); // reusing Q now for the QR\n      // Zero out all three strictly lower-triangular values. Should turn the matrix diagonal\n      this.qrAnnihilate3( q, r, 1, 0 );\n      this.qrAnnihilate3( q, r, 2, 0 );\n      this.qrAnnihilate3( q, r, 2, 1 );\n\n      // checks for a singular U value, we'll add in the needed 1 entries to make sure our U is orthogonal\n      var bigEpsilon = 0.001; // they really should be around 1\n      if ( q[ 0 ] * q[ 0 ] + q[ 1 ] * q[ 1 ] + q[ 2 ] * q[ 2 ] < bigEpsilon ) {\n        q[ 0 ] = 1;\n      }\n      if ( q[ 3 ] * q[ 3 ] + q[ 4 ] * q[ 4 ] + q[ 5 ] * q[ 5 ] < bigEpsilon ) {\n        q[ 4 ] = 1;\n      }\n      if ( q[ 6 ] * q[ 6 ] + q[ 7 ] * q[ 7 ] + q[ 8 ] * q[ 8 ] < bigEpsilon ) {\n        q[ 8 ] = 1;\n      }\n    },\n\n    /*---------------------------------------------------------------------------*\n     * 3xN matrix math\n     *----------------------------------------------------------------------------*/\n\n    /*\n     * Sets the 3xN result matrix to be made out of column vectors\n     *\n     * @param {Array.<Vector3>} columnVectors - [input] List of 3D column vectors\n     * @param {FastMath.Array} result - [output] 3xN Matrix, where N is the number of column vectors\n     */\n    setVectors3: function( columnVectors, result ) {\n      var m = 3;\n      var n = columnVectors.length;\n\n      assert && assert( result.length >= m * n, 'Array length check' );\n\n      for ( var i = 0; i < n; i++ ) {\n        var vector = columnVectors[ i ];\n        result[ i ] = vector.x;\n        result[ i + n ] = vector.y;\n        result[ i + 2 * n ] = vector.z;\n      }\n    },\n\n    /*\n     * Retrieves column vector values from a 3xN matrix.\n     *\n     * @param {number} m - [input] The number of rows in the matrix (sanity check, should always be 3)\n     * @param {number} n - [input] The number of columns in the matrix\n     * @param {FastMath.Array} matrix - [input] 3xN Matrix\n     * @param {number} columnIndex - [input] 3xN Matrix\n     * @param {Vector3} result - [output] Vector to store the x,y,z\n     */\n    getColumnVector3: function( m, n, matrix, columnIndex, result ) {\n      assert && assert( m === 3 && columnIndex < n );\n\n      result.x = matrix[ columnIndex ];\n      result.y = matrix[ columnIndex + n ];\n      result.z = matrix[ columnIndex + 2 * n ];\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Arbitrary dimension matrix math\n     *----------------------------------------------------------------------------*/\n\n    /*\n     * From 0-indexed row and column indices, returns the index into the flat array\n     *\n     * @param {number} m - Number of rows in the matrix\n     * @param {number} n - Number of columns in the matrix\n     * @param {number} row\n     * @param {number} col\n     */\n    index: function( m, n, row, col ) {\n      return n * row + col;\n    },\n\n    /*\n     * Writes the transpose of the matrix into the result.\n     *\n     * @param {number} m - Number of rows in the original matrix\n     * @param {number} n - Number of columns in the original matrix\n     * @param {FastMath.Array} matrix - [input] MxN Matrix\n     * @param {FastMath.Array} result - [output] NxM Matrix\n     */\n    transpose: function( m, n, matrix, result ) {\n      assert && assert( matrix.length >= m * n );\n      assert && assert( result.length >= n * m );\n      assert && assert( matrix !== result, 'In-place modification not implemented yet' );\n\n      for ( var row = 0; row < m; row++ ) {\n        for ( var col = 0; col < n; col++ ) {\n          result[ m * col + row ] = matrix[ n * row + col ];\n        }\n      }\n    },\n\n    /*\n     * Writes the matrix multiplication of ( left * right ) into result\n     *\n     * @param {number} m - Number of rows in the left matrix\n     * @param {number} n - Number of columns in the left matrix, number of rows in the right matrix\n     * @param {number} p - Number of columns in the right matrix\n     * @param {FastMath.Array} left - [input] MxN Matrix\n     * @param {FastMath.Array} right - [input] NxP Matrix\n     * @param {FastMath.Array} result - [output] MxP Matrix\n     */\n    mult: function( m, n, p, left, right, result ) {\n      assert && assert( left.length >= m * n );\n      assert && assert( right.length >= n * p );\n      assert && assert( result.length >= m * p );\n      assert && assert( left !== result && right !== result, 'In-place modification not implemented yet' );\n\n      for ( var row = 0; row < m; row++ ) {\n        for ( var col = 0; col < p; col++ ) {\n          var x = 0;\n          for ( var k = 0; k < n; k++ ) {\n            x += left[ this.index( m, n, row, k ) ] * right[ this.index( n, p, k, col ) ];\n          }\n          result[ this.index( m, p, row, col ) ] = x;\n        }\n      }\n    },\n\n    /*\n     * Writes the matrix multiplication of ( left * transpose( right ) ) into result\n     *\n     * @param {number} m - Number of rows in the left matrix\n     * @param {number} n - Number of columns in the left matrix, number of columns in the right matrix\n     * @param {number} p - Number of rows in the right matrix\n     * @param {FastMath.Array} left - [input] MxN Matrix\n     * @param {FastMath.Array} right - [input] PxN Matrix\n     * @param {FastMath.Array} result - [output] MxP Matrix\n     */\n    multRightTranspose: function( m, n, p, left, right, result ) {\n      assert && assert( left.length >= m * n );\n      assert && assert( right.length >= n * p );\n      assert && assert( result.length >= m * p );\n      assert && assert( left !== result && right !== result, 'In-place modification not implemented yet' );\n\n      for ( var row = 0; row < m; row++ ) {\n        for ( var col = 0; col < p; col++ ) {\n          var x = 0;\n          for ( var k = 0; k < n; k++ ) {\n            x += left[ this.index( m, n, row, k ) ] * right[ this.index( p, n, col, k ) ];\n          }\n          result[ this.index( m, p, row, col ) ] = x;\n        }\n      }\n    },\n\n    /*\n     * Writes the matrix into the result, permuting the columns.\n     *\n     * @param {number} m - Number of rows in the original matrix\n     * @param {number} n - Number of columns in the original matrix\n     * @param {FastMath.Array} matrix - [input] MxN Matrix\n     * @param {Permutation} permutation - [input] Permutation\n     * @param {FastMath.Array} result - [output] MxN Matrix\n     */\n    permuteColumns: function( m, n, matrix, permutation, result ) {\n      assert && assert( matrix !== result, 'In-place modification not implemented yet' );\n      assert && assert( matrix.length >= m * n );\n      assert && assert( result.length >= m * n );\n\n      for ( var col = 0; col < n; col++ ) {\n        var permutedColumnIndex = permutation.indices[ col ];\n        for ( var row = 0; row < m; row++ ) {\n          result[ this.index( m, n, row, col ) ] = matrix[ this.index( m, n, row, permutedColumnIndex ) ];\n        }\n      }\n    }\n  };\n  dot.register( 'MatrixOps3', MatrixOps3 );\n\n  return MatrixOps3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * An immutable permutation that can permute an array\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Permutation',['require','DOT/dot','PHET_CORE/isArray','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var isArray = require( 'PHET_CORE/isArray' );\n  require( 'DOT/Util' ); // for rangeInclusive\n\n  // Creates a permutation that will rearrange a list so that newList[i] = oldList[permutation[i]]\n  function Permutation( indices ) {\n    this.indices = indices;\n  }\n\n  dot.register( 'Permutation', Permutation );\n\n  // An identity permutation with a specific number of elements\n  Permutation.identity = function( size ) {\n    assert && assert( size >= 0 );\n    var indices = new Array( size );\n    for ( var i = 0; i < size; i++ ) {\n      indices[ i ] = i;\n    }\n    return new Permutation( indices );\n  };\n\n  // lists all permutations that have a given size\n  Permutation.permutations = function( size ) {\n    var result = [];\n    Permutation.forEachPermutation( dot.rangeInclusive( 0, size - 1 ), function( integers ) {\n      result.push( new Permutation( integers ) );\n    } );\n    return result;\n  };\n\n  /**\n   * Call our function with each permutation of the provided list PREFIXED by prefix, in lexicographic order\n   *\n   * @param array   List to generate permutations of\n   * @param prefix   Elements that should be inserted at the front of each list before each call\n   * @param callback Function to call\n   */\n  function recursiveForEachPermutation( array, prefix, callback ) {\n    if ( array.length === 0 ) {\n      callback( prefix );\n    }\n    else {\n      for ( var i = 0; i < array.length; i++ ) {\n        var element = array[ i ];\n\n        // remove the element from the array\n        var nextArray = array.slice( 0 );\n        nextArray.splice( i, 1 );\n\n        // add it into the prefix\n        var nextPrefix = prefix.slice( 0 );\n        nextPrefix.push( element );\n\n        recursiveForEachPermutation( nextArray, nextPrefix, callback );\n      }\n    }\n  }\n\n  Permutation.forEachPermutation = function( array, callback ) {\n    recursiveForEachPermutation( array, [], callback );\n  };\n\n  Permutation.prototype = {\n    constructor: Permutation,\n\n    size: function() {\n      return this.indices.length;\n    },\n\n    apply: function( arrayOrInt ) {\n      if ( isArray( arrayOrInt ) ) {\n        if ( arrayOrInt.length !== this.size() ) {\n          throw new Error( 'Permutation length ' + this.size() + ' not equal to list length ' + arrayOrInt.length );\n        }\n\n        // permute it as an array\n        var result = new Array( arrayOrInt.length );\n        for ( var i = 0; i < arrayOrInt.length; i++ ) {\n          result[ i ] = arrayOrInt[ this.indices[ i ] ];\n        }\n        return result;\n      }\n      else {\n        // permute a single index\n        return this.indices[ arrayOrInt ];\n      }\n    },\n\n    // The inverse of this permutation\n    inverted: function() {\n      var newPermutation = new Array( this.size() );\n      for ( var i = 0; i < this.size(); i++ ) {\n        newPermutation[ this.indices[ i ] ] = i;\n      }\n      return new Permutation( newPermutation );\n    },\n\n    withIndicesPermuted: function( indices ) {\n      var result = [];\n      var that = this;\n      Permutation.forEachPermutation( indices, function( integers ) {\n        var oldIndices = that.indices;\n        var newPermutation = oldIndices.slice( 0 );\n\n        for ( var i = 0; i < indices.length; i++ ) {\n          newPermutation[ indices[ i ] ] = oldIndices[ integers[ i ] ];\n        }\n        result.push( new Permutation( newPermutation ) );\n      } );\n      return result;\n    },\n\n    toString: function() {\n      return 'P[' + this.indices.join( ', ' ) + ']';\n    }\n  };\n\n  Permutation.testMe = function( console ) {\n    var a = new Permutation( [ 1, 4, 3, 2, 0 ] );\n    console.log( a.toString() );\n\n    var b = a.inverted();\n    console.log( b.toString() );\n\n    console.log( b.withIndicesPermuted( [ 0, 3, 4 ] ).toString() );\n\n    console.log( Permutation.permutations( 4 ).toString() );\n  };\n\n  return Permutation;\n} );\n\n","// Copyright 2014, University of Colorado Boulder\n\n/**\n * A mathematical plane in 3 dimensions determined by a normal vector to the plane and the distance to the closest\n * point on the plane to the origin\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Plane3',['require','DOT/dot','DOT/Vector3'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Vector3 = require( 'DOT/Vector3' );\n\n  /*\n   * @constructor\n   * @param {Vector3} normal - A normal vector (perpendicular) to the plane\n   * @param {number} distance - The signed distance to the plane from the origin, so that normal.times( distance )\n   *                            will be a point on the plane.\n   */\n  function Plane3( normal, distance ) {\n    this.normal = normal;\n    this.distance = distance;\n\n    assert && assert( Math.abs( normal.magnitude() - 1 ) < 0.01 );\n\n    phetAllocation && phetAllocation( 'Plane3' );\n  }\n\n  dot.register( 'Plane3', Plane3 );\n\n  Plane3.prototype = {\n    constructor: Plane3,\n\n    /*\n     * @param {Ray3} ray\n     * @returns The intersection {Vector3} of the ray with the plane\n     */\n    intersectWithRay: function( ray ) {\n      return ray.pointAtDistance( ray.distanceToPlane( this ) );\n    }\n  };\n\n  Plane3.XY = new Plane3( new Vector3( 0, 0, 1 ), 0 );\n  Plane3.XZ = new Plane3( new Vector3( 0, 1, 0 ), 0 );\n  Plane3.YZ = new Plane3( new Vector3( 1, 0, 0 ), 0 );\n\n  /*\n   * @param {Vector3} a - first point\n   * @param {Vector3} b - second point\n   * @param {Vector3} c - third point\n   */\n  Plane3.fromTriangle = function( a, b, c ) {\n    var normal = ( c.minus( a ) ).cross( b.minus( a ) );\n    if ( normal.magnitude() === 0 ) {\n      return null;\n    }\n    normal.normalize();\n\n    return new Plane3( normal, normal.dot( a ) );\n  };\n\n  return Plane3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Quaternion, see http://en.wikipedia.org/wiki/Quaternion\n *\n * TODO: convert from JME-style parameterization into classical mathematical description?\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Quaternion',['require','DOT/dot','PHET_CORE/Poolable','DOT/Vector3','DOT/Matrix3','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Poolable = require( 'PHET_CORE/Poolable' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Matrix3' );\n  require( 'DOT/Util' );\n\n  function Quaternion( x, y, z, w ) {\n    this.setXYZW( x, y, z, w );\n\n    phetAllocation && phetAllocation( 'Quaternion' );\n  }\n\n  dot.register( 'Quaternion', Quaternion );\n\n  Quaternion.prototype = {\n    constructor: Quaternion,\n\n    isQuaternion: true,\n\n    setXYZW: function( x, y, z, w ) {\n      this.x = x !== undefined ? x : 0;\n      this.y = y !== undefined ? y : 0;\n      this.z = z !== undefined ? z : 0;\n      this.w = w !== undefined ? w : 1;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *----------------------------------------------------------------------------*/\n\n    plus: function( quat ) {\n      return new Quaternion( this.x + quat.x, this.y + quat.y, this.z + quat.z, this.w + quat.w );\n    },\n\n    timesScalar: function( s ) {\n      return new Quaternion( this.x * s, this.y * s, this.z * s, this.w * s );\n    },\n\n    // standard quaternion multiplication (hamilton product)\n    timesQuaternion: function( quat ) {\n      // TODO: note why this is the case? product noted everywhere is the other one mentioned!\n      // mathematica-style\n//        return new Quaternion(\n//                this.x * quat.x - this.y * quat.y - this.z * quat.z - this.w * quat.w,\n//                this.x * quat.y + this.y * quat.x + this.z * quat.w - this.w * quat.z,\n//                this.x * quat.z - this.y * quat.w + this.z * quat.x + this.w * quat.y,\n//                this.x * quat.w + this.y * quat.z - this.z * quat.y + this.w * quat.x\n//        );\n\n      // JME-style\n      return new Quaternion(\n        this.x * quat.w - this.z * quat.y + this.y * quat.z + this.w * quat.x,\n        -this.x * quat.z + this.y * quat.w + this.z * quat.x + this.w * quat.y,\n        this.x * quat.y - this.y * quat.x + this.z * quat.w + this.w * quat.z,\n        -this.x * quat.x - this.y * quat.y - this.z * quat.z + this.w * quat.w\n      );\n\n      /*\n       Mathematica!\n       In[13]:= Quaternion[-0.0, -0.0024999974, 0.0, 0.9999969] ** Quaternion[-0.9864071, 0.0016701065, -0.0050373166, 0.16423558]\n       Out[13]= Quaternion[-0.164231, 0.00750332, 0.00208069, -0.986391]\n\n       In[17]:= Quaternion[-0.0024999974, 0.0, 0.9999969, 0] ** Quaternion[0.0016701065, -0.0050373166, 0.16423558, -0.9864071]\n       Out[17]= Quaternion[-0.164239, -0.986391, 0.00125951, 0.00750332]\n\n       JME contains the rearrangement of what is typically called {w,x,y,z}\n       */\n    },\n\n    timesVector3: function( v ) {\n      if ( v.magnitude() === 0 ) {\n        return new dot.Vector3();\n      }\n\n      // TODO: optimization?\n      return new dot.Vector3(\n        this.w * this.w * v.x + 2 * this.y * this.w * v.z - 2 * this.z * this.w * v.y + this.x * this.x * v.x + 2 * this.y * this.x * v.y + 2 * this.z * this.x * v.z - this.z * this.z * v.x - this.y * this.y * v.x,\n        2 * this.x * this.y * v.x + this.y * this.y * v.y + 2 * this.z * this.y * v.z + 2 * this.w * this.z * v.x - this.z * this.z * v.y + this.w * this.w * v.y - 2 * this.x * this.w * v.z - this.x * this.x * v.y,\n        2 * this.x * this.z * v.x + 2 * this.y * this.z * v.y + this.z * this.z * v.z - 2 * this.w * this.y * v.x - this.y * this.y * v.z + 2 * this.w * this.x * v.y - this.x * this.x * v.z + this.w * this.w * v.z\n      );\n    },\n\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    magnitudeSquared: function() {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    },\n\n    normalized: function() {\n      var magnitude = this.magnitude();\n      assert && assert( magnitude !== 0, 'Cannot normalize a zero-magnitude quaternion' );\n      return this.timesScalar( 1 / magnitude );\n    },\n\n    negated: function() {\n      return new Quaternion( -this.x, -this.y, -this.z, -this.w );\n    },\n\n    toRotationMatrix: function() {\n      // see http://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\n\n      var norm = this.magnitudeSquared();\n      var flip = ( norm === 1 ) ? 2 : ( norm > 0 ) ? 2 / norm : 0;\n\n      var xx = this.x * this.x * flip;\n      var xy = this.x * this.y * flip;\n      var xz = this.x * this.z * flip;\n      var xw = this.w * this.x * flip;\n      var yy = this.y * this.y * flip;\n      var yz = this.y * this.z * flip;\n      var yw = this.w * this.y * flip;\n      var zz = this.z * this.z * flip;\n      var zw = this.w * this.z * flip;\n\n      return dot.Matrix3.dirtyFromPool().columnMajor(\n        1 - ( yy + zz ),\n        ( xy + zw ),\n        ( xz - yw ),\n        ( xy - zw ),\n        1 - ( xx + zz ),\n        ( yz + xw ),\n        ( xz + yw ),\n        ( yz - xw ),\n        1 - ( xx + yy )\n      );\n    }\n  };\n\n  Quaternion.fromEulerAngles = function( yaw, roll, pitch ) {\n    var sinPitch = Math.sin( pitch * 0.5 );\n    var cosPitch = Math.cos( pitch * 0.5 );\n    var sinRoll = Math.sin( roll * 0.5 );\n    var cosRoll = Math.cos( roll * 0.5 );\n    var sinYaw = Math.sin( yaw * 0.5 );\n    var cosYaw = Math.cos( yaw * 0.5 );\n\n    var a = cosRoll * cosPitch;\n    var b = sinRoll * sinPitch;\n    var c = cosRoll * sinPitch;\n    var d = sinRoll * cosPitch;\n\n    return new Quaternion(\n      a * sinYaw + b * cosYaw,\n      d * cosYaw + c * sinYaw,\n      c * cosYaw - d * sinYaw,\n      a * cosYaw - b * sinYaw\n    );\n  };\n\n  Quaternion.fromRotationMatrix = function( matrix ) {\n    var v00 = matrix.m00();\n    var v01 = matrix.m01();\n    var v02 = matrix.m02();\n    var v10 = matrix.m10();\n    var v11 = matrix.m11();\n    var v12 = matrix.m12();\n    var v20 = matrix.m20();\n    var v21 = matrix.m21();\n    var v22 = matrix.m22();\n\n    // from graphics gems code\n    var trace = v00 + v11 + v22;\n    var sqt;\n\n    // we protect the division by s by ensuring that s>=1\n    if ( trace >= 0 ) {\n      sqt = Math.sqrt( trace + 1 );\n      return new Quaternion(\n        ( v21 - v12 ) * 0.5 / sqt,\n        ( v02 - v20 ) * 0.5 / sqt,\n        ( v10 - v01 ) * 0.5 / sqt,\n        0.5 * sqt\n      );\n    }\n    else if ( ( v00 > v11 ) && ( v00 > v22 ) ) {\n      sqt = Math.sqrt( 1 + v00 - v11 - v22 );\n      return new Quaternion(\n        sqt * 0.5,\n        ( v10 + v01 ) * 0.5 / sqt,\n        ( v02 + v20 ) * 0.5 / sqt,\n        ( v21 - v12 ) * 0.5 / sqt\n      );\n    }\n    else if ( v11 > v22 ) {\n      sqt = Math.sqrt( 1 + v11 - v00 - v22 );\n      return new Quaternion(\n        ( v10 + v01 ) * 0.5 / sqt,\n        sqt * 0.5,\n        ( v21 + v12 ) * 0.5 / sqt,\n        ( v02 - v20 ) * 0.5 / sqt\n      );\n    }\n    else {\n      sqt = Math.sqrt( 1 + v22 - v00 - v11 );\n      return new Quaternion(\n        ( v02 + v20 ) * 0.5 / sqt,\n        ( v21 + v12 ) * 0.5 / sqt,\n        sqt * 0.5,\n        ( v10 - v01 ) * 0.5 / sqt\n      );\n    }\n  };\n\n  /**\n   * Find a quaternion that transforms a unit vector A into a unit vector B. There\n   * are technically multiple solutions, so this only picks one.\n   *\n   * @param a Unit vector A\n   * @param b Unit vector B\n   * @return A quaternion s.t. Q * A = B\n   */\n  Quaternion.getRotationQuaternion = function( a, b ) {\n    return Quaternion.fromRotationMatrix( dot.Matrix3.rotateAToB( a, b ) );\n  };\n\n  // spherical linear interpolation - blending two quaternions\n  Quaternion.slerp = function( a, b, t ) {\n    // if they are identical, just return one of them\n    if ( a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w ) {\n      return a;\n    }\n\n    var dot = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n\n    if ( dot < 0 ) {\n      b = b.negated();\n      dot = -dot;\n    }\n\n    // how much of each quaternion should be contributed\n    var ratioA = 1 - t;\n    var ratioB = t;\n\n    // tweak them if necessary\n    if ( ( 1 - dot ) > 0.1 ) {\n      var theta = Math.acos( dot );\n      var invSinTheta = ( 1 / Math.sin( theta ) );\n\n      ratioA = ( Math.sin( ( 1 - t ) * theta ) * invSinTheta );\n      ratioB = ( Math.sin( ( t * theta ) ) * invSinTheta );\n    }\n\n    return new Quaternion(\n      ratioA * a.x + ratioB * b.x,\n      ratioA * a.y + ratioB * b.y,\n      ratioA * a.z + ratioB * b.z,\n      ratioA * a.w + ratioB * b.w\n    );\n  };\n\n  Poolable.mixin( Quaternion, {\n    defaultFactory: function() { return new Quaternion(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y, z, w ) {\n        if ( pool.length ) {\n          return pool.pop().set( x, y, z, w );\n        }\n        else {\n          return new Quaternion( x, y, z, w );\n        }\n      };\n    }\n  } );\n\n  return Quaternion;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Random number generator with an optional seed.\n *\n * @author John Blanco\n * @author Mohamed Safi\n * @author Aaron Davis\n * @author Sam Reid\n */\ndefine( 'DOT/Random',['require','DOT/Util','DOT/dot'],function( require ) {\n  'use strict';\n\n  // modules\n  var Util = require( 'DOT/Util' );\n  var dot = require( 'DOT/dot' );\n\n  function Random( options ) {\n    options = _.extend( {\n\n      // {Tandem} for deterministic playback in randomized sims\n      tandem: null,\n\n      // {number|null} seed for the random number generator.\n      //               when seed is null, Math.random() is used\n      seed: null,\n\n      // {boolean} if true, use the seed specified statically in the preloads for replicable playback in phet-io\n      // this is a convenience option since it will be a common occurrence to use the replicable playback seed\n      // if staticSeed and seed are both specified, there will be an assertion error.\n      staticSeed: false\n\n    }, options );\n\n    if ( options.seed !== null && options.staticSeed ) {\n      assert && assert( false, 'cannot specify seed and useChipperSeed, use one or the other' );\n    }\n\n    var seed = options.staticSeed ? window.phet.chipper.randomSeed : options.seed;\n    this.setSeed( seed );\n\n    options.tandem && options.tandem.addInstance( this );\n  }\n\n  dot.register( 'Random', Random );\n\n  Random.prototype = {\n\n    constructor: Random,\n\n    /**\n     * Re-seed the random number generator, or null to use Math.random()\n     * @param seed\n     */\n    setSeed: function( seed ) {\n      this.seed = seed;\n\n      // Use \"new\" to create a local prng without altering Math.random.\n      this.seedrandom = this.seed !== null ? new Math.seedrandom( this.seed + '' ) : null;\n    },\n\n    getSeed: function() {\n      return this.seed;\n    },\n\n    random: function() {\n      return this.seed === null ? Math.random() : this.seedrandom();\n    },\n\n    nextBoolean: function() {\n      return this.random() >= 0.5;\n    },\n\n    nextInt: function( n ) {\n      var value = this.random() * n;\n      return value | 0; // convert to int\n    },\n\n    nextDouble: function() {\n      var vv = this.random();\n      return vv;\n    },\n\n    /**\n     * @public\n     * @returns {number}\n     * // TODO: Seed this\n     */\n    nextGaussian: function() {\n      // random gaussian with mean = 0 and standard deviation = 1\n      return Util.boxMullerTransform( 0, 1 );\n    }\n  };\n\n  return Random;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 2-dimensional ray\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Ray2',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  function Ray2( position, direction ) {\n    this.position = position;\n    this.direction = direction;\n\n    assert && assert( Math.abs( direction.magnitude() - 1 ) < 0.01 );\n\n    phetAllocation && phetAllocation( 'Ray2' );\n  }\n\n  dot.register( 'Ray2', Ray2 );\n\n  Ray2.prototype = {\n    constructor: Ray2,\n\n    shifted: function( distance ) {\n      return new Ray2( this.pointAtDistance( distance ), this.direction );\n    },\n\n    pointAtDistance: function( distance ) {\n      return this.position.plus( this.direction.timesScalar( distance ) );\n    },\n\n    toString: function() {\n      return this.position.toString() + ' => ' + this.direction.toString();\n    }\n  };\n\n  return Ray2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 3-dimensional ray\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Ray3',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  function Ray3( position, direction ) {\n    this.position = position;\n    this.direction = direction;\n  }\n\n  dot.register( 'Ray3', Ray3 );\n\n  Ray3.prototype = {\n    constructor: Ray3,\n\n    shifted: function( distance ) {\n      return new Ray3( this.pointAtDistance( distance ), this.direction );\n    },\n\n    pointAtDistance: function( distance ) {\n      return this.position.plus( this.direction.timesScalar( distance ) );\n    },\n\n    // @param {Plane3} plane\n    distanceToPlane: function( plane ) {\n      return ( plane.distance - this.position.dot( plane.normal ) ) / this.direction.dot( plane.normal );\n    },\n\n    toString: function() {\n      return this.position.toString() + ' => ' + this.direction.toString();\n    }\n  };\n\n  return Ray3;\n} );\n\n","// Copyright 2013-2014, University of Colorado Boulder\n\n/**\n * A 2D rectangle-shaped bounded area, with a convenience name and constructor. Totally functionally\n * equivalent to Bounds2, but with a different constructor.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Rectangle',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n\n  function Rectangle( x, y, width, height ) {\n    assert && assert( height !== undefined, 'Rectangle requires 4 parameters' );\n    Bounds2.call( this, x, y, x + width, y + height );\n  }\n\n  dot.register( 'Rectangle', Rectangle );\n\n  inherit( Bounds2, Rectangle );\n\n  return Rectangle;\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * A sphere in 3 dimensions (NOT a 3-sphere).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Sphere3',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  /*\n   * @constructor\n   * @param {Vector3} center - The center of the sphere\n   * @param {number} radius - The radius of the sphere\n   */\n  function Sphere3( center, radius ) {\n    this.center = center;\n    this.radius = radius;\n\n    assert && assert( radius >= 0 );\n\n    phetAllocation && phetAllocation( 'Sphere3' );\n  }\n\n  dot.register( 'Sphere3', Sphere3 );\n\n  Sphere3.prototype = {\n    constructor: Sphere3,\n\n    /*\n     * @param {Ray3} ray - The ray to intersect with the sphere\n     * @param {number} epsilon - A small varing-point value to be used to handle intersections tangent to the sphere\n     * @returns An intersection result { distance, hitPoint, normal, fromOutside }, or null if the sphere is behind the ray\n     */\n    intersect: function( ray, epsilon ) {\n      var raydir = ray.direction;\n      var pos = ray.position;\n      var centerToRay = pos.minus( this.center );\n\n      // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)\n      var tmp = raydir.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * ( centerToRayDistSq - this.radius * this.radius );\n      if ( det < epsilon ) {\n        // ray misses sphere entirely\n        return null;\n      }\n\n      var base = raydir.dot( this.center ) - raydir.dot( pos );\n      var sqt = Math.sqrt( det ) / 2;\n\n      // the \"first\" entry point distance into the sphere. if we are inside the sphere, it is behind us\n      var ta = base - sqt;\n\n      // the \"second\" entry point distance\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // sphere is behind ray, so don't return an intersection\n        return null;\n      }\n\n      var hitPositionB = ray.pointAtDistance( tb );\n      var normalB = hitPositionB.minus( this.center ).normalized();\n\n      if ( ta < epsilon ) {\n        // we are inside the sphere\n        // in => out\n        return {\n          distance: tb,\n          hitPoint: hitPositionB,\n          normal: normalB.negated(),\n          fromOutside: false\n        };\n      }\n      else {\n        // two possible hits\n        var hitPositionA = ray.pointAtDistance( ta );\n        var normalA = hitPositionA.minus( this.center ).normalized();\n\n        // close hit, we have out => in\n        return {\n          distance: ta,\n          hitPoint: hitPositionA,\n          normal: normalA,\n          fromOutside: true\n        };\n      }\n    },\n\n    /*\n     * @param {Ray3} ray - The ray to intersect with the sphere\n     * @param {number} epsilon - A small varing-point value to be used to handle intersections tangent to the sphere\n     * @returns An array of intersection results like { distance, hitPoint, normal, fromOutside }. Will be 0 or 2, with\n     *          the \"proper\" intersection first, if applicable (closest in front of the ray).\n     */\n    intersections: function( ray, epsilon ) {\n      var raydir = ray.direction;\n      var pos = ray.position;\n      var centerToRay = pos.minus( this.center );\n\n      // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)\n      var tmp = raydir.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * ( centerToRayDistSq - this.radius * this.radius );\n      if ( det < epsilon ) {\n        // ray misses sphere entirely\n        return [];\n      }\n\n      var base = raydir.dot( this.center ) - raydir.dot( pos );\n      var sqt = Math.sqrt( det ) / 2;\n\n      // the \"first\" entry point distance into the sphere. if we are inside the sphere, it is behind us\n      var ta = base - sqt;\n\n      // the \"second\" entry point distance\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // sphere is behind ray, so don't return an intersection\n        return [];\n      }\n\n      var hitPositionB = ray.pointAtDistance( tb );\n      var normalB = hitPositionB.minus( this.center ).normalized();\n\n      var hitPositionA = ray.pointAtDistance( ta );\n      var normalA = hitPositionA.minus( this.center ).normalized();\n\n      var resultB = {\n        distance: tb,\n        hitPoint: hitPositionB,\n        normal: normalB.negated(),\n        fromOutside: false\n      };\n      var resultA = {\n        distance: ta,\n        hitPoint: hitPositionA,\n        normal: normalA,\n        fromOutside: true\n      };\n      if ( ta < epsilon ) {\n        // we are inside the sphere\n        // in => out\n\n        return [ resultB, resultA ];\n      }\n      else {\n        // two possible hits\n\n        // close hit, we have out => in\n        return [ resultA, resultB ];\n      }\n    }\n  };\n\n  return Sphere3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'AXON/axon',['require','PHET_CORE/Namespace'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  return new Namespace( 'axon' );\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * If given an Array, removes all of its elements and returns it. Otherwise, if given a falsy value\n * (null/undefined/etc.), it will create and return a fresh Array.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/cleanArray',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function cleanArray( arr ) {\n    assert && assert( !arr || ( arr instanceof Array ), 'cleanArray either takes an Array' );\n\n    if ( arr ) {\n      // fastest way to clear an array (http://stackoverflow.com/questions/1232040/how-to-empty-an-array-in-javascript, http://jsperf.com/array-destroy/32)\n      // also, better than length=0, since it doesn't create significant garbage collection (like length=0), tested on Chrome 34.\n      while ( arr.length ) {\n        arr.pop();\n      }\n      return arr;\n    }\n    else {\n      return [];\n    }\n  }\n\n  phetCore.register( 'cleanArray', cleanArray );\n\n  return cleanArray;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Lightweight event & listener abstraction.\n * @author Sam Reid\n */\ndefine( 'AXON/Events',['require','AXON/axon','PHET_CORE/cleanArray'],function( require ) {\n  'use strict';\n\n  // modules\n  var axon = require( 'AXON/axon' );\n  var cleanArray = require( 'PHET_CORE/cleanArray' );\n\n  /**\n   * @class Events\n   * @constructor\n   */\n  function Events( options ) {\n\n    this._eventListeners = {}; // @private\n    this._staticEventListeners = {}; // @private\n\n    options && options.tandem && options.tandem.addInstance( this );\n    this.disposeEvents = function() {\n      options && options.tandem && options.tandem.removeInstance( this );\n    };\n  }\n\n  axon.register( 'Events', Events );\n\n  Events.prototype = {\n\n    // @public\n    dispose: function() {\n      this.disposeEvents();\n    },\n\n    /////////////////////////////////////////////\n    // Below this point are the functions for event handling, basically orthogonal to property value change notifications\n\n    /**\n     * Register a listener when the specified eventName is triggered. Use off() to remove.\n     * Concurrent modification of listeners (on/off) from within the callback is acceptable.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    on: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      this._eventListeners[ eventName ] = this._eventListeners[ eventName ] || [];\n      this._eventListeners[ eventName ].push( callback );\n    },\n\n    /**\n     * Register a listener when the specified eventName is triggered. Listener should be \"static\", meaning:\n     *   1. It shall not add/remove any \"static\" listeners (including itself) while it is being called (as any type of side-effect), and\n     *   2. \"static\" listeners should not be added while a non-static listener (on the same object) is being called.\n     * These restrictions allow us to guarantee that all listeners attached when an event is triggered are called.\n     * Since static listeners are stored separately, use offStatic() to remove listeners added with onStatic()\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    onStatic: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      this._staticEventListeners[ eventName ] = this._staticEventListeners[ eventName ] || [];\n      this._staticEventListeners[ eventName ].push( callback );\n    },\n\n    /**\n     * Adds a function which will only be called back once, after which it is removed as a listener.\n     * If you need to remove a function added with 'once' you will have to remove its handle, which is returned by the function.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback function to be called back once (if at all)\n     * @public\n     */\n    once: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var events = this;\n      var wrappedCallback = function() {\n        events.off( eventName, wrappedCallback );\n\n        //If no arguments being passed through, call back without processing arguments, for possible speed\n        if ( arguments.length === 0 ) {\n          callback();\n        }\n        else {\n\n          //General case of passing events through to the wrapped callback function\n          callback.apply( this, Array.prototype.slice.call( arguments, 0 ) );\n        }\n      };\n      this.on( eventName, wrappedCallback );\n\n      //Return the handle in case it needs to be removed.\n      return wrappedCallback;\n    },\n\n    /**\n     * Remove a listener added with on() from the specified event type.  Does nothing if the listener did not exist.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    off: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var index = -1;\n      if ( this._eventListeners[ eventName ] ) {\n        index = this._eventListeners[ eventName ].indexOf( callback );\n        if ( index !== -1 ) {\n          this._eventListeners[ eventName ].splice( index, 1 );\n        }\n      }\n\n      return index; // so we can tell if we actually removed a listener\n    },\n\n    /**\n     * Remove a listener added with onStatic() from the specified event type.  Does nothing if the listener did not exist.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    offStatic: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var index = -1;\n      if ( this._staticEventListeners[ eventName ] ) {\n        index = this._staticEventListeners[ eventName ].indexOf( callback );\n        if ( index !== -1 ) {\n          this._staticEventListeners[ eventName ].splice( index, 1 );\n        }\n      }\n\n      return index; // so we can tell if we actually removed a listener\n    },\n\n    /**\n     * Checks for the existence of a specific listener, attached to a specific event name. Doesn't check for static listeners\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @returns {boolean}\n     * @public\n     */\n    hasListener: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var array = this._eventListeners[ eventName ];\n      return !!array && array.indexOf( callback ) >= 0;\n    },\n\n    /**\n     * Checks for the existence of a specific static listener, attached to a specific event name. Doesn't check for non-static listeners\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @returns {boolean}\n     * @public\n     */\n    hasStaticListener: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var array = this._staticEventListeners[ eventName ];\n      return !!array && array.indexOf( callback ) >= 0;\n    },\n\n    /**\n     * Removes all listeners added with on() and onStatic().\n     * @public\n     */\n    removeAllEventListeners: function() {\n      var eventName;\n      for ( eventName in this._eventListeners ) {\n        cleanArray( this._eventListeners[ eventName ] );\n      }\n      for ( eventName in this._staticEventListeners ) {\n        cleanArray( this._staticEventListeners[ eventName ] );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name and arguments.\n     * @param {string} eventName the name for the event channel\n     * @param args... optional arguments to pass to the listeners\n     * @public\n     */\n    trigger: function( eventName ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // only compute our arguments suffix once, instead of in our inner loop\n      var suffix;\n      var hasNoArguments = arguments.length === 1;\n      if ( !hasNoArguments && ( count > 0 || staticCount > 0 ) ) {\n        phetAllocation && phetAllocation( 'Array' );\n        suffix = Array.prototype.slice.call( arguments, 1 );\n      }\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        var listener = listeners[ i ];\n\n        //Simple case of no arguments, call it separately for improved performance in case it is faster (untested)\n        if ( hasNoArguments ) {\n          listener();\n        }\n        else {\n          listener.apply( this, suffix );\n        }\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        var staticListener = staticListeners[ i ];\n\n        //Simple case of no arguments, call it separately for improved performance in case it is faster (untested)\n        if ( hasNoArguments ) {\n          staticListener( arguments );\n        }\n        else {\n          staticListener.apply( this, suffix );\n        }\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name, with no arguments.  Since the number of arguments is known\n     * no additional work is required to process and pass through the arguments (as opposed to trigger() itself).\n     * @param {string} eventName the name for the event channel\n     * @public\n     */\n    trigger0: function( eventName ) {\n      assert && assert( arguments.length === 1 );\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        listeners[ i ]();\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        staticListeners[ i ]();\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name, with a single argument.  Since the number of arguments is known\n     * no additional work is required to process and pass through the arguments (as opposed to trigger() itself).\n     * @param {string} eventName the name for the event channel\n     * @param {Object} param1 - the argument to pass through to the listeners\n     * @public\n     */\n    trigger1: function( eventName, param1 ) {\n      assert && assert( arguments.length === 2 );\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        listeners[ i ]( param1 );\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        staticListeners[ i ]( param1 );\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name, with two arguments.  Since the number of arguments is known\n     * no additional work is required to process and pass through the arguments (as opposed to trigger() itself).\n     * @param {string} eventName the name for the event channel\n     * @param {Object} param1 - the first parameter\n     * @param {Object} param2 - the second parameter\n     * @public\n     */\n    trigger2: function( eventName, param1, param2 ) {\n      assert && assert( arguments.length === 3 );\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        listeners[ i ]( param1, param2 );\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        staticListeners[ i ]( param1, param2 );\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    }\n  };\n\n  return Events;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Forward and inverse transforms with 3x3 matrices. Methods starting with 'transform' will apply the transform from our\n * primary matrix, while methods starting with 'inverse' will apply the transform from the inverse of our matrix.\n *\n * Generally, this means transform.inverseThing( transform.transformThing( thing ) ).equals( thing ).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Transform3',['require','PHET_CORE/inherit','AXON/Events','DOT/dot','DOT/Matrix3','DOT/Vector2','DOT/Ray2'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n  var dot = require( 'DOT/dot' );\n\n  require( 'DOT/Matrix3' );\n  require( 'DOT/Vector2' );\n  require( 'DOT/Ray2' );\n\n  var scratchMatrix = new dot.Matrix3();\n\n  function checkMatrix( matrix ) {\n    return ( matrix instanceof dot.Matrix3 ) && matrix.isFinite();\n  }\n\n  /**\n   * Creates a transform based around an initial matrix.\n   * @constructor\n   * @public\n   *\n   * @param {Matrix3} matrix\n   */\n  function Transform3( matrix ) {\n    Events.call( this );\n\n    // @private {Matrix3} - The primary matrix used for the transform\n    this.matrix = dot.Matrix3.IDENTITY.copy();\n\n    // @private {Matrix3} - The inverse of the primary matrix, computed lazily\n    this.inverse = dot.Matrix3.IDENTITY.copy();\n\n    // @private {Matrix3} - The transpose of the primary matrix, computed lazily\n    this.matrixTransposed = dot.Matrix3.IDENTITY.copy();\n\n    // @private {Matrix3} - The inverse of the transposed primary matrix, computed lazily\n    this.inverseTransposed = dot.Matrix3.IDENTITY.copy();\n\n\n    // @private {boolean} - Whether this.inverse has been computed based on the latest primary matrix\n    this.inverseValid = true;\n\n    // @private {boolean} - Whether this.matrixTransposed has been computed based on the latest primary matrix\n    this.transposeValid = true;\n\n    // @private {boolean} - Whether this.inverseTransposed has been computed based on the latest primary matrix\n    this.inverseTransposeValid = true;\n\n    if ( matrix ) {\n      this.setMatrix( matrix );\n    }\n\n    phetAllocation && phetAllocation( 'Transform3' );\n  }\n\n  dot.register( 'Transform3', Transform3 );\n\n  inherit( Events, Transform3, {\n    /*---------------------------------------------------------------------------*\n     * mutators\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets the value of the primary matrix directly from a Matrix3. Does not change the Matrix3 instance of this\n     * Transform3.\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    setMatrix: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // copy the matrix over to our matrix\n      this.matrix.set( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * This should be called after our internal matrix is changed. It marks the other dependent matrices as invalid,\n     * and sends out notifications of the change.\n     * @private\n     */\n    invalidate: function() {\n      // sanity check\n      assert && assert( this.matrix.isFinite() );\n\n      // dependent matrices now invalid\n      this.inverseValid = false;\n      this.transposeValid = false;\n      this.inverseTransposeValid = false;\n\n      this.trigger0( 'change' );\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = matrix * this.matrix.\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    prepend: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // In the absence of a prepend-multiply function in Matrix3, copy over to a scratch matrix instead\n      // TODO: implement a prepend-multiply directly in Matrix3 for a performance increase\n      scratchMatrix.set( this.matrix );\n      this.matrix.set( matrix );\n      this.matrix.multiplyMatrix( scratchMatrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Optimized prepended translation such that: this.matrix = translation( x, y ) * this.matrix.\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    prependTranslation: function( x, y ) {\n      // See scenery#119 for more details on the need.\n\n      assert && assert( typeof x === 'number' && typeof y === 'number' && isFinite( x ) && isFinite( y ),\n        'Attempted to prepend non-finite or non-number (x,y) to the transform' );\n\n      this.matrix.prependTranslation( x, y );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = this.matrix * matrix\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    append: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      this.matrix.multiplyMatrix( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Like prepend(), but prepends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform3} transform\n     */\n    prependTransform: function( transform ) {\n      this.prepend( transform.matrix );\n    },\n\n    /**\n     * Like append(), but appends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform3} transform\n     */\n    appendTransform: function( transform ) {\n      this.append( transform.matrix );\n    },\n\n    /**\n     * Sets the transform of a Canvas context to be equivalent to this transform.\n     * @public\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    applyToCanvasContext: function( context ) {\n      context.setTransform( this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m02(), this.matrix.m12() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * getters\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this transform.\n     * @public\n     *\n     * @returns {Transform3}\n     */\n    copy: function() {\n      var transform = new Transform3( this.matrix );\n\n      transform.inverse = this.inverse;\n      transform.matrixTransposed = this.matrixTransposed;\n      transform.inverseTransposed = this.inverseTransposed;\n\n      transform.inverseValid = this.inverseValid;\n      transform.transposeValid = this.transposeValid;\n      transform.inverseTransposeValid = this.inverseTransposeValid;\n    },\n\n    /**\n     * Returns the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getMatrix: function() {\n      return this.matrix;\n    },\n\n    /**\n     * Returns the inverse of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getInverse: function() {\n      if ( !this.inverseValid ) {\n        this.inverseValid = true;\n\n        this.inverse.set( this.matrix );\n        this.inverse.invert();\n      }\n      return this.inverse;\n    },\n\n    /**\n     * Returns the transpose of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getMatrixTransposed: function() {\n      if ( !this.transposeValid ) {\n        this.transposeValid = true;\n\n        this.matrixTransposed.set( this.matrix );\n        this.matrixTransposed.transpose();\n      }\n      return this.matrixTransposed;\n    },\n\n    /**\n     * Returns the inverse of the transpose of matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getInverseTransposed: function() {\n      if ( !this.inverseTransposeValid ) {\n        this.inverseTransposeValid = true;\n\n        this.inverseTransposed.set( this.getInverse() ); // triggers inverse to be valid\n        this.inverseTransposed.transpose();\n      }\n      return this.inverseTransposed;\n    },\n\n    /**\n     * Returns whether our primary matrix is known to be an identity matrix. If false is returned, it doesn't necessarily\n     * mean our matrix isn't an identity matrix, just that it is unlikely in normal usage.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isIdentity: function() {\n      return this.matrix.type === dot.Matrix3.Types.IDENTITY;\n    },\n\n    /**\n     * Returns whether any components of our primary matrix are either infinite or NaN.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return this.matrix.isFinite();\n    },\n\n    /*---------------------------------------------------------------------------*\n     * forward transforms (for Vector2 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 2-dimensional vector like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M\\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    transformPosition2: function( v ) {\n      return this.matrix.timesVector2( v );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & b & 0 \\\\ d & e & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    transformDelta2: function( v ) {\n      var m = this.getMatrix();\n      // m . v - m . Vector2.ZERO\n      return new dot.Vector2( m.m00() * v.x + m.m01() * v.y, m.m10() * v.x + m.m11() * v.y );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector like it is a normal to a curve (so that the curve is transformed, and the new\n     * normal to the curve at the transformed point is returned).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & e & 0 \\\\ d & b & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}^{-1} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     * This is essentially the transposed inverse with translation removed.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    transformNormal2: function( v ) {\n      return this.getInverse().timesTransposeVector2( v ).normalize();\n    },\n\n    /**\n     * Returns the resulting x-coordinate of the transformation of all vectors with the initial input x-coordinate. If\n     * this is not well-defined (the x value depends on y), an assertion is thrown (and y is assumed to be 0).\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    transformX: function( x ) {\n      var m = this.getMatrix();\n      assert && assert( !m.m01(), 'Transforming an X value with a rotation/shear is ill-defined' );\n      return m.m00() * x + m.m02();\n    },\n\n    /**\n     * Returns the resulting y-coordinate of the transformation of all vectors with the initial input y-coordinate. If\n     * this is not well-defined (the y value depends on x), an assertion is thrown (and x is assumed to be 0).\n     * @public\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    transformY: function( y ) {\n      var m = this.getMatrix();\n      assert && assert( !m.m10(), 'Transforming a Y value with a rotation/shear is ill-defined' );\n      return m.m11() * y + m.m12();\n    },\n\n    /**\n     * Returns the x-coordinate difference for two transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y values) beforehand.\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    transformDeltaX: function( x ) {\n      var m = this.getMatrix();\n      // same as this.transformDelta2( new dot.Vector2( x, 0 ) ).x;\n      return m.m00() * x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x values) beforehand.\n     * @public\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    transformDeltaY: function( y ) {\n      var m = this.getMatrix();\n      // same as this.transformDelta2( new dot.Vector2( 0, y ) ).y;\n      return m.m11() * y;\n    },\n\n    /**\n     * Returns bounds (axis-aligned) that contains the transformed bounds rectangle.\n     * @pubic\n     *\n     * NOTE: transform.inverseBounds2( transform.transformBounds2( bounds ) ) may be larger than the original box,\n     * if it includes a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in\n     * area to cover ALL of the corners of the transformed bounding box.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    transformBounds2: function( bounds ) {\n      return bounds.transformed( this.matrix );\n    },\n\n    /**\n     * Returns a transformed kite.Shape.\n     * @pubic\n     *\n     * @param {Shape} shape\n     * @returns {Shape}\n     */\n    transformShape: function( shape ) {\n      return shape.transformed( this.matrix );\n    },\n\n    /**\n     * Returns a transformed ray.\n     * @pubic\n     *\n     * @param {Ray2} ray\n     * @returns {Ray2}\n     */\n    transformRay2: function( ray ) {\n      return new dot.Ray2( this.transformPosition2( ray.position ), this.transformDelta2( ray.direction ).normalized() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * inverse transforms (for Vector2 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 2-dimensional vector by the inverse of our transform like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M^{-1}\\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * This is the inverse of transformPosition2().\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    inversePosition2: function( v ) {\n      return this.getInverse().timesVector2( v );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector by the inverse of our transform like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & b & 0 \\\\ d & e & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}^{-1} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * This is the inverse of transformDelta2().\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    inverseDelta2: function( v ) {\n      var m = this.getInverse();\n      // m . v - m . Vector2.ZERO\n      return new dot.Vector2( m.m00() * v.x + m.m01() * v.y, m.m10() * v.x + m.m11() * v.y );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector by the inverse of our transform like it is a normal to a curve (so that the\n     * curve is transformed, and the new normal to the curve at the transformed point is returned).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & e & 0 \\\\ d & b & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     * This is essentially the transposed transform with translation removed.\n     *\n     * This is the inverse of transformNormal2().\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    inverseNormal2: function( v ) {\n      return this.matrix.timesTransposeVector2( v ).normalize();\n    },\n\n    /**\n     * Returns the resulting x-coordinate of the inverse transformation of all vectors with the initial input x-coordinate. If\n     * this is not well-defined (the x value depends on y), an assertion is thrown (and y is assumed to be 0).\n     * @public\n     *\n     * This is the inverse of transformX().\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    inverseX: function( x ) {\n      var m = this.getInverse();\n      assert && assert( !m.m01(), 'Inverting an X value with a rotation/shear is ill-defined' );\n      return m.m00() * x + m.m02();\n    },\n\n    /**\n     * Returns the resulting y-coordinate of the inverse transformation of all vectors with the initial input y-coordinate. If\n     * this is not well-defined (the y value depends on x), an assertion is thrown (and x is assumed to be 0).\n     * @public\n     *\n     * This is the inverse of transformY().\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    inverseY: function( y ) {\n      var m = this.getInverse();\n      assert && assert( !m.m10(), 'Inverting a Y value with a rotation/shear is ill-defined' );\n      return m.m11() * y + m.m12();\n    },\n\n    /**\n     * Returns the x-coordinate difference for two inverse-transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaX().\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    inverseDeltaX: function( x ) {\n      var m = this.getInverse();\n      assert && assert( !m.m01(), 'Inverting an X value with a rotation/shear is ill-defined' );\n      // same as this.inverseDelta2( new dot.Vector2( x, 0 ) ).x;\n      return m.m00() * x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two inverse-transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaY().\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    inverseDeltaY: function( y ) {\n      var m = this.getInverse();\n      assert && assert( !m.m10(), 'Inverting a Y value with a rotation/shear is ill-defined' );\n      // same as this.inverseDelta2( new dot.Vector2( 0, y ) ).y;\n      return m.m11() * y;\n    },\n\n    /**\n     * Returns bounds (axis-aligned) that contains the inverse-transformed bounds rectangle.\n     * @pubic\n     *\n     * NOTE: transform.inverseBounds2( transform.transformBounds2( bounds ) ) may be larger than the original box,\n     * if it includes a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in\n     * area to cover ALL of the corners of the transformed bounding box.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    inverseBounds2: function( bounds2 ) {\n      return bounds2.transformed( this.getInverse() );\n    },\n\n    /**\n     * Returns an inverse-transformed kite.Shape.\n     * @pubic\n     *\n     * This is the inverse of transformShape()\n     *\n     * @param {Shape} shape\n     * @returns {Shape}\n     */\n    inverseShape: function( shape ) {\n      return shape.transformed( this.getInverse() );\n    },\n\n    /**\n     * Returns an inverse-transformed ray.\n     * @pubic\n     *\n     * This is the inverse of transformRay2()\n     *\n     * @param {Ray2} ray\n     * @returns {Ray2}\n     */\n    inverseRay2: function( ray ) {\n      return new dot.Ray2( this.inversePosition2( ray.position ), this.inverseDelta2( ray.direction ).normalized() );\n    }\n  } );\n\n  return Transform3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Forward and inverse transforms with 4x4 matrices, allowing flexibility including affine and perspective transformations.\n *\n * Methods starting with 'transform' will apply the transform from our\n * primary matrix, while methods starting with 'inverse' will apply the transform from the inverse of our matrix.\n *\n * Generally, this means transform.inverseThing( transform.transformThing( thing ) ).equals( thing ).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Transform4',['require','DOT/dot','AXON/Events','PHET_CORE/inherit','DOT/Matrix4','DOT/Vector3','DOT/Ray3'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Events = require( 'AXON/Events' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  require( 'DOT/Matrix4' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Ray3' );\n\n  var scratchMatrix = new dot.Matrix4();\n\n  function checkMatrix( matrix ) {\n    return ( matrix instanceof dot.Matrix4 ) && matrix.isFinite();\n  }\n\n  /**\n   * Creates a transform based around an initial matrix.\n   * @constructor\n   * @public\n   *\n   * @param {Matrix4} matrix\n   */\n  function Transform4( matrix ) {\n    Events.call( this );\n\n    // @private {Matrix4} - The primary matrix used for the transform\n    this.matrix = dot.Matrix4.IDENTITY.copy();\n\n    // @private {Matrix4} - The inverse of the primary matrix, computed lazily\n    this.inverse = dot.Matrix4.IDENTITY.copy();\n\n    // @private {Matrix4} - The transpose of the primary matrix, computed lazily\n    this.matrixTransposed = dot.Matrix4.IDENTITY.copy();\n\n    // @private {Matrix4} - The inverse of the transposed primary matrix, computed lazily\n    this.inverseTransposed = dot.Matrix4.IDENTITY.copy();\n\n\n    // @private {boolean} - Whether this.inverse has been computed based on the latest primary matrix\n    this.inverseValid = true;\n\n    // @private {boolean} - Whether this.matrixTransposed has been computed based on the latest primary matrix\n    this.transposeValid = true;\n\n    // @private {boolean} - Whether this.inverseTransposed has been computed based on the latest primary matrix\n    this.inverseTransposeValid = true;\n\n    if ( matrix ) {\n      this.setMatrix( matrix );\n    }\n\n    phetAllocation && phetAllocation( 'Transform4' );\n  }\n\n  dot.register( 'Transform4', Transform4 );\n\n  inherit( Events, Transform4, {\n    /*---------------------------------------------------------------------------*\n     * mutators\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets the value of the primary matrix directly from a Matrix4. Does not change the Matrix4 instance of this\n     * Transform4.\n     * @public\n     *\n     * @param {Matrix4} matrix\n     */\n    setMatrix: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // copy the matrix over to our matrix\n      this.matrix.set( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * This should be called after our internal matrix is changed. It marks the other dependent matrices as invalid,\n     * and sends out notifications of the change.\n     * @private\n     */\n    invalidate: function() {\n      // sanity check\n      assert && assert( this.matrix.isFinite() );\n\n      // dependent matrices now invalid\n      this.inverseValid = false;\n      this.transposeValid = false;\n      this.inverseTransposeValid = false;\n\n      this.trigger0( 'change' );\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = matrix * this.matrix.\n     * @public\n     *\n     * @param {Matrix4} matrix\n     */\n    prepend: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // In the absence of a prepend-multiply function in Matrix4, copy over to a scratch matrix instead\n      // TODO: implement a prepend-multiply directly in Matrix4 for a performance increase\n      scratchMatrix.set( this.matrix );\n      this.matrix.set( matrix );\n      this.matrix.multiplyMatrix( scratchMatrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = this.matrix * matrix\n     * @public\n     *\n     * @param {Matrix4} matrix\n     */\n    append: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      this.matrix.multiplyMatrix( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Like prepend(), but prepends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform4} transform\n     */\n    prependTransform: function( transform ) {\n      this.prepend( transform.matrix );\n    },\n\n    /**\n     * Like append(), but appends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform4} transform\n     */\n    appendTransform: function( transform ) {\n      this.append( transform.matrix );\n    },\n\n    /**\n     * Sets the transform of a Canvas context to be equivalent to the 2D affine part of this transform.\n     * @public\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    applyToCanvasContext: function( context ) {\n      context.setTransform( this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m03(), this.matrix.m13() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * getters\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this transform.\n     * @public\n     *\n     * @returns {Transform4}\n     */\n    copy: function() {\n      var transform = new Transform4( this.matrix );\n\n      transform.inverse = this.inverse;\n      transform.matrixTransposed = this.matrixTransposed;\n      transform.inverseTransposed = this.inverseTransposed;\n\n      transform.inverseValid = this.inverseValid;\n      transform.transposeValid = this.transposeValid;\n      transform.inverseTransposeValid = this.inverseTransposeValid;\n    },\n\n    /**\n     * Returns the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getMatrix: function() {\n      return this.matrix;\n    },\n\n    /**\n     * Returns the inverse of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getInverse: function() {\n      if ( !this.inverseValid ) {\n        this.inverseValid = true;\n\n        this.inverse.set( this.matrix );\n        this.inverse.invert();\n      }\n      return this.inverse;\n    },\n\n    /**\n     * Returns the transpose of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getMatrixTransposed: function() {\n      if ( !this.transposeValid ) {\n        this.transposeValid = true;\n\n        this.matrixTransposed.set( this.matrix );\n        this.matrixTransposed.transpose();\n      }\n      return this.matrixTransposed;\n    },\n\n    /**\n     * Returns the inverse of the transpose of matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getInverseTransposed: function() {\n      if ( !this.inverseTransposeValid ) {\n        this.inverseTransposeValid = true;\n\n        this.inverseTransposed.set( this.getInverse() ); // triggers inverse to be valid\n        this.inverseTransposed.transpose();\n      }\n      return this.inverseTransposed;\n    },\n\n    /**\n     * Returns whether our primary matrix is known to be an identity matrix. If false is returned, it doesn't necessarily\n     * mean our matrix isn't an identity matrix, just that it is unlikely in normal usage.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isIdentity: function() {\n      return this.matrix.type === dot.Matrix4.Types.IDENTITY;\n    },\n\n    /**\n     * Returns whether any components of our primary matrix are either infinite or NaN.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return this.matrix.isFinite();\n    },\n\n    /*---------------------------------------------------------------------------*\n     * forward transforms (for Vector3 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 3-dimensional vector like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M\\begin{bmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{bmatrix}$.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    transformPosition3: function( v ) {\n      return this.matrix.timesVector3( v );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    transformDelta3: function( v ) {\n      return this.matrix.timesRelativeVector3( v );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector like it is a normal to a surface (so that the surface is transformed, and the new\n     * normal to the surface at the transformed point is returned).\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    transformNormal3: function( v ) {\n      return this.getInverse().timesTransposeVector3( v );\n    },\n\n    /**\n     * Returns the x-coordinate difference for two transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y,z values) beforehand.\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    transformDeltaX: function( x ) {\n      return this.transformDelta3( new dot.Vector3( x, 0, 0 ) ).x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x,z values) beforehand.\n     * @public\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    transformDeltaY: function( y ) {\n      return this.transformDelta3( new dot.Vector3( 0, y, 0 ) ).y;\n    },\n\n    /**\n     * Returns the z-coordinate difference for two transformed vectors, which add the z-coordinate difference of the input\n     * z (and same x,y values) beforehand.\n     * @public\n     *\n     * @param {number} z\n     * @returns {number}\n     */\n    transformDeltaZ: function( z ) {\n      return this.transformDelta3( new dot.Vector3( 0, 0, z ) ).z;\n    },\n\n    /**\n     * Returns a transformed ray.\n     * @pubic\n     *\n     * @param {Ray3} ray\n     * @returns {Ray3}\n     */\n    transformRay: function( ray ) {\n      return new dot.Ray3(\n        this.transformPosition3( ray.position ),\n        this.transformPosition3( ray.position.plus( ray.direction ) ).minus( this.transformPosition3( ray.position ) ) );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * inverse transforms (for Vector3 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 3-dimensional vector by the inverse of our transform like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M^{-1}\\begin{bmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{bmatrix}$.\n     *\n     * This is the inverse of transformPosition3().\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    inversePosition3: function( v ) {\n      return this.getInverse().timesVector3( v );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector by the inverse of our transform like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * This is the inverse of transformDelta3().\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    inverseDelta3: function( v ) {\n      // inverse actually has the translation rolled into the other coefficients, so we have to make this longer\n      return this.inversePosition3( v ).minus( this.inversePosition3( dot.Vector3.ZERO ) );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector by the inverse of our transform like it is a normal to a curve (so that the\n     * curve is transformed, and the new normal to the curve at the transformed point is returned).\n     * @public\n     *\n     * This is the inverse of transformNormal3().\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    inverseNormal3: function( v ) {\n      return this.matrix.timesTransposeVector3( v );\n    },\n\n    /**\n     * Returns the x-coordinate difference for two inverse-transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y,z values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaX().\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    inverseDeltaX: function( x ) {\n      return this.inverseDelta3( new dot.Vector3( x, 0, 0 ) ).x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two inverse-transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x,z values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaY().\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    inverseDeltaY: function( y ) {\n      return this.inverseDelta3( new dot.Vector3( 0, y, 0 ) ).y;\n    },\n\n    /**\n     * Returns the z-coordinate difference for two inverse-transformed vectors, which add the z-coordinate difference of the input\n     * z (and same x,y values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaZ().\n     *\n     * @param {number} z\n     * @returns {number}\n     */\n    inverseDeltaZ: function( z ) {\n      return this.inverseDelta3( new dot.Vector3( 0, 0, z ) ).z;\n    },\n\n    /**\n     * Returns an inverse-transformed ray.\n     * @pubic\n     *\n     * This is the inverse of transformRay()\n     *\n     * @param {Ray3} ray\n     * @returns {Ray3}\n     */\n    inverseRay: function( ray ) {\n      return new dot.Ray3(\n        this.inversePosition3( ray.position ),\n        this.inversePosition3( ray.position.plus( ray.direction ) ).minus( this.inversePosition3( ray.position ) )\n      );\n    }\n  } );\n\n  return Transform4;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'main',[\n  'DOT/dot',\n  'DOT/BinPacker',\n  'DOT/Bounds2',\n  'DOT/Bounds3',\n  'DOT/Complex',\n  'DOT/ConvexHull2',\n  'DOT/Dimension2',\n  'DOT/EigenvalueDecomposition',\n  'DOT/LinearFunction',\n  'DOT/LUDecomposition',\n  'DOT/Matrix',\n  'DOT/Matrix3',\n  'DOT/Matrix4',\n  'DOT/MatrixOps3',\n  'DOT/Permutation',\n  'DOT/Plane3',\n  'DOT/QRDecomposition',\n  'DOT/Quaternion',\n  'DOT/Random',\n  'DOT/Ray2',\n  'DOT/Ray3',\n  'DOT/Rectangle',\n  'DOT/SingularValueDecomposition',\n  'DOT/Sphere3',\n  'DOT/Transform3',\n  'DOT/Transform4',\n  'DOT/Util',\n  'DOT/Vector2',\n  'DOT/Vector3',\n  'DOT/Vector4'\n], function( dot ) {\n  'use strict';\n  return dot;\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Removes a single (the first) matching object from an Array.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/arrayRemove',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  /*\n   * @param {Array} arr\n   * @param {*} item - The item to remove from the array\n   */\n  function arrayRemove( arr, item ) {\n    assert && assert( arr instanceof Array, 'arrayRemove either takes an Array' );\n\n    var index = _.indexOf( arr, item );\n    assert && assert( index >= 0, 'item not found in Array' );\n\n    arr.splice( index, 1 );\n  }\n\n  phetCore.register( 'arrayRemove', arrayRemove );\n\n  return arrayRemove;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Creates an array of results from an iterator that takes a callback.\n *\n * For instance, if calling a function f( g ) will call g( 1 ), g( 2 ), and g( 3 ),\n * collect( function( callback ) { f( callback ); } );\n * will return [1,2,3].\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/collect',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function collect( iterate ) {\n    assert && assert( typeof iterate === 'function' );\n    var result = [];\n    iterate( function( ob ) {\n      result.push( ob );\n    } );\n    return result;\n  }\n\n  phetCore.register( 'collect', collect );\n\n  return collect;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Scans through potential properties on an object to detect prefixed forms, and returns the first match.\n *\n * E.g. currently:\n * phetCore.detectPrefix( document.createElement( 'div' ).style, 'transform' ) === 'webkitTransform'\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/detectPrefix',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  // @returns the best String str where obj[str] !== undefined, or returns undefined if that is not available\n  function detectPrefix( obj, name ) {\n    if ( obj[ name ] !== undefined ) { return name; }\n\n    // prepare for camelCase\n    name = name.charAt( 0 ).toUpperCase() + name.slice( 1 );\n\n    // Chrome planning to not introduce prefixes in the future, hopefully we will be safe\n    if ( obj[ 'moz' + name ] !== undefined ) { return 'moz' + name; }\n    if ( obj[ 'Moz' + name ] !== undefined ) { return 'Moz' + name; } // some prefixes seem to have all-caps?\n    if ( obj[ 'webkit' + name ] !== undefined ) { return 'webkit' + name; }\n    if ( obj[ 'ms' + name ] !== undefined ) { return 'ms' + name; }\n    if ( obj[ 'o' + name ] !== undefined ) { return 'o' + name; }\n    return undefined;\n  }\n\n  phetCore.register( 'detectPrefix', detectPrefix );\n\n  return detectPrefix;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Scans through potential event properties on an object to detect prefixed forms, and returns the first match.\n *\n * E.g. currently:\n * phetCore.detectPrefixEvent( document, 'fullscreenchange' ) === 'webkitfullscreenchange'\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/detectPrefixEvent',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  // @returns the best String str where obj['on'+str] !== undefined, or returns undefined if that is not available\n  function detectPrefixEvent( obj, name, isEvent ) {\n    if ( obj[ 'on' + name ] !== undefined ) { return name; }\n\n    // Chrome planning to not introduce prefixes in the future, hopefully we will be safe\n    if ( obj[ 'on' + 'moz' + name ] !== undefined ) { return 'moz' + name; }\n    if ( obj[ 'on' + 'Moz' + name ] !== undefined ) { return 'Moz' + name; } // some prefixes seem to have all-caps?\n    if ( obj[ 'on' + 'webkit' + name ] !== undefined ) { return 'webkit' + name; }\n    if ( obj[ 'on' + 'ms' + name ] !== undefined ) { return 'ms' + name; }\n    if ( obj[ 'on' + 'o' + name ] !== undefined ) { return 'o' + name; }\n    return undefined;\n  }\n\n  phetCore.register( 'detectPrefixEvent', detectPrefixEvent );\n\n  return detectPrefixEvent;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Escaping of HTML content that will be placed in the body, inside an element as a node.\n *\n * This is NOT for escaping something in other HTML contexts, for example as an attribute value\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\ndefine( 'PHET_CORE/escapeHTML',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function escapeHTML( str ) {\n    // see https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\n    // HTML Entity Encoding\n    return str\n      .replace( /&/g, '&amp;' )\n      .replace( /</g, '&lt;' )\n      .replace( />/g, '&gt;' )\n      .replace( /\\\"/g, '&quot;' )\n      .replace( /\\'/g, '&#x27;' )\n      .replace( /\\//g, '&#x2F;' );\n  }\n\n  phetCore.register( 'escapeHTML', escapeHTML );\n\n  return escapeHTML;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Abstraction for timed-event series that helps with variable frame-rates. Useful for things that need to happen at a\n * specific rate real-time regardless of the frame-rate.\n *\n * An EventTimer is created with a specific event \"model\" that determines when events occur, and a callback that will\n * be triggered for each event (with its time elapsed since it should have occurred).\n *\n * To run the EventTimer, call step( realTimeElapsed ), and it will call your callback for every event that would have\n * occurred over that time-frame (possibly zero).\n *\n * For example, create a timer with a constant rate that it will fire events every 1 time units:\n *\n * var timer = new phetCore.EventTimer( new phetCore.EventTimer.ConstantEventModel( 1 ), function( timeElapsed ) {\n *   console.log( 'event with timeElapsed: ' + timeElapsed );\n * } );\n *\n * Stepping once for 1.5 time units will fire once (0.5 seconds since the \"end\" of the step), and will be 0.5 seconds\n * from the next step:\n *\n * timer.step( 1.5 );\n * > event with timeElapsed: 0.5\n *\n * Stepping for a longer time will result in more events:\n *\n * timer.step( 6 );\n * > event with timeElapsed: 5.5\n * > event with timeElapsed: 4.5\n * > event with timeElapsed: 3.5\n * > event with timeElapsed: 2.5\n * > event with timeElapsed: 1.5\n * > event with timeElapsed: 0.5\n *\n * A step with zero time will trigger no events:\n *\n * timer.step( 0 );\n *\n * The timer will fire an event once it reaches the exact point in time:\n *\n * timer.step( 1.5 );\n * > event with timeElapsed: 1\n * > event with timeElapsed: 0\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/EventTimer',['require','PHET_CORE/phetCore','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  /*\n   * Create an event timer with a specific model (determines the time between events), and a callback to be called\n   * for events.\n   * @public\n   *\n   * @param {Object with getPeriodBeforeNextEvent(): Number} eventModel: getPeriodBeforeNextEvent() will be called at\n   *    the start and after every event to determine the time required to pass by before the next event occurs.\n   * @param {function} eventCallback( timeElapsed ): Will be called for every event. The timeElapsed passed in as the\n   *    only argument denotes the time elapsed since the event would have occurred. E.g. if we step for 5 seconds and\n   *    our event would have occurred 1 second into that step, the timeElapsed will be 4 seconds, since after the end\n   *    of the 5 seconds the event would have happened 4 seconds ago.\n   */\n  function EventTimer( eventModel, eventCallback ) {\n    assert && assert( typeof eventCallback === 'function', 'EventTimer requires a callback' );\n\n    // @private\n    this.eventModel = eventModel;\n    this.eventCallback = eventCallback;\n\n    // @private\n    this.timeBeforeNextEvent = this.eventModel.getPeriodBeforeNextEvent();\n  }\n\n  phetCore.register( 'EventTimer', EventTimer );\n\n  inherit( Object, EventTimer, {\n    /**\n     * Steps the timer forward by a certain amount of time. This may cause 0 or more events to actually occur.\n     * @public\n     *\n     * @param {number} dt\n     */\n    step: function( dt ) {\n      while ( dt >= this.timeBeforeNextEvent ) {\n        dt -= this.timeBeforeNextEvent;\n        this.timeBeforeNextEvent = this.eventModel.getPeriodBeforeNextEvent();\n\n        // how much time has elapsed since this event began\n        this.eventCallback( dt );\n      }\n\n      // use up the remaining DT\n      this.timeBeforeNextEvent -= dt;\n    }\n  } );\n\n  /*\n   * Event model that will fire events at a constant rate. An event will occur every 1/rate time units.\n   * @public\n   *\n   * @param {number} rate\n   */\n  EventTimer.ConstantEventModel = inherit( Object, function ConstantEventRate( rate ) {\n    assert && assert( typeof rate === 'number',\n      'The rate should be a number' );\n    assert && assert( rate > 0,\n      'We need to have a strictly positive rate in order to prevent infinite loops.' );\n\n    this.rate = rate;\n  }, {\n    // @public\n    getPeriodBeforeNextEvent: function() {\n      return 1 / this.rate;\n    }\n  } );\n\n  /*\n   * Event model that will fire events averaging a certain rate, but with the time between events being uniformly\n   * random.\n   * @public\n   *\n   * The pseudoRandomNumberSource, when called, should generate uniformly distributed random numbers in the range [0,1).\n   *\n   * @param {number} rate\n   * @param {function} pseudoRandomNumberSource() : Number\n   */\n  EventTimer.UniformEventModel = inherit( Object, function UniformEventModel( rate, pseudoRandomNumberSource ) {\n    assert && assert( typeof rate === 'number',\n      'The rate should be a number' );\n    assert && assert( typeof pseudoRandomNumberSource === 'function',\n      'The pseudo-random number source should be a function' );\n    assert && assert( rate > 0,\n      'We need to have a strictly positive rate in order to prevent infinite loops.' );\n\n    this.rate = rate;\n    this.pseudoRandomNumberSource = pseudoRandomNumberSource;\n  }, {\n    // @public\n    getPeriodBeforeNextEvent: function() {\n      var uniformRandomNumber = this.pseudoRandomNumberSource();\n      assert && assert( typeof uniformRandomNumber === 'number' &&\n      uniformRandomNumber >= 0 && uniformRandomNumber < 1,\n        'Our uniform random number is outside of its expected range with a value of ' + uniformRandomNumber );\n\n      // sample the exponential distribution\n      return uniformRandomNumber * 2 / this.rate;\n    }\n  } );\n\n  /*\n   * Event model that will fire events corresponding to a Poisson process with the specified rate.\n   * The pseudoRandomNumberSource, when called, should generate uniformly distributed random numbers in the range [0,1).\n   * @public\n   *\n   * @param {number} rate\n   * @param {function} pseudoRandomNumberSource() : number\n   */\n  EventTimer.PoissonEventModel = inherit( Object, function PoissonEventModel( rate, pseudoRandomNumberSource ) {\n    assert && assert( typeof rate === 'number',\n      'The time between events should be a number' );\n    assert && assert( typeof pseudoRandomNumberSource === 'function',\n      'The pseudo-random number source should be a function' );\n    assert && assert( rate > 0,\n      'We need to have a strictly positive poisson rate in order to prevent infinite loops.' );\n\n    this.rate = rate;\n    this.pseudoRandomNumberSource = pseudoRandomNumberSource;\n  }, {\n    // @public\n    getPeriodBeforeNextEvent: function() {\n      // A poisson process can be described as having an independent exponential distribution for the time between\n      // consecutive events.\n      // see http://en.wikipedia.org/wiki/Exponential_distribution#Generating_exponential_variates and\n      // http://en.wikipedia.org/wiki/Poisson_process\n\n      var uniformRandomNumber = this.pseudoRandomNumberSource();\n      assert && assert( typeof uniformRandomNumber === 'number' &&\n      uniformRandomNumber >= 0 && uniformRandomNumber < 1,\n        'Our uniform random number is outside of its expected range with a value of ' + uniformRandomNumber );\n\n      // sample the exponential distribution\n      return -Math.log( uniformRandomNumber ) / this.rate;\n    }\n  } );\n\n  return EventTimer;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Loads a script\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/loadScript',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  /*\n   * Load a script. The only required argument is src, and can be specified either as\n   * loadScript( \"<url>\" ) or loadScript( { src: \"<url>\", ... other options ... } ).\n   *\n   * Arguments:\n   *   src:         The source of the script to load\n   *   callback:    A callback to call (with no arguments) once the script is loaded and has been executed\n   *   async:       Whether the script should be loaded asynchronously. Defaults to true\n   *   cacheBuster: Whether the URL should have an appended query string to work around caches\n   */\n  function loadScript( args ) {\n    // handle a string argument\n    if ( typeof args === 'string' ) {\n      args = { src: args };\n    }\n\n    var src = args.src;\n    var callback = args.callback;\n    var async = args.async === undefined ? true : args.async;\n    var cacheBuster = args.cacheBuster === undefined ? false : args.cacheBuster;\n\n    var called = false;\n\n    var script = document.createElement( 'script' );\n    script.type = 'text/javascript';\n    script.async = async;\n    script.onload = script.onreadystatechange = function() {\n      var state = this.readyState;\n      if ( state && state !== 'complete' && state !== 'loaded' ) {\n        return;\n      }\n\n      if ( !called ) {\n        called = true;\n\n        if ( callback ) {\n          callback();\n        }\n      }\n    };\n\n    // make sure things aren't cached, just in case\n    script.src = src + ( cacheBuster ? '?random=' + Math.random().toFixed( 10 ) : '' );\n\n    var other = document.getElementsByTagName( 'script' )[ 0 ];\n    other.parentNode.insertBefore( script, other );\n  }\n\n  phetCore.register( 'loadScript', loadScript );\n\n  return loadScript;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Creates an array of arrays, which consists of pairs of objects from the input array without duplication.\n *\n * For example, phetCore.pairs( [ 'a', 'b', 'c' ] ) will return:\n * [ [ 'a', 'b' ], [ 'a', 'c' ], [ 'b', 'c' ] ]\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/pairs',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function pairs( array ) {\n    var result = [];\n    var length = array.length;\n    if ( length > 1 ) {\n      for ( var i = 0; i < length - 1; i++ ) {\n        var first = array[ i ];\n        for ( var j = i + 1; j < length; j++ ) {\n          result.push( [ first, array[ j ] ] );\n        }\n      }\n    }\n    return result;\n  }\n\n  phetCore.register( 'pairs', pairs );\n\n  return pairs;\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Partitions an array into two arrays: the first contains all elements that satisfy the predicate, and the second\n * contains all the (other) elements that do not satisfy the predicate.\n *\n * e.g. partition( [1,2,3,4], function( n ) { return n % 2 === 0; } ) will return [[2,4],[1,3]]\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/partition',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function partition( array, predicate ) {\n    assert && assert( array instanceof Array );\n    assert && assert( typeof predicate === 'function' );\n\n    var satisfied = [];\n    var unsatisfied = [];\n    var length = array.length;\n    for ( var i = 0; i < length; i++ ) {\n      if ( predicate( array[ i ] ) ) {\n        satisfied.push( array[ i ] );\n      }\n      else {\n        unsatisfied.push( array[ i ] );\n      }\n    }\n\n    return [ satisfied, unsatisfied ];\n  }\n\n  phetCore.register( 'partition', partition );\n\n  return partition;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Code for testing which platform is running.  Use sparingly, if at all!\n *\n * Sample usage:\n * if (platform.firefox) {node.renderer = 'canvas';}\n *\n * @author Sam Reid\n */\ndefine( 'PHET_CORE/platform',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  var ua = navigator.userAgent;\n\n  // Checks to see whether we are IE, and if so whether the version matches.\n  function isIE( version ) {\n    return getInternetExplorerVersion() === version;\n  }\n\n  //IE11 no longer reports MSIE in the user agent string, see https://github.com/phetsims/phet-core/issues/12\n  //This code is adapted from http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  function getInternetExplorerVersion() {\n    var rv = -1;\n    var re = null;\n    if ( navigator.appName === 'Microsoft Internet Explorer' ) {\n      re = new RegExp( 'MSIE ([0-9]{1,}[.0-9]{0,})' );\n      if ( re.exec( ua ) !== null ) {\n        rv = parseFloat( RegExp.$1 );\n      }\n    }\n    else if ( navigator.appName === 'Netscape' ) {\n      re = new RegExp( 'Trident/.*rv:([0-9]{1,}[.0-9]{0,})' );\n      if ( re.exec( ua ) !== null ) {\n        rv = parseFloat( RegExp.$1 );\n      }\n    }\n    return rv;\n  }\n\n  var platform = {\n    // Whether the browser is most likely Firefox\n    firefox: ua.toLowerCase().indexOf( 'firefox' ) > -1,\n\n    // Whether the browser is most likely Safari running on iOS\n    // See http://stackoverflow.com/questions/3007480/determine-if-user-navigated-from-mobile-safari\n    mobileSafari: !!( ua.match( /(iPod|iPhone|iPad)/ ) && ua.match( /AppleWebKit/ ) ),\n\n    // Whether the browser is a matching version of Safari running on OS X\n    safari5: !!( ua.match( /Version\\/5\\./ ) && ua.match( /Safari\\// ) && ua.match( /AppleWebKit/ ) ),\n    safari6: !!( ua.match( /Version\\/6\\./ ) && ua.match( /Safari\\// ) && ua.match( /AppleWebKit/ ) ),\n    safari7: !!( ua.match( /Version\\/7\\./ ) && ua.match( /Safari\\// ) && ua.match( /AppleWebKit/ ) ),\n\n    // Whether the browser is some type of IE (Internet Explorer)\n    ie: getInternetExplorerVersion() !== -1,\n\n    // Whether the browser is a specific version of IE (Internet Explorer)\n    ie9: isIE( 9 ),\n    ie10: isIE( 10 ),\n    ie11: isIE( 11 ),\n\n    // Whether the browser has Android in its user agent\n    android: ua.indexOf( 'Android' ) > 0,\n\n    // Whether the browser is Microsoft Edge\n    edge: !!ua.match( /Edge\\// ),\n\n    // Whether the browser is Chromium-based (usually Chrome)\n    chromium: (/chrom(e|ium)/).test( ua.toLowerCase() ) && !ua.match( /Edge\\// )\n  };\n  phetCore.register( 'platform', platform );\n\n  return platform;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'PHET_CORE/main',[\n  'PHET_CORE/phetCore',\n  'PHET_CORE/arrayRemove',\n  'PHET_CORE/cleanArray',\n  'PHET_CORE/collect',\n  'PHET_CORE/detectPrefix',\n  'PHET_CORE/detectPrefixEvent',\n  'PHET_CORE/escapeHTML',\n  'PHET_CORE/EventTimer',\n  'PHET_CORE/extend',\n  'PHET_CORE/inherit',\n  'PHET_CORE/isArray',\n  'PHET_CORE/loadScript',\n  'PHET_CORE/pairs',\n  'PHET_CORE/partition',\n  'PHET_CORE/phetAllocation',\n  'PHET_CORE/platform',\n  'PHET_CORE/Poolable'\n], function( phetCore ) {\n  'use strict';\n  return phetCore;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Lightweight event & listener abstraction for a single event type.\n *\n * @author Sam Reid (PhET Interactive Simulations)\n */\ndefine( 'AXON/Emitter',['require','PHET_CORE/inherit','AXON/axon'],function( require ) {\n  'use strict';\n\n  // modules\n  var inherit = require( 'PHET_CORE/inherit' );\n  var axon = require( 'AXON/axon' );\n\n  /**\n   *\n   * @constructor\n   */\n  function Emitter() {\n    this.listeners = [];\n\n    // @private - during emit() keep track of which listeners should receive events\n    //            in order to manage removal of listeners during emit()\n    this.listenersToEmitTo = [];\n  }\n\n  axon.register( 'Emitter', Emitter );\n\n  return inherit( Object, Emitter, {\n\n    /**\n     * Adds a listener\n     * @param {function} listener\n     * @public\n     */\n    addListener: function( listener ) {\n\n      // If callbacks are in progress, make a copy of the current list of listeners--the newly added listener\n      // will be available for the next emit() but not the one in progress.  This is to match behavior with removeListener\n      this.defendCallbacks();\n\n      this.listeners.push( listener );\n    },\n\n    /**\n     * Removes a listener\n     * @param {function} listener\n     * @public\n     */\n    removeListener: function( listener ) {\n\n      var index = this.listeners.indexOf( listener );\n      assert && assert( index >= 0, 'tried to removeListener on something that wasnt a listener' );\n\n      // If callbacks are in progress, make a copy of the current list of listeners--the removed listener\n      // will remain in the list and receive a callback for this emit call, see #72\n      this.defendCallbacks();\n\n      this.listeners.splice( index, 1 );\n    },\n\n    /**\n     * Removes all the listeners\n     * @public\n     */\n    removeAllListeners: function() {\n      while ( this.listeners.length > 0 ) {\n        this.removeListener( this.listeners[ 0 ] );\n      }\n    },\n\n    /**\n     * If processing callbacks during an emit() call and addListener/removeListener() is called,\n     * make a defensive copy of the array of listener before changing the array, and use it for\n     * the rest of the callbacks until the emit call has completed.\n     * @private\n     */\n    defendCallbacks: function() {\n\n      for ( var i = this.listenersToEmitTo.length - 1; i >= 0; i-- ) {\n\n        // Once we meet a level that was already defended, we can stop, since all previous levels are also defended\n        if ( this.listenersToEmitTo[ i ].defended ) {\n          break;\n        }\n        else {\n          var defendedListeners = this.listeners.slice();\n\n          // Mark copies as 'defended' so that it will use the original listeners when emit started and not the modified list.\n          defendedListeners.defended = true;\n          this.listenersToEmitTo[ i ] = defendedListeners;\n        }\n      }\n    },\n\n    /**\n     * Emits a single event.\n     * This method is called many times in a simulation and must be well-optimized.\n     * @public\n     */\n    emit: function() {\n      this.listenersToEmitTo.push( this.listeners );\n      var lastEntry = this.listenersToEmitTo.length - 1;\n\n      for ( var i = 0; i < this.listenersToEmitTo[ lastEntry ].length; i++ ) {\n        this.listenersToEmitTo[ lastEntry ][ i ]();\n      }\n\n      this.listenersToEmitTo.pop();\n    },\n\n    /**\n     * Emits a single event with one argument.  This is a copy-paste of emit() for performance reasons.\n     * @param {*} arg1\n     * @public\n     */\n    emit1: function( arg1 ) {\n      this.listenersToEmitTo.push( this.listeners );\n      var lastEntry = this.listenersToEmitTo.length - 1;\n\n      for ( var i = 0; i < this.listenersToEmitTo[ lastEntry ].length; i++ ) {\n        this.listenersToEmitTo[ lastEntry ][ i ]( arg1 );\n      }\n\n      this.listenersToEmitTo.pop();\n    },\n\n    /**\n     * Emits a single event with two arguments.  This is a copy-paste of emit() for performance reasons.\n     * @param {*} arg1\n     * @param {*} arg2\n     * @public\n     */\n    emit2: function( arg1, arg2 ) {\n      this.listenersToEmitTo.push( this.listeners );\n      var lastEntry = this.listenersToEmitTo.length - 1;\n\n      for ( var i = 0; i < this.listenersToEmitTo[ lastEntry ].length; i++ ) {\n        this.listenersToEmitTo[ lastEntry ][ i ]( arg1, arg2 );\n      }\n\n      this.listenersToEmitTo.pop();\n    },\n\n    /**\n     * Checks whether a listener is registered with this Emitter\n     * @param {function} listener\n     * @returns {boolean}\n     * @public\n     */\n    hasListener: function( listener ) {\n      assert && assert( arguments.length === 1, 'Emitter.hasListener should be called with 1 argument' );\n      return this.listeners.indexOf( listener ) >= 0;\n    },\n\n    /**\n     * Returns true if there are any listeners.\n     * @returns {boolean}\n     * @public\n     */\n    hasListeners: function() {\n      assert && assert( arguments.length === 0, 'Emitter.hasListeners should be called without arguments' );\n      return this.listeners.length > 0;\n    }\n  } );\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * A Multilink is an instance that can be used to link to multiple properties.  It is very similar to a DerivedProperty,\n * but has no value and does not conform to the Property API because it is intended for use with callbacks that do not\n * compute a value.  Multilink should not be created through calling its constructor directly, but through the\n * Property.multilink and Property.lazyMultilink functions.\n *\n * @author Sam Reid\n */\ndefine( 'AXON/Multilink',['require','AXON/axon','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  // modules\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  /**\n   * @param {Property[]} dependencies\n   * @param {function} callback function that expects args in the same order as dependencies\n   * @param {boolean} [lazy] Optional parameter that can be set to true if this should be a lazy multilink (no immediate callback)\n   * @constructor\n   */\n  function Multilink( dependencies, callback, lazy ) {\n\n    this.dependencies = dependencies; // @private\n\n    // @private Keep track of each dependency and only update the changed value, for speed\n    this.dependencyValues = dependencies.map( function( property ) {return property.get();} );\n\n    var multilink = this;\n\n    // @private Keep track of listeners so they can be detached\n    this.dependencyListeners = [];\n\n    //When a dependency value changes, update the list of dependencies and call back to the callback\n    for ( var i = 0; i < dependencies.length; i++ ) {\n      var dependency = dependencies[ i ];\n      (function( dependency, i ) {\n        var listener = function( newValue ) {\n          multilink.dependencyValues[ i ] = newValue;\n          callback.apply( null, multilink.dependencyValues );\n        };\n        multilink.dependencyListeners.push( listener );\n        dependency.lazyLink( listener );\n      })( dependency, i );\n    }\n\n    //Send initial call back but only if we are non-lazy\n    if ( !lazy ) {\n      callback.apply( null, this.dependencyValues );\n    }\n  }\n\n  axon.register( 'Multilink', Multilink );\n\n  return inherit( Object, Multilink, {\n\n    // @public\n    dispose: function() {\n      // Unlink from dependent properties\n      for ( var i = 0; i < this.dependencies.length; i++ ) {\n        var dependency = this.dependencies[ i ];\n        dependency.unlink( this.dependencyListeners[ i ] );\n      }\n      this.dependencies = null;\n      this.dependencyListeners = null;\n      this.dependencyValues = null;\n    }\n  } );\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * An observable property which notifies registered observers when the value changes.\n *\n * @author Sam Reid\n * @author Chris Malley (PixelZoom, Inc.)\n */\ndefine( 'AXON/Property',['require','AXON/axon','PHET_CORE/inherit','AXON/Events','AXON/Emitter','AXON/Multilink'],function( require ) {\n  'use strict';\n\n  // modules\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n  var Emitter = require( 'AXON/Emitter' );\n  var Multilink = require( 'AXON/Multilink' );\n\n  /**\n   * @param {*} value - the initial value of the property\n   * @param {Object} [options] - options\n   * @constructor\n   */\n  function Property( value, options ) {\n\n    var property = this;\n\n    // Check duck type for incorrect Tandem argument\n    if ( options && options.isTandem ) {\n      assert && assert( false, 'Options should be an Object, not a Tandem' );\n    }\n\n    options = _.extend( { tandem: null }, options );\n\n    // @private Internal Events for sending startedCallbacksForChanged & endedCallbacksForChanged\n    this.events = new Events();\n\n    // @private - Store the internal value and the initial value\n    this._value = value;\n\n    // @private - Initial value\n    this._initialValue = value;\n\n    // @private (unit-tests) - emit1 is called when the value changes (or on link)\n    // Also used in ShapePlacementBoard.js at the moment\n    this.changedEmitter = new Emitter();\n\n    options.tandem && options.tandem.addInstance( this );\n\n    // @private\n    this.disposeProperty = function() {\n\n      // Make sure there were no remaining observers.  If there are observers at disposal time, there may be a latent\n      // memory leak, see #77\n      assert && assert(\n        property.changedEmitter.listeners.length === 0,\n        'during disposal, expected 0 observers, actual = ' + property.changedEmitter.listeners.length\n      );\n      options.tandem && options.tandem.removeInstance( this );\n    };\n  }\n\n  axon.register( 'Property', Property );\n\n  return inherit( Object, Property, {\n\n      /**\n       * Gets the value.  You can also use the es5 getter (property.value) but this means is provided for inner loops or internal code that must be fast.\n       * @return {*}\n       * @public\n       */\n      get: function() {\n        return this._value;\n      },\n\n      /**\n       * Sets the value and notifies registered observers.  You can also use the es5 getter (property.value) but this means is provided for inner loops or internal code that must be fast.\n       * If the value hasn't changed, this is a no-op.\n       *\n       * @param {*} value\n       * @public\n       */\n      set: function( value ) {\n        if ( !this.equalsValue( value ) ) {\n          this._setAndNotifyObservers( value );\n        }\n        return this;\n      },\n\n      // @public returns true iff the specified value equals the value of this property\n      equalsValue: function( value ) {\n        return this.areValuesEqual( value, this._value );\n      },\n\n      /**\n       * Determines equality semantics for the wrapped type, including whether notifications are sent out when the\n       * wrapped value changes, and whether onValue is triggered.  A different implementation can be provided by\n       * subclasses or instances to change the equals definition. See #10 and #73\n       * @param {Object} a - should have the same type as Property element type\n       * @param {Object} b - should have the same type as Property element type\n       * @returns {boolean}\n       * @public\n       */\n      areValuesEqual: function( a, b ) {\n        return a === b;\n      },\n\n      // @public\n      get initialValue() {\n        return this._initialValue;\n      },\n\n      // @private\n      _setAndNotifyObservers: function( value ) {\n        var oldValue = this.get();\n        this._value = value;\n        this._notifyObservers( oldValue );\n      },\n\n      // @private\n      _notifyObservers: function( oldValue ) {\n\n        // Note the current value, since it will be sent to possibly multiple observers.\n        var value = this.get();\n\n        // TODO: Should Property extend or compose Events?  Would extending Events broaden its interface too much?\n        this.events.trigger2( 'startedCallbacksForChanged', value, oldValue );\n\n        this.changedEmitter.emit2( value, oldValue );\n\n        this.events.trigger0( 'endedCallbacksForChanged' );\n      },\n\n      /**\n       * Use this method when mutating a value (not replacing with a new instance) and you want to send notifications about the change.\n       * This is different from the normal axon strategy, but may be necessary to prevent memory allocations.\n       * This method is unsafe for removing observers because it assumes the observer list not modified, to save another allocation\n       * Only provides the new reference as a callback (no oldvalue)\n       * See https://github.com/phetsims/axon/issues/6\n       * @public\n       */\n      notifyObserversStatic: function() {\n        this.changedEmitter.emit1( this.get() );\n      },\n\n      /**\n       * Resets the value to the initial value.\n       * @public\n       */\n      reset: function() {\n        this.set( this._initialValue );\n      },\n\n      // @public\n      get value() { return this.get(); },\n\n      // @public\n      set value( newValue ) { this.set( newValue ); },\n\n      /**\n       * Adds an observer and notifies it immediately.\n       * If observer is already registered, this is a no-op.\n       * The initial notification provides the current value for newValue and null for oldValue.\n       *\n       * @param {function} observer a function of the form observer(newValue,oldValue)\n       * @public\n       */\n      link: function( observer ) {\n        if ( !this.changedEmitter.hasListener( observer ) ) {\n          this.changedEmitter.addListener( observer );\n          observer( this.get(), null ); // null should be used when an object is expected but unavailable\n        }\n      },\n\n      /**\n       * Add an observer to the Property, without calling it back right away.\n       * This is used when you need to register a observer without an immediate callback.\n       *\n       * @param {function} observer - a function with a single argument, which is the value of the property at the time the function is called.\n       * @public\n       */\n      lazyLink: function( observer ) {\n        this.changedEmitter.addListener( observer );\n      },\n\n      /**\n       * Removes an observer.\n       * If observer is not registered, this is a no-op.\n       *\n       * @param {function} observer\n       * @public\n       */\n      unlink: function( observer ) {\n        if ( this.changedEmitter.hasListener( observer ) ) {\n          this.changedEmitter.removeListener( observer );\n        }\n      },\n\n      /**\n       * Removes all observers.\n       * If no observers are registered, this is a no-op.\n       */\n      unlinkAll: function() {\n        this.changedEmitter.removeAllListeners();\n      },\n\n      /**\n       * Links an object's named attribute to this property.  Returns a handle so it can be removed using Property.unlink();\n       * Example: modelVisibleProperty.linkAttribute(view,'visible');\n       *\n       * @param object\n       * @param attributeName\n       * @public\n       */\n      linkAttribute: function( object, attributeName ) {\n        var handle = function( value ) {object[ attributeName ] = value;};\n        this.link( handle );\n        return handle;\n      },\n\n      /**\n       * Unlink an observer added with linkAttribute.  Note: the args of linkAttribute do not match the args of\n       * unlinkAttribute: here, you must pass the observer handle returned by linkAttribute rather than object and attributeName\n       *\n       * @param observer\n       * @public\n       */\n      unlinkAttribute: function( observer ) {\n        this.unlink( observer );\n      },\n\n      // @public Provide toString for console debugging, see http://stackoverflow.com/questions/2485632/valueof-vs-tostring-in-javascript\n      toString: function() {return 'Property{' + this.get() + '}'; },\n\n      // @public\n      valueOf: function() {return this.toString();},\n\n      /**\n       * Add an observer so that it will only fire once (and not on registration)\n       *\n       * I can see two ways to implement this:\n       * (a) add a field to the observer so after notifications it can be checked and possibly removed. Disadvantage: will make everything slower even if not using 'once'\n       * (b) wrap the observer in a new function which will call the observer and then remove itself.  Disadvantage: cannot remove an observer added using 'once'\n       * To avoid possible performance problems, use a wrapper function, and return it as a handle in case the 'once' observer must be removed before it is called once\n       *\n       * @param observer the observer which should be called back only for one property change (and not on registration)\n       * @returns {function} the wrapper handle in case the wrapped function needs to be removed with 'unlink' before it is called once\n       * @public\n       */\n      once: function( observer ) {\n        var property = this;\n        var wrapper = function( newValue, oldValue ) {\n          property.unlink( wrapper );\n          observer( newValue, oldValue );\n        };\n        this.lazyLink( wrapper );\n        return wrapper;\n      },\n\n      /**\n       * Convenience function for debugging a property values.  It prints the new value on registration and when changed.\n       * @param name debug name to be printed on the console\n       * @returns {function} the handle to the linked observer in case it needs to be removed later\n       * @public\n       */\n      debug: function( name ) {\n        var observer = function( value ) { console.log( name, value ); };\n        this.link( observer );\n        return observer;\n      },\n\n      /**\n       * Returns a function that can be used to toggle the property (using !)\n       * @returns {function}\n       * @public\n       */\n      get toggleFunction() {\n        return this.toggle.bind( this );\n      },\n\n      /**\n       * Modifies the value of this Property with the ! operator.  Works for booleans and non-booleans.\n       * @public\n       */\n      toggle: function() {\n        this.value = !this.value;\n      },\n\n      /**\n       * Adds an observer that is fired when the property takes the specified value.  If the property has the value already,\n       * the observer is called back immediately.  A reference to the observer is returned so that it can be removed.\n       *\n       * @param value the value to match\n       * @param observer the observer that is called when this Property\n       * @public\n       */\n      onValue: function( value, observer ) {\n        var property = this;\n        var onValueObserver = function( v ) {\n          if ( property.areValuesEqual( v, value ) ) {\n            observer();\n          }\n        };\n        this.link( onValueObserver );\n        return onValueObserver;\n      },\n\n      // @public Ensures that the Property is eligible for GC\n      dispose: function() {\n        this.disposeProperty();\n      },\n\n      /**\n       * Returns true if there are any listeners.\n       * @returns {boolean}\n       * @public\n       */\n      hasListeners: function() {\n        assert && assert( arguments.length === 0, 'Property.hasListeners should be called without arguments' );\n        return this.changedEmitter.hasListeners();\n      }\n    },\n\n    //statics\n    {\n\n      /**\n       * Registers an observer with multiple properties, then notifies the observer immediately.\n       * @param {Property[]} properties\n       * @param {function} observer no params, returns nothing\n       * @static\n       */\n      multilink: function( properties, observer ) {\n        return new Multilink( properties, observer, false );\n      },\n\n      lazyMultilink: function( properties, observer ) {\n        return new Multilink( properties, observer, true );\n      },\n\n      /**\n       * Removes the multilinked observer from this Property.\n       * Same as calling dispose() on the handle (which happens to be a DerivedProperty instance)\n       * @param {DerivedProperty} derivedProperty\n       */\n      unmultilink: function( derivedProperty ) {\n        derivedProperty.dispose();\n      },\n\n      /**\n       * Set up a PropertySet-like property on any object (see https://github.com/phetsims/axon/issues/42).\n       *\n       * @param {Object} object - The object that the property will be placed on\n       * @param {string} propertyName - Name of the property\n       * @param {*} initialValue - The initial value of the property\n       */\n      addProperty: function( object, propertyName, initialValue ) {\n        // defines the property\n        var property = object[ propertyName + 'Property' ] = new Property( initialValue );\n\n        // defines ES5 getter/setter\n        Object.defineProperty( object, propertyName, {\n          get: function() { return property.get(); },\n          set: function( value ) { property.set( value ); },\n\n          // Make it configurable and enumerable so it's easy to override...\n          configurable: true,\n          enumerable: true\n        } );\n      }\n    } );\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A DerivedProperty is computed based on other properties.  This implementation inherits from Property to (a) simplify\n * implementation and (b) ensure it remains consistent. Note that the setters should not be called directly, so the\n * setters (set, reset and es5 setter) throw an error if used directly.\n *\n * @author Sam Reid\n */\n\ndefine( 'AXON/DerivedProperty',['require','AXON/Property','AXON/axon','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  // modules\n  var Property = require( 'AXON/Property' );\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  function equalsFunction( a, b ) {\n    return a === b;\n  }\n\n  function notFunction( a ) {\n    return !a;\n  }\n\n  function conjunctionWithProperty( value, property ) {\n    return value && property.value;\n  }\n\n  function disjunctionWithProperty( value, property ) {\n    return value || property.value;\n  }\n\n  function addWithProperty( value, property ) {\n    return value + property.value;\n  }\n\n  function multiplyWithProperty( value, property ) {\n    return value * property.value;\n  }\n\n  /**\n   * @param {Property[]} dependencies - properties that this property's value is derived from\n   * @param {function} derivation - function that derives this property's value, expects args in the same order as dependencies\n   * @param {Object} [options] - see Property\n   * @constructor\n   */\n  function DerivedProperty( dependencies, derivation, options ) {\n\n    this.dependencies = dependencies; // @private\n\n    // @private Keep track of each dependency and only update the changed value, for speed\n    this.dependencyValues = dependencies.map( function( property ) {return property.get();} );\n\n    var initialValue = derivation.apply( null, this.dependencyValues );\n    Property.call( this, initialValue, options );\n\n    var derivedProperty = this;\n\n    // @private Keep track of listeners so they can be detached\n    this.dependencyListeners = [];\n\n    for ( var i = 0; i < dependencies.length; i++ ) {\n      var dependency = dependencies[ i ];\n      (function( dependency, i ) {\n        var listener = function( newValue ) {\n          derivedProperty.dependencyValues[ i ] = newValue;\n          Property.prototype.set.call( derivedProperty, derivation.apply( null, derivedProperty.dependencyValues ) );\n        };\n        derivedProperty.dependencyListeners.push( listener );\n        dependency.lazyLink( listener );\n      })( dependency, i );\n    }\n  }\n\n  axon.register( 'DerivedProperty', DerivedProperty );\n\n  return inherit( Property, DerivedProperty, {\n\n    // @public\n    dispose: function() {\n\n      Property.prototype.dispose.call( this );\n\n      // Unlink from dependent properties\n      for ( var i = 0; i < this.dependencies.length; i++ ) {\n        var dependency = this.dependencies[ i ];\n        dependency.unlink( this.dependencyListeners[ i ] );\n      }\n      this.dependencies = null;\n      this.dependencyListeners = null;\n      this.dependencyValues = null;\n    },\n\n    /**\n     * Override the mutators to provide an error message.  These should not be called directly,\n     * the value should only be modified when the dependencies change.\n     * @param value\n     * @override\n     * @public\n     */\n    set: function( value ) { throw new Error( 'Cannot set values directly to a derived property, tried to set: ' + value ); },\n\n    /**\n     * Override the mutators to provide an error message.  These should not be called directly, the value should only be modified\n     * when the dependencies change. Keep the newValue output in the string so the argument won't be stripped by minifier\n     * (which would cause crashes like https://github.com/phetsims/axon/issues/15)\n     * @param newValue\n     * @override\n     * @public\n     */\n    set value( newValue ) { throw new Error( 'Cannot es5-set values directly to a derived property, tried to set: ' + newValue ); },\n\n    /**\n     * Override get value as well to satisfy the linter which wants get/set pairs (even though it just uses the same code as the superclass).\n     * @returns {*}\n     * @override\n     * @public\n     */\n    get value() {return Property.prototype.get.call( this );},\n\n    /**\n     * Override the mutators to provide an error message.  These should not be called directly,\n     * the value should only be modified when the dependencies change.\n     * @override\n     * @public\n     */\n    reset: function() { throw new Error( 'Cannot reset a derived property directly' ); }\n  }, {\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is equal to secondPropert's\n     * value.\n     * @public\n     *\n     * @param {Property.<*>} firstProperty\n     * @param {Property.<*>} secondProperty\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    valueEquals: function( firstProperty, secondProperty, options ) {\n      return new DerivedProperty( [ firstProperty, secondProperty ], equalsFunction, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff every input property value is true.\n     * @public\n     *\n     * @param {Array.<Property.<boolean>>} properties\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    and: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, conjunctionWithProperty, true ), options ); // TODO: fix\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff any input property value is true.\n     * @public\n     *\n     * @param {Array.<Property.<boolean>>} properties\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    or: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, disjunctionWithProperty, false ), options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the sum of all input property values (or 0 if no properties\n     * are specified).\n     * @public\n     *\n     * @param {Array.<Property.<number>>}\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    sum: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, addWithProperty, 0 ), options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the sum of both input property values.\n     * @public\n     *\n     * @param {Property.<number>} firstProperty\n     * @param {Property.<number>} secondProperty\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    plus: function( firstProperty, secondProperty, options ) {\n      return DerivedProperty.sum( [ firstProperty, secondProperty ], options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the product of all input property values (or 1 if no properties\n     * are specified).\n     * @public\n     *\n     * @param {Array.<Property.<number>>}\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    product: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, multiplyWithProperty, 1 ), options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the product of both input property values.\n     * @public\n     *\n     * @param {Property.<number>} firstProperty\n     * @param {Property.<number>} secondProperty\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    times: function( firstProperty, secondProperty, options ) {\n      return DerivedProperty.product( [ firstProperty, secondProperty ], options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is strictly less than the input\n     * numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    lessThanNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value < number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is less than or equal to the\n     * input numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    lessThanEqualNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value <= number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is strictly greater than the\n     * input numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    greaterThanNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value > number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is greater than or equal to the\n     * input numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    greaterThanEqualNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value >= number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff the property's value is falsy.\n     * @public\n     *\n     * @param {Property.<*>} property\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    derivedNot: function( property, options ) {\n      return new DerivedProperty( [ property ], notFunction, options );\n    },\n\n    /**\n     * Creates a derived property whose value is values[ property.value ].\n     * @public\n     *\n     * @param {Property.<*>} property\n     * @param {Object} values\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<*>}\n     */\n    mapValues: function( property, values, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return values[ value ]; }, options );\n    }\n  } );\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * An observable array of items.\n * <p>\n * Because the array is observable, we must be careful about the possibility of concurrent-modification errors.\n * Any time we iterate over the array, we must iterate over a copy, because callback may be modifying the array.\n *\n * @author Sam Reid\n * @author Chris Malley\n */\ndefine( 'AXON/ObservableArray',['require','AXON/Property','AXON/axon','PHET_CORE/inherit','AXON/Emitter'],function( require ) {\n  'use strict';\n\n  // modules\n  var Property = require( 'AXON/Property' );\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Emitter = require( 'AXON/Emitter' );\n\n  /**\n   * @param {[]} array\n   * @param {Object} [options]\n   * @constructor\n   */\n  function ObservableArray( array, options ) {\n\n    // Special case that the user supplied options but no array\n    if ( array instanceof Object && !(array instanceof Array) ) {\n      options = array;\n      array = null;\n    }\n\n    this._options = _.extend( {\n      allowDuplicates: false, // are duplicate items allowed in the array?\n      tandem: null            // Tandem is supported here.  This line doesn't do anything different than leaving tandem as undefined\n                              // but this entry serves as an indicator that tandem is supported here.\n    }, options );\n\n    this._array = array || []; // @private internal, do not access directly\n    this._addedListeners = []; // @private listeners called when an item is added\n    this._removedListeners = []; // @private listeners called when an item is removed\n\n    this.lengthProperty = new Property( this._array.length ); // @public (read-only) observe this, but don't set it\n\n    // @private Store the initial array, if any, for resetting, see #4\n    this.initialArray = array ? array.slice() : [];\n\n    // @private Event stream for signifying begin/end of callbacks\n    this.startedCallbacksForItemAddedEmitter = new Emitter();\n    this.endedCallbacksForItemAddedEmitter = new Emitter();\n    this.startedCallbacksForItemRemovedEmitter = new Emitter();\n    this.endedCallbacksForItemRemovedEmitter = new Emitter();\n\n    options && options.tandem && options.tandem.addInstance( this );\n    this.disposeObservableArray = function() {\n      options && options.tandem && options.tandem.removeInstance( this );\n    };\n  }\n\n  axon.register( 'ObservableArray', ObservableArray );\n\n  return inherit( Object, ObservableArray, {\n\n    // @public\n    dispose: function() {\n      this.disposeObservableArray();\n    },\n\n    /**\n     * Restore the array back to its initial state\n     * Note: if an item is in the current array and original array, it is removed and added back\n     * This may or may not change in the future, see #4\n     * @public\n     */\n    reset: function() {\n      for ( var i = 0; i < this._array.length; i++ ) {\n        this._fireItemRemoved( this._array[ i ] );\n      }\n      this._array = this.initialArray.slice();\n      for ( i = 0; i < this._array.length; i++ ) {\n        this._fireItemAdded( this._array[ i ] );\n      }\n    },\n\n    // @public\n    get length() { return this._array.length; },\n\n    /**\n     * Adds a listener that will be notified when an item is added to the list.\n     * @param listener function( item, observableArray )\n     * @public\n     */\n    addItemAddedListener: function( listener ) {\n      assert && assert( this._addedListeners.indexOf( listener ) === -1 ); // listener is not already registered\n      this._addedListeners.push( listener );\n    },\n\n    /**\n     * Removes a listener that was added via addItemAddedListener.\n     * @param listener\n     * @public\n     */\n    removeItemAddedListener: function( listener ) {\n      var index = this._addedListeners.indexOf( listener );\n      assert && assert( index !== -1 ); // listener is registered\n      this._addedListeners.splice( index, 1 );\n    },\n\n    /**\n     * Adds a listener that will be notified when an item is removed from the list.\n     * @param listener function( item, observableArray )\n     * @public\n     */\n    addItemRemovedListener: function( listener ) {\n      assert && assert( this._removedListeners.indexOf( listener ) === -1 ); // listener is not already registered\n      this._removedListeners.push( listener );\n    },\n\n    /**\n     * Removes a listener that was added via addItemRemovedListener.\n     * @param listener\n     * @public\n     */\n    removeItemRemovedListener: function( listener ) {\n      var index = this._removedListeners.indexOf( listener );\n      assert && assert( index !== -1 ); // listener is registered\n      this._removedListeners.splice( index, 1 );\n    },\n\n    /**\n     * Convenience function for adding both types of listeners in one shot.\n     * @param itemAddedListener\n     * @param itemRemovedListener\n     * @public\n     */\n    addListeners: function( itemAddedListener, itemRemovedListener ) {\n      this.addItemAddedListener( itemAddedListener );\n      this.addItemRemovedListener( itemRemovedListener );\n    },\n\n    // @private Internal: called when an item is added.\n    _fireItemAdded: function( item ) {\n      this.startedCallbacksForItemAddedEmitter.emit1( item );\n\n      //Signify that an item was added to the list\n      var copy = this._addedListeners.slice( 0 ); // operate on a copy, firing could result in the listeners changing\n      for ( var i = 0; i < copy.length; i++ ) {\n        copy[ i ]( item, this );\n      }\n\n      this.endedCallbacksForItemAddedEmitter.emit();\n    },\n\n    // Internal: called when an item is removed.\n    _fireItemRemoved: function( item ) {\n\n      this.startedCallbacksForItemRemovedEmitter.emit1( item );\n\n      //Signify that an item was removed from the list\n      var copy = this._removedListeners.slice( 0 ); // operate on a copy, firing could result in the listeners changing\n      for ( var i = 0; i < copy.length; i++ ) {\n        copy[ i ]( item, this );\n      }\n\n      this.endedCallbacksForItemRemovedEmitter.emit();\n    },\n\n    /**\n     * Adds an item to the end of the array.\n     * This is a convenience function, and is the same as push.\n     * @param item\n     * @public\n     */\n    add: function( item ) {\n      this.push( item );\n    },\n\n    /**\n     * Add items to the end of the array.\n     * This is a convenience function, and is the same as push.\n     * @param {Array} items\n     * @public\n     */\n    addAll: function( items ) {\n      for ( var i = 0; i < items.length; i++ ) {\n        this.add( items[ i ] );\n      }\n    },\n\n    /**\n     * Removes the first occurrence of an item from the array.\n     * If duplicates are allowed (see options.allowDuplicates) you may need to call this multiple\n     * times to totally purge item from the array.\n     * @param item\n     * @public\n     */\n    remove: function( item ) {\n      var index = this._array.indexOf( item );\n      if ( index !== -1 ) {\n        this._array.splice( index, 1 );\n        this.lengthProperty.set( this._array.length );\n        this._fireItemRemoved( item );\n      }\n    },\n\n    /**\n     * Removes the first occurrence of each item in the specified array.\n     * @param {Array} list a list of items to remove\n     * @see ObservableArray.remove\n     * @public\n     */\n    removeAll: function( list ) {\n      for ( var i = 0; i < list.length; i++ ) {\n        var item = list[ i ];\n        this.remove( item );\n      }\n    },\n\n    /**\n     * Pushes an item onto the end of the array.\n     * @param item\n     * @throws Error if duplicates are not allowed (see options.allowDuplicates) and item is already in the array\n     * @public\n     */\n    push: function( item ) {\n      if ( !this._options.allowDuplicates && this.contains( item ) ) {\n        throw new Error( 'duplicates are not allowed' );\n      }\n      this._array.push( item );\n      this.lengthProperty.set( this._array.length );\n      this._fireItemAdded( item );\n    },\n\n    /**\n     * Removes an item from the end of the array and returns it.\n     * @returns {*}\n     * @public\n     */\n    pop: function() {\n      var item = this._array.pop();\n      if ( item !== undefined ) {\n        this.lengthProperty.set( this._array.length );\n        this._fireItemRemoved( item );\n      }\n      return item;\n    },\n\n    /**\n     * Removes an item from the beginning of the array and returns it.\n     * @returns {*}\n     * @public\n     */\n    shift: function() {\n      var item = this._array.shift();\n      if ( item !== undefined ) {\n        this.lengthProperty.set( this._array.length );\n        this._fireItemRemoved( item );\n      }\n      return item;\n    },\n\n    /**\n     * Does the array contain the specified item?\n     * @param item\n     * @returns {boolean}\n     * @public\n     */\n    contains: function( item ) {\n      return this.indexOf( item ) !== -1;\n    },\n\n    /**\n     * Gets an item at the specified index.\n     * @param index\n     * @returns {*} the item, or undefined if there is no item at the specified index\n     * @public\n     */\n    get: function( index ) {\n      return this._array[ index ];\n    },\n\n    /**\n     * Gets the index of a specified item.\n     * @param item\n     * @returns {*} -1 if item is not in the array\n     * @public\n     */\n    indexOf: function( item ) {\n      return this._array.indexOf( item );\n    },\n\n    /**\n     * Removes all items from the array.\n     * @public\n     */\n    clear: function() {\n      var copy = this._array.slice( 0 );\n      for ( var i = 0; i < copy.length; i++ ) {\n        this.remove( copy[ i ] );\n      }\n    },\n\n    /**\n     * Applies a callback function to each item in the array\n     * @param callback function(item)\n     * @public\n     */\n    forEach: function( callback ) {\n      this._array.slice().forEach( callback ); // do this on a copy of the array, in case callbacks involve array modification\n    },\n\n    /**\n     * Maps the values in this ObservableArray using the specified function, and returns a new ObservableArray for chaining.\n     * @param mapFunction\n     * @returns {axon.ObservableArray}\n     * @public\n     */\n    map: function( mapFunction ) {\n      return new axon.ObservableArray( this._array.map( mapFunction ) );\n    },\n\n    /**\n     * Filters the values in this ObservableArray using the predicate function, and returns a new ObservableArray for chaining.\n     * @param predicate\n     * @returns {axon.ObservableArray}\n     * @public\n     */\n    filter: function( predicate ) {\n      return new axon.ObservableArray( this._array.filter( predicate ) );\n    },\n\n    /**\n     * Starting with the initial value, combine values from this ObservableArray to come up with a composite result.\n     * Same as foldLeft.  In underscore this is called _.reduce aka _.foldl or _.inject\n     * @param value\n     * @param combiner\n     * @returns {*}\n     * @public\n     */\n    reduce: function( value, combiner ) {\n      for ( var i = 0; i < this._array.length; i++ ) {\n        value = combiner( value, this._array[ i ] );\n      }\n      return value;\n    },\n\n    /**\n     * Return the underlying array\n     * @returns {*|Array}\n     * @public\n     */\n    getArray: function() {\n      return this._array;\n    }\n  } );\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * PropertySet facilitates creation and use of multiple named Property instances.  There are still several API design issues in question, but this\n * class is ready for use.\n *\n * A PropertySet is a set of Property instances that provides support for:\n * -Easily creating several properties using an object literal (hash)\n * -Resetting them as a group\n * -Set multiple values at once, using propertySet.set({x:100,y:200,name:'alice'});\n * -Support for derived properties, which appear with the same interface as basic properties\n * -Convenient toString that prints e.g., PropertySet{name:'larry',age:101,kids:['alice','bob']}\n * -Wiring up to listen to multiple properties simultaneously\n * -Add properties after the PropertySet is created?  Don't forget to add to the key list as well.\n * -Remove properties that were added using addProperty or the constructor\n *\n * Sample usage:\n * var p = new PropertySet( {name: 'larry', age: 100, kids: ['alice', 'bob']} );\n * p.nameProperty.link( function( n ) {console.log( 'hello ' + n );} );\n * p.name = 'jensen';\n * p.age = 101;//Happy Birthday!\n * console.log( p );\n * p.reset();\n * console.log( p );\n * p.set({name:'clark',age:102,kids:['alice','bob','charlie']});\n *\n * How would this be done without PropertySet (for comparison)?\n * //Normally would be created in a class but that is omitted here for brevity.\n * var p ={name: new Property('larry'), age: new Property('age'), kids: new Property(['alice','bob'])}\n * p.reset = function(){\n *   this.name.reset();\n *   this.age.reset();\n *   this.kids.reset();\n * }\n * p.name.set('clark');\n * p.age.set('102');\n * p.kids.set(['alice','bob','charlie']);\n *\n * Note: If a subclass ever substitutes a property like this: person.ageProperty = new Property(person.age), then it would break the getter/setter\n * @author Sam Reid\n */\n\ndefine( 'AXON/PropertySet',['require','AXON/Property','AXON/DerivedProperty','AXON/Multilink','AXON/Events','AXON/axon','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  // modules\n  var Property = require( 'AXON/Property' );\n  var DerivedProperty = require( 'AXON/DerivedProperty' );\n  var Multilink = require( 'AXON/Multilink' );\n  var Events = require( 'AXON/Events' );\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  // constants\n  var SUFFIX = 'Property';\n\n  /**\n   * PropertySet main constructor\n   * @param {Object} values - a hash: keys are the names of properties, values are initial property values. Eg { name: 'Curly', age: 40 }\n   * @param {Object} [options]\n   * @constructor\n   */\n  function PropertySet( values, options ) {\n\n    options = _.extend( {\n      tandemSet: {} // a hash, keys are a subset of the keys in values, and the value associated with each key is a {Tandem} tandem\n    }, options );\n\n    // Verify that the tandemSet doesn't contain bogus keys. filter should return 0 tandemSet keys that are not in values.\n    assert && assert( _.filter( _.keys( options.tandemSet ), function( key ) {\n        var isBad = !values.hasOwnProperty( key );\n        if ( isBad ) { console.error( 'bad tandem key: ' + key ); }\n        return isBad;\n      } ).length === 0, 'Some tandem keys do not appear in the PropertySet' );\n\n    var propertySet = this;\n\n    Events.call( this );\n\n    // @private Keep track of the keys so we know which to reset\n    this.keys = [];\n\n    Object.getOwnPropertyNames( values ).forEach( function( value ) {\n      propertySet.addProperty( value, values[ value ], options.tandemSet[ value ] );\n    } );\n  }\n\n  axon.register( 'PropertySet', PropertySet );\n\n  return inherit( Events, PropertySet, {\n\n    /**\n     * Adds a new property to this PropertySet\n     * @param {string} propertyName\n     * @param {*} value the property's initial value\n     * @param {Tandem} [tandem]\n     * @public\n     */\n    addProperty: function( propertyName, value, tandem ) {\n      this[ propertyName + SUFFIX ] = new Property( value, { tandem: tandem } );\n      this.addGetterAndSetter( propertyName );\n      this.keys.push( propertyName );\n    },\n\n    /**\n     * Remove any property (whether a derived property or not) that was added to this PropertySet\n     * @param {String} propertyName\n     * @public\n     */\n    removeProperty: function( propertyName ) {\n\n      //Remove from the keys (only for non-derived properties)\n      var index = this.keys.indexOf( propertyName );\n      if ( index !== -1 ) {\n        this.keys.splice( index, 1 );\n      }\n\n      this[ propertyName + SUFFIX ].dispose();\n\n      //Unregister the Property instance from the PropertySet\n      delete this[ propertyName + SUFFIX ];\n\n      //Unregister the getter/setter, if they exist\n      delete this[ propertyName ];\n    },\n\n    /**\n     * Adds a getter and setter using ES5 get/set syntax, similar to https://gist.github.com/dandean/1292057, same as in github/Atlas\n     * @param {string} propertyName\n     * @public\n     */\n    addGetterAndSetter: function( propertyName ) {\n      var property = this[ propertyName + SUFFIX ];\n\n      Object.defineProperty( this, propertyName, {\n\n        // Getter proxies to Model#get()...\n        get: function() { return property.get();},\n\n        // Setter proxies to Model#set(attributes)\n        set: function( value ) { property.set( value );},\n\n        // Make it configurable and enumerable so it's easy to override...\n        configurable: true,\n        enumerable: true\n      } );\n    },\n\n    /**\n     * Adds an ES5 getter to a property.\n     * @param {string} propertyName\n     * @public\n     */\n    addGetter: function( propertyName ) {\n      var property = this[ propertyName + SUFFIX ];\n\n      Object.defineProperty( this, propertyName, {\n\n        get: function() { return property.get();},\n\n        // Make it configurable and enumerable so it's easy to override...\n        configurable: true,\n        enumerable: true\n      } );\n    },\n\n    // @public Resets all of the properties associated with this PropertySet\n    reset: function() {\n      var propertySet = this;\n      this.keys.forEach( function( key ) {\n        propertySet[ key + SUFFIX ].reset();\n      } );\n    },\n\n    /**\n     * Creates a DerivedProperty from the given property property names and derivation.\n     * @param {string[]} propertyNames\n     * @param {function} derivation\n     * @param {Tandem} [tandem]\n     * @returns {DerivedProperty}\n     * @public\n     */\n    toDerivedProperty: function( propertyNames, derivation, tandem ) {\n      return new DerivedProperty( this.getProperties( propertyNames ), derivation, { tandem: tandem } );\n    },\n\n    /**\n     * Adds a derived property to the property set.\n     * @param {string} propertyName name for the derived property\n     * @param {string[]} dependencyNames names of the properties that it depends on\n     * @param {function} derivation function that expects args in the same order as dependencies\n     * @param {Tandem} [tandem]\n     * @public\n     */\n    addDerivedProperty: function( propertyName, dependencyNames, derivation, tandem ) {\n      this[ propertyName + SUFFIX ] = this.toDerivedProperty( dependencyNames, derivation, tandem );\n      this.addGetter( propertyName );\n    },\n\n    /**\n     * Returns an array of the requested properties.\n     * @param propertyNames\n     * @returns {*}\n     * @private\n     */\n    getProperties: function( propertyNames ) {\n      var propertySet = this;\n      return propertyNames.map( function( propertyName ) {\n        var propertyKey = propertyName + SUFFIX;\n        assert && assert( propertySet.hasOwnProperty( propertyKey ) );\n        return propertySet[ propertyKey ];\n      } );\n    },\n\n    /**\n     * Set all of the values specified in the object hash\n     * Allows you to use this form:\n     * puller.set( {x: knot.x, y: knot.y, knot: knot} );\n     *\n     * instead of this:\n     * puller.x.value = knot.x;\n     * puller.y.value = knot.y;\n     * puller.knot.value = knot;\n     *\n     * Throws an error if you try to set a value for which there is no property.\n     *\n     * @param {Object} values - see example above\n     * @public\n     */\n    setValues: function( values ) {\n      var propertySet = this;\n      Object.getOwnPropertyNames( values ).forEach( function( propertyName ) {\n        if ( typeof(propertySet[ propertyName + SUFFIX ] === 'Property') ) {\n          propertySet[ propertyName + SUFFIX ].set( values[ propertyName ] );\n        }\n        else {\n          throw new Error( 'property not found: ' + propertyName );\n        }\n      } );\n    },\n\n    /**\n     * Get a JS object literal with all the current values of the properties in this property set, say for serialization.\n     * @see set\n     * @public\n     * TODO: this works well to serialize numbers, strings, booleans.  How to handle complex state values such as Vector2 or nested Property?  Maybe that must be up to the client code.\n     * TODO: This was named 'get' to mirror the 'set' method above, but I'm concerned this will make them difficult to find/replace and may confuse with real getters & setters.  Maybe setState/getState would be better?\n     */\n    getValues: function() {\n      var state = {};\n      for ( var i = 0; i < this.keys.length; i++ ) {\n        var key = this.keys[ i ];\n        state[ key ] = this.property( key ).value;\n      }\n      return state;\n    },\n\n    /**\n     * Link to a property by name, see https://github.com/phetsims/axon/issues/16\n     * @param {string} propertyName the name of the property to link to\n     * @param {function }observer the callback to link to the property\n     * @public\n     */\n    link: function( propertyName, observer ) {\n      this[ propertyName + SUFFIX ].link( observer );\n    },\n\n    /**\n     * Unlink for a property by name, see https://github.com/phetsims/axon/issues/16\n     * @param {string} propertyName the name of the property to link to\n     * @param {function} observer the callback to link to the property\n     * @public\n     */\n    unlink: function( propertyName, observer ) {\n      this[ propertyName + SUFFIX ].unlink( observer );\n    },\n\n    /**\n     * Link an attribute to a property by name.  Return a handle to the observer so it can be removed using unlink().\n     * @param {string} propertyName the property to link to\n     * @param {Object} object the object for which the attribute will be set\n     * @param {string} attributeName the name of the attribute to set on the object\n     * @public\n     */\n    linkAttribute: function( propertyName, object, attributeName ) {\n      return this.property( propertyName ).linkAttribute( object, attributeName );\n    },\n\n    /**\n     * Unlink an observer added with linkAttribute.  Note: the args of linkAttribute do not match the args of\n     * unlinkAttribute: here, you must pass the observer handle returned by linkAttribute rather than object and attributeName\n     * @param {string} propertyName - the name of the property that the observer will be removed from\n     * @param {function} observer\n     * @public\n     */\n    unlinkAttribute: function( propertyName, observer ) {\n      this.property( propertyName ).unlink( observer );\n    },\n\n    /**\n     * Registers an observer with multiple properties, then notifies the observer immediately.\n     * @param {string[]} propertyNames\n     * @param {function} observer no params, returns nothing\n     * @public\n     */\n    multilink: function( propertyNames, observer ) {\n      return new Multilink( this.getProperties( propertyNames ), observer, false );\n    },\n\n    // @public\n    lazyMultilink: function( propertyNames, observer ) {\n      return new Multilink( this.getProperties( propertyNames ), observer, true );\n    },\n\n    /**\n     * Removes the multilink from this PropertySet.\n     * Same as calling dispose() on the multilink\n     * @param {Multilink} multilink\n     * @public\n     */\n    unmultilink: function( multilink ) {\n      multilink.dispose();\n    },\n\n    // @public\n    toString: function() {\n      var text = 'PropertySet{';\n      var propertySet = this;\n      for ( var i = 0; i < this.keys.length; i++ ) {\n        var key = this.keys[ i ];\n        text = text + key + ':' + propertySet[ key ].toString();\n        if ( i < this.keys.length - 1 ) {\n          text = text + ',';\n        }\n      }\n      return text + '}';\n    },\n\n    /**\n     * Unlinks all observers from all Property instances.\n     * @public\n     */\n    unlinkAll: function() {\n      var propertySet = this;\n      this.keys.forEach( function( key ) {\n        propertySet[ key + SUFFIX ].unlinkAll();\n      } );\n    },\n\n    /**\n     * Get a property by name, see https://github.com/phetsims/axon/issues/16\n     * @param {string} propertyName the name of the property to get\n     * @deprecated see https://github.com/phetsims/axon/issues/43\n     * @public\n     */\n    property: function( propertyName ) {\n      return this[ propertyName + SUFFIX ];\n    },\n\n    /**\n     * When the PropertySet is no longer used by the sim, it can be eliminated.  All Properties are disposed.\n     * @public\n     */\n    dispose: function() {\n      for ( var i = 0; i < this.keys.length; i++ ) {\n        this[ this.keys[ i ] + SUFFIX ].dispose();\n      }\n    }\n  } );\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'AXON/main',[\n  'AXON/axon',\n  'AXON/Property',\n  'AXON/DerivedProperty',\n  'AXON/Emitter',\n  'AXON/Events',\n  'AXON/ObservableArray',\n  'AXON/PropertySet',\n  'AXON/Multilink'\n], function( axon ) {\n  'use strict';\n  return axon;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\nrequire.config( {\n  deps: [ 'main', 'PHET_CORE/main', 'AXON/main' ],\n\n  paths: {\n    DOT: '.',\n    PHET_CORE: '../../phet-core/js',\n    AXON: '../../axon/js'\n  },\n\n  // optional cache buster to make browser refresh load all included scripts, can be disabled with ?cacheBuster=false\n  urlArgs: Date.now()\n} );\n\ndefine(\"config\", function(){});\n\n"]}